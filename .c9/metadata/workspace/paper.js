{"filter":false,"title":"paper.js","tooltip":"/paper.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":13017,"column":2},"action":"insert","lines":["/*!"," * Paper.js v0.9.22 - The Swiss Army Knife of Vector Graphics Scripting."," * http://paperjs.org/"," *"," * Copyright (c) 2011 - 2014, Juerg Lehni & Jonathan Puckey"," * http://scratchdisk.com/ & http://jonathanpuckey.com/"," *"," * Distributed under the MIT license. See LICENSE file for details."," *"," * All rights reserved."," *"," * Date: Sat Feb 28 19:20:48 2015 +0100"," *"," ***"," *"," * Straps.js - Class inheritance library with support for bean-style accessors"," *"," * Copyright (c) 2006 - 2013 Juerg Lehni"," * http://scratchdisk.com/"," *"," * Distributed under the MIT license."," *"," ***"," *"," * Acorn.js"," * http://marijnhaverbeke.nl/acorn/"," *"," * Acorn is a tiny, fast JavaScript parser written in JavaScript,"," * created by Marijn Haverbeke and released under an MIT license."," *"," */","","var paper = new function(undefined) {","","var Base = new function() {","\tvar hidden = /^(statics|enumerable|beans|preserve)$/,","","\t\tforEach = [].forEach || function(iter, bind) {","\t\t\tfor (var i = 0, l = this.length; i < l; i++)","\t\t\t\titer.call(bind, this[i], i, this);","\t\t},","","\t\tforIn = function(iter, bind) {","\t\t\tfor (var i in this)","\t\t\t\tif (this.hasOwnProperty(i))","\t\t\t\t\titer.call(bind, this[i], i, this);","\t\t},","","\t\tcreate = Object.create || function(proto) {","\t\t\treturn { __proto__: proto };","\t\t},","","\t\tdescribe = Object.getOwnPropertyDescriptor || function(obj, name) {","\t\t\tvar get = obj.__lookupGetter__ && obj.__lookupGetter__(name);","\t\t\treturn get","\t\t\t\t\t? { get: get, set: obj.__lookupSetter__(name),","\t\t\t\t\t\tenumerable: true, configurable: true }","\t\t\t\t\t: obj.hasOwnProperty(name)","\t\t\t\t\t\t? { value: obj[name], enumerable: true,","\t\t\t\t\t\t\tconfigurable: true, writable: true }","\t\t\t\t\t\t: null;","\t\t},","","\t\t_define = Object.defineProperty || function(obj, name, desc) {","\t\t\tif ((desc.get || desc.set) && obj.__defineGetter__) {","\t\t\t\tif (desc.get)","\t\t\t\t\tobj.__defineGetter__(name, desc.get);","\t\t\t\tif (desc.set)","\t\t\t\t\tobj.__defineSetter__(name, desc.set);","\t\t\t} else {","\t\t\t\tobj[name] = desc.value;","\t\t\t}","\t\t\treturn obj;","\t\t},","","\t\tdefine = function(obj, name, desc) {","\t\t\tdelete obj[name];","\t\t\treturn _define(obj, name, desc);","\t\t};","","\tfunction inject(dest, src, enumerable, beans, preserve) {","\t\tvar beansNames = {};","","\t\tfunction field(name, val) {","\t\t\tval = val || (val = describe(src, name))","\t\t\t\t\t&& (val.get ? val : val.value);","\t\t\tif (typeof val === 'string' && val[0] === '#')","\t\t\t\tval = dest[val.substring(1)] || val;","\t\t\tvar isFunc = typeof val === 'function',","\t\t\t\tres = val,","\t\t\t\tprev = preserve || isFunc","\t\t\t\t\t\t? (val && val.get ? name in dest : dest[name])","\t\t\t\t\t\t: null,","\t\t\t\tbean;","\t\t\tif (!preserve || !prev) {","\t\t\t\tif (isFunc && prev)","\t\t\t\t\tval.base = prev;","\t\t\t\tif (isFunc && beans !== false","\t\t\t\t\t\t&& (bean = name.match(/^([gs]et|is)(([A-Z])(.*))$/)))","\t\t\t\t\tbeansNames[bean[3].toLowerCase() + bean[4]] = bean[2];","\t\t\t\tif (!res || isFunc || !res.get || typeof res.get !== 'function'","\t\t\t\t\t\t|| !Base.isPlainObject(res))","\t\t\t\t\tres = { value: res, writable: true };","\t\t\t\tif ((describe(dest, name)","\t\t\t\t\t\t|| { configurable: true }).configurable) {","\t\t\t\t\tres.configurable = true;","\t\t\t\t\tres.enumerable = enumerable;","\t\t\t\t}","\t\t\t\tdefine(dest, name, res);","\t\t\t}","\t\t}","\t\tif (src) {","\t\t\tfor (var name in src) {","\t\t\t\tif (src.hasOwnProperty(name) && !hidden.test(name))","\t\t\t\t\tfield(name);","\t\t\t}","\t\t\tfor (var name in beansNames) {","\t\t\t\tvar part = beansNames[name],","\t\t\t\t\tset = dest['set' + part],","\t\t\t\t\tget = dest['get' + part] || set && dest['is' + part];","\t\t\t\tif (get && (beans === true || get.length === 0))","\t\t\t\t\tfield(name, { get: get, set: set });","\t\t\t}","\t\t}","\t\treturn dest;","\t}","","\tfunction each(obj, iter, bind) {","\t\tif (obj)","\t\t\t('length' in obj && !obj.getLength","\t\t\t\t\t&& typeof obj.length === 'number'","\t\t\t\t? forEach","\t\t\t\t: forIn).call(obj, iter, bind = bind || obj);","\t\treturn bind;","\t}","","\tfunction set(obj, props, exclude) {","\t\tfor (var key in props)","\t\t\tif (props.hasOwnProperty(key) && !(exclude && exclude[key]))","\t\t\t\tobj[key] = props[key];","\t\treturn obj;","\t}","","\treturn inject(function Base() {","\t\tfor (var i = 0, l = arguments.length; i < l; i++)","\t\t\tset(this, arguments[i]);","\t}, {","\t\tinject: function(src) {","\t\t\tif (src) {","\t\t\t\tvar statics = src.statics === true ? src : src.statics,","\t\t\t\t\tbeans = src.beans,","\t\t\t\t\tpreserve = src.preserve;","\t\t\t\tif (statics !== src)","\t\t\t\t\tinject(this.prototype, src, src.enumerable, beans, preserve);","\t\t\t\tinject(this, statics, true, beans, preserve);","\t\t\t}","\t\t\tfor (var i = 1, l = arguments.length; i < l; i++)","\t\t\t\tthis.inject(arguments[i]);","\t\t\treturn this;","\t\t},","","\t\textend: function() {","\t\t\tvar base = this,","\t\t\t\tctor;","\t\t\tfor (var i = 0, l = arguments.length; i < l; i++)","\t\t\t\tif (ctor = arguments[i].initialize)","\t\t\t\t\tbreak;","\t\t\tctor = ctor || function() {","\t\t\t\tbase.apply(this, arguments);","\t\t\t};","\t\t\tctor.prototype = create(this.prototype);","\t\t\tctor.base = base;","\t\t\tdefine(ctor.prototype, 'constructor',","\t\t\t\t\t{ value: ctor, writable: true, configurable: true });","\t\t\tinject(ctor, this, true);","\t\t\treturn arguments.length ? this.inject.apply(ctor, arguments) : ctor;","\t\t}","\t}, true).inject({","\t\tinject: function() {","\t\t\tfor (var i = 0, l = arguments.length; i < l; i++) {","\t\t\t\tvar src = arguments[i];","\t\t\t\tif (src)","\t\t\t\t\tinject(this, src, src.enumerable, src.beans, src.preserve);","\t\t\t}","\t\t\treturn this;","\t\t},","","\t\textend: function() {","\t\t\tvar res = create(this);","\t\t\treturn res.inject.apply(res, arguments);","\t\t},","","\t\teach: function(iter, bind) {","\t\t\treturn each(this, iter, bind);","\t\t},","","\t\tset: function(props) {","\t\t\treturn set(this, props);","\t\t},","","\t\tclone: function() {","\t\t\treturn new this.constructor(this);","\t\t},","","\t\tstatics: {","\t\t\teach: each,","\t\t\tcreate: create,","\t\t\tdefine: define,","\t\t\tdescribe: describe,","\t\t\tset: set,","","\t\t\tclone: function(obj) {","\t\t\t\treturn set(new obj.constructor(), obj);","\t\t\t},","","\t\t\tisPlainObject: function(obj) {","\t\t\t\tvar ctor = obj != null && obj.constructor;","\t\t\t\treturn ctor && (ctor === Object || ctor === Base","\t\t\t\t\t\t|| ctor.name === 'Object');","\t\t\t},","","\t\t\tpick: function(a, b) {","\t\t\t\treturn a !== undefined ? a : b;","\t\t\t}","\t\t}","\t});","};","","if (typeof module !== 'undefined')","\tmodule.exports = Base;","","Base.inject({","\ttoString: function() {","\t\treturn this._id != null","\t\t\t?  (this._class || 'Object') + (this._name","\t\t\t\t? \" '\" + this._name + \"'\"","\t\t\t\t: ' @' + this._id)","\t\t\t: '{ ' + Base.each(this, function(value, key) {","\t\t\t\tif (!/^_/.test(key)) {","\t\t\t\t\tvar type = typeof value;","\t\t\t\t\tthis.push(key + ': ' + (type === 'number'","\t\t\t\t\t\t\t? Formatter.instance.number(value)","\t\t\t\t\t\t\t: type === 'string' ? \"'\" + value + \"'\" : value));","\t\t\t\t}","\t\t\t}, []).join(', ') + ' }';","\t},","","\tgetClassName: function() {","\t\treturn this._class || '';","\t},","","\texportJSON: function(options) {","\t\treturn Base.exportJSON(this, options);","\t},","","\ttoJSON: function() {","\t\treturn Base.serialize(this);","\t},","","\t_set: function(props, exclude, dontCheck) {","\t\tif (props && (dontCheck || Base.isPlainObject(props))) {","\t\t\tvar orig = props._filtering || props;","\t\t\tfor (var key in orig) {","\t\t\t\tif (orig.hasOwnProperty(key) && !(exclude && exclude[key])) {","\t\t\t\t\tvar value = props[key];","\t\t\t\t\tif (value !== undefined)","\t\t\t\t\t\tthis[key] = value;","\t\t\t\t}","\t\t\t}","\t\t\treturn true;","\t\t}","\t},","","\tstatics: {","","\t\texports: {","\t\t\tenumerable: true","\t\t},","","\t\textend: function extend() {","\t\t\tvar res = extend.base.apply(this, arguments),","\t\t\t\tname = res.prototype._class;","\t\t\tif (name && !Base.exports[name])","\t\t\t\tBase.exports[name] = res;","\t\t\treturn res;","\t\t},","","\t\tequals: function(obj1, obj2) {","\t\t\tfunction checkKeys(o1, o2) {","\t\t\t\tfor (var i in o1)","\t\t\t\t\tif (o1.hasOwnProperty(i) && !o2.hasOwnProperty(i))","\t\t\t\t\t\treturn false;","\t\t\t\treturn true;","\t\t\t}","\t\t\tif (obj1 === obj2)","\t\t\t\treturn true;","\t\t\tif (obj1 && obj1.equals)","\t\t\t\treturn obj1.equals(obj2);","\t\t\tif (obj2 && obj2.equals)","\t\t\t\treturn obj2.equals(obj1);","\t\t\tif (Array.isArray(obj1) && Array.isArray(obj2)) {","\t\t\t\tif (obj1.length !== obj2.length)","\t\t\t\t\treturn false;","\t\t\t\tfor (var i = 0, l = obj1.length; i < l; i++) {","\t\t\t\t\tif (!Base.equals(obj1[i], obj2[i]))","\t\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t\treturn true;","\t\t\t}","\t\t\tif (obj1 && typeof obj1 === 'object'","\t\t\t\t\t&& obj2 && typeof obj2 === 'object') {","\t\t\t\tif (!checkKeys(obj1, obj2) || !checkKeys(obj2, obj1))","\t\t\t\t\treturn false;","\t\t\t\tfor (var i in obj1) {","\t\t\t\t\tif (obj1.hasOwnProperty(i)","\t\t\t\t\t\t\t&& !Base.equals(obj1[i], obj2[i]))","\t\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t\treturn true;","\t\t\t}","\t\t\treturn false;","\t\t},","","\t\tread: function(list, start, options, length) {","\t\t\tif (this === Base) {","\t\t\t\tvar value = this.peek(list, start);","\t\t\t\tlist.__index++;","\t\t\t\treturn value;","\t\t\t}","\t\t\tvar proto = this.prototype,","\t\t\t\treadIndex = proto._readIndex,","\t\t\t\tindex = start || readIndex && list.__index || 0;","\t\t\tif (!length)","\t\t\t\tlength = list.length - index;","\t\t\tvar obj = list[index];","\t\t\tif (obj instanceof this","\t\t\t\t|| options && options.readNull && obj == null && length <= 1) {","\t\t\t\tif (readIndex)","\t\t\t\t\tlist.__index = index + 1;","\t\t\t\treturn obj && options && options.clone ? obj.clone() : obj;","\t\t\t}","\t\t\tobj = Base.create(this.prototype);","\t\t\tif (readIndex)","\t\t\t\tobj.__read = true;","\t\t\tobj = obj.initialize.apply(obj, index > 0 || length < list.length","\t\t\t\t? Array.prototype.slice.call(list, index, index + length)","\t\t\t\t: list) || obj;","\t\t\tif (readIndex) {","\t\t\t\tlist.__index = index + obj.__read;","\t\t\t\tobj.__read = undefined;","\t\t\t}","\t\t\treturn obj;","\t\t},","","\t\tpeek: function(list, start) {","\t\t\treturn list[list.__index = start || list.__index || 0];","\t\t},","","\t\tremain: function(list) {","\t\t\treturn list.length - (list.__index || 0);","\t\t},","","\t\treadAll: function(list, start, options) {","\t\t\tvar res = [],","\t\t\t\tentry;","\t\t\tfor (var i = start || 0, l = list.length; i < l; i++) {","\t\t\t\tres.push(Array.isArray(entry = list[i])","\t\t\t\t\t\t? this.read(entry, 0, options)","\t\t\t\t\t\t: this.read(list, i, options, 1));","\t\t\t}","\t\t\treturn res;","\t\t},","","\t\treadNamed: function(list, name, start, options, length) {","\t\t\tvar value = this.getNamed(list, name),","\t\t\t\thasObject = value !== undefined;","\t\t\tif (hasObject) {","\t\t\t\tvar filtered = list._filtered;","\t\t\t\tif (!filtered) {","\t\t\t\t\tfiltered = list._filtered = Base.create(list[0]);","\t\t\t\t\tfiltered._filtering = list[0];","\t\t\t\t}","\t\t\t\tfiltered[name] = undefined;","\t\t\t}","\t\t\treturn this.read(hasObject ? [value] : list, start, options, length);","\t\t},","","\t\tgetNamed: function(list, name) {","\t\t\tvar arg = list[0];","\t\t\tif (list._hasObject === undefined)","\t\t\t\tlist._hasObject = list.length === 1 && Base.isPlainObject(arg);","\t\t\tif (list._hasObject)","\t\t\t\treturn name ? arg[name] : list._filtered || arg;","\t\t},","","\t\thasNamed: function(list, name) {","\t\t\treturn !!this.getNamed(list, name);","\t\t},","","\t\tisPlainValue: function(obj, asString) {","\t\t\treturn this.isPlainObject(obj) || Array.isArray(obj)","\t\t\t\t\t|| asString && typeof obj === 'string';","\t\t},","","\t\tserialize: function(obj, options, compact, dictionary) {","\t\t\toptions = options || {};","","\t\t\tvar root = !dictionary,","\t\t\t\tres;","\t\t\tif (root) {","\t\t\t\toptions.formatter = new Formatter(options.precision);","\t\t\t\tdictionary = {","\t\t\t\t\tlength: 0,","\t\t\t\t\tdefinitions: {},","\t\t\t\t\treferences: {},","\t\t\t\t\tadd: function(item, create) {","\t\t\t\t\t\tvar id = '#' + item._id,","\t\t\t\t\t\t\tref = this.references[id];","\t\t\t\t\t\tif (!ref) {","\t\t\t\t\t\t\tthis.length++;","\t\t\t\t\t\t\tvar res = create.call(item),","\t\t\t\t\t\t\t\tname = item._class;","\t\t\t\t\t\t\tif (name && res[0] !== name)","\t\t\t\t\t\t\t\tres.unshift(name);","\t\t\t\t\t\t\tthis.definitions[id] = res;","\t\t\t\t\t\t\tref = this.references[id] = [id];","\t\t\t\t\t\t}","\t\t\t\t\t\treturn ref;","\t\t\t\t\t}","\t\t\t\t};","\t\t\t}","\t\t\tif (obj && obj._serialize) {","\t\t\t\tres = obj._serialize(options, dictionary);","\t\t\t\tvar name = obj._class;","\t\t\t\tif (name && !compact && !res._compact && res[0] !== name)","\t\t\t\t\tres.unshift(name);","\t\t\t} else if (Array.isArray(obj)) {","\t\t\t\tres = [];","\t\t\t\tfor (var i = 0, l = obj.length; i < l; i++)","\t\t\t\t\tres[i] = Base.serialize(obj[i], options, compact,","\t\t\t\t\t\t\tdictionary);","\t\t\t\tif (compact)","\t\t\t\t\tres._compact = true;","\t\t\t} else if (Base.isPlainObject(obj)) {","\t\t\t\tres = {};","\t\t\t\tfor (var i in obj)","\t\t\t\t\tif (obj.hasOwnProperty(i))","\t\t\t\t\t\tres[i] = Base.serialize(obj[i], options, compact,","\t\t\t\t\t\t\t\tdictionary);","\t\t\t} else if (typeof obj === 'number') {","\t\t\t\tres = options.formatter.number(obj, options.precision);","\t\t\t} else {","\t\t\t\tres = obj;","\t\t\t}","\t\t\treturn root && dictionary.length > 0","\t\t\t\t\t? [['dictionary', dictionary.definitions], res]","\t\t\t\t\t: res;","\t\t},","","\t\tdeserialize: function(json, create, _data) {","\t\t\tvar res = json,","\t\t\t\tisRoot = !_data;","\t\t\t_data = _data || {};","\t\t\tif (Array.isArray(json)) {","\t\t\t\tvar type = json[0],","\t\t\t\t\tisDictionary = type === 'dictionary';","\t\t\t\tif (!isDictionary) {","\t\t\t\t\tif (_data.dictionary && json.length == 1 && /^#/.test(type))","\t\t\t\t\t\treturn _data.dictionary[type];","\t\t\t\t\ttype = Base.exports[type];","\t\t\t\t}","\t\t\t\tres = [];","\t\t\t\tfor (var i = type ? 1 : 0, l = json.length; i < l; i++)","\t\t\t\t\tres.push(Base.deserialize(json[i], create, _data));","\t\t\t\tif (isDictionary) {","\t\t\t\t\t_data.dictionary = res[0];","\t\t\t\t} else if (type) {","\t\t\t\t\tvar args = res;","\t\t\t\t\tif (create) {","\t\t\t\t\t\tres = create(type, args);","\t\t\t\t\t} else {","\t\t\t\t\t\tres = Base.create(type.prototype);","\t\t\t\t\t\ttype.apply(res, args);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t} else if (Base.isPlainObject(json)) {","\t\t\t\tres = {};","\t\t\t\tfor (var key in json)","\t\t\t\t\tres[key] = Base.deserialize(json[key], create, _data);","\t\t\t}","\t\t\treturn isRoot && json && json.length && json[0][0] === 'dictionary'","\t\t\t\t\t? res[1]","\t\t\t\t\t: res;","\t\t},","","\t\texportJSON: function(obj, options) {","\t\t\tvar json = Base.serialize(obj, options);","\t\t\treturn options && options.asString === false","\t\t\t\t\t? json","\t\t\t\t\t: JSON.stringify(json);","\t\t},","","\t\timportJSON: function(json, target) {","\t\t\treturn Base.deserialize(","\t\t\t\t\ttypeof json === 'string' ? JSON.parse(json) : json,","\t\t\t\t\tfunction(type, args) {","\t\t\t\t\t\tvar obj = target && target.constructor === type","\t\t\t\t\t\t\t\t? target","\t\t\t\t\t\t\t\t: Base.create(type.prototype),","\t\t\t\t\t\t\tisTarget = obj === target;","\t\t\t\t\t\tif (args.length === 1 && obj instanceof Item","\t\t\t\t\t\t\t\t&& (isTarget || !(obj instanceof Layer))) {","\t\t\t\t\t\t\tvar arg = args[0];","\t\t\t\t\t\t\tif (Base.isPlainObject(arg))","\t\t\t\t\t\t\t\targ.insert = false;","\t\t\t\t\t\t}","\t\t\t\t\t\ttype.apply(obj, args);","\t\t\t\t\t\tif (isTarget)","\t\t\t\t\t\t\ttarget = null;","\t\t\t\t\t\treturn obj;","\t\t\t\t\t});","\t\t},","","\t\tsplice: function(list, items, index, remove) {","\t\t\tvar amount = items && items.length,","\t\t\t\tappend = index === undefined;","\t\t\tindex = append ? list.length : index;","\t\t\tif (index > list.length)","\t\t\t\tindex = list.length;","\t\t\tfor (var i = 0; i < amount; i++)","\t\t\t\titems[i]._index = index + i;","\t\t\tif (append) {","\t\t\t\tlist.push.apply(list, items);","\t\t\t\treturn [];","\t\t\t} else {","\t\t\t\tvar args = [index, remove];","\t\t\t\tif (items)","\t\t\t\t\targs.push.apply(args, items);","\t\t\t\tvar removed = list.splice.apply(list, args);","\t\t\t\tfor (var i = 0, l = removed.length; i < l; i++)","\t\t\t\t\tremoved[i]._index = undefined;","\t\t\t\tfor (var i = index + amount, l = list.length; i < l; i++)","\t\t\t\t\tlist[i]._index = i;","\t\t\t\treturn removed;","\t\t\t}","\t\t},","","\t\tcapitalize: function(str) {","\t\t\treturn str.replace(/\\b[a-z]/g, function(match) {","\t\t\t\treturn match.toUpperCase();","\t\t\t});","\t\t},","","\t\tcamelize: function(str) {","\t\t\treturn str.replace(/-(.)/g, function(all, chr) {","\t\t\t\treturn chr.toUpperCase();","\t\t\t});","\t\t},","","\t\thyphenate: function(str) {","\t\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();","\t\t}","\t}","});","","var Emitter = {","\ton: function(type, func) {","\t\tif (typeof type !== 'string') {","\t\t\tBase.each(type, function(value, key) {","\t\t\t\tthis.on(key, value);","\t\t\t}, this);","\t\t} else {","\t\t\tvar entry = this._eventTypes[type];","\t\t\tif (entry) {","\t\t\t\tvar handlers = this._callbacks = this._callbacks || {};","\t\t\t\thandlers = handlers[type] = handlers[type] || [];","\t\t\t\tif (handlers.indexOf(func) === -1) {","\t\t\t\t\thandlers.push(func);","\t\t\t\t\tif (entry.install && handlers.length == 1)","\t\t\t\t\t\tentry.install.call(this, type);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn this;","\t},","","\toff: function(type, func) {","\t\tif (typeof type !== 'string') {","\t\t\tBase.each(type, function(value, key) {","\t\t\t\tthis.off(key, value);","\t\t\t}, this);","\t\t\treturn;","\t\t}","\t\tvar entry = this._eventTypes[type],","\t\t\thandlers = this._callbacks && this._callbacks[type],","\t\t\tindex;","\t\tif (entry && handlers) {","\t\t\tif (!func || (index = handlers.indexOf(func)) !== -1","\t\t\t\t\t&& handlers.length === 1) {","\t\t\t\tif (entry.uninstall)","\t\t\t\t\tentry.uninstall.call(this, type);","\t\t\t\tdelete this._callbacks[type];","\t\t\t} else if (index !== -1) {","\t\t\t\thandlers.splice(index, 1);","\t\t\t}","\t\t}","\t\treturn this;","\t},","","\tonce: function(type, func) {","\t\treturn this.on(type, function() {","\t\t\tfunc.apply(this, arguments);","\t\t\tthis.off(type, func);","\t\t});","\t},","","\temit: function(type, event) {","\t\tvar handlers = this._callbacks && this._callbacks[type];","\t\tif (!handlers)","\t\t\treturn false;","\t\tvar args = [].slice.call(arguments, 1);","\t\tfor (var i = 0, l = handlers.length; i < l; i++) {","\t\t\tif (handlers[i].apply(this, args) === false","\t\t\t\t\t&& event && event.stop) {","\t\t\t\tevent.stop();","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\treturn true;","\t},","","\tresponds: function(type) {","\t\treturn !!(this._callbacks && this._callbacks[type]);","\t},","","\tattach: '#on',","\tdetach: '#off',","\tfire: '#emit',","","\t_installEvents: function(install) {","\t\tvar handlers = this._callbacks,","\t\t\tkey = install ? 'install' : 'uninstall';","\t\tfor (var type in handlers) {","\t\t\tif (handlers[type].length > 0) {","\t\t\t\tvar entry = this._eventTypes[type],","\t\t\t\t\tfunc = entry[key];","\t\t\t\tif (func)","\t\t\t\t\tfunc.call(this, type);","\t\t\t}","\t\t}","\t},","","\tstatics: {","\t\tinject: function inject(src) {","\t\t\tvar events = src._events;","\t\t\tif (events) {","\t\t\t\tvar types = {};","\t\t\t\tBase.each(events, function(entry, key) {","\t\t\t\t\tvar isString = typeof entry === 'string',","\t\t\t\t\t\tname = isString ? entry : key,","\t\t\t\t\t\tpart = Base.capitalize(name),","\t\t\t\t\t\ttype = name.substring(2).toLowerCase();","\t\t\t\t\ttypes[type] = isString ? {} : entry;","\t\t\t\t\tname = '_' + name;","\t\t\t\t\tsrc['get' + part] = function() {","\t\t\t\t\t\treturn this[name];","\t\t\t\t\t};","\t\t\t\t\tsrc['set' + part] = function(func) {","\t\t\t\t\t\tvar prev = this[name];","\t\t\t\t\t\tif (prev)","\t\t\t\t\t\t\tthis.off(type, prev);","\t\t\t\t\t\tif (func)","\t\t\t\t\t\t\tthis.on(type, func);","\t\t\t\t\t\tthis[name] = func;","\t\t\t\t\t};","\t\t\t\t});","\t\t\t\tsrc._eventTypes = types;","\t\t\t}","\t\t\treturn inject.base.apply(this, arguments);","\t\t}","\t}","};","","var PaperScope = Base.extend({","\t_class: 'PaperScope',","","\tinitialize: function PaperScope() {","\t\tpaper = this;","\t\tthis.settings = new Base({","\t\t\tapplyMatrix: true,","\t\t\thandleSize: 4,","\t\t\thitTolerance: 0","\t\t});","\t\tthis.project = null;","\t\tthis.projects = [];","\t\tthis.tools = [];","\t\tthis.palettes = [];","\t\tthis._id = PaperScope._id++;","\t\tPaperScope._scopes[this._id] = this;","\t\tvar proto = PaperScope.prototype;","\t\tif (!this.support) {","\t\t\tvar ctx = CanvasProvider.getContext(1, 1);","\t\t\tproto.support = {","\t\t\t\tnativeDash: 'setLineDash' in ctx || 'mozDash' in ctx,","\t\t\t\tnativeBlendModes: BlendMode.nativeModes","\t\t\t};","\t\t\tCanvasProvider.release(ctx);","\t\t}","","\t\tif (!this.browser) {","\t\t\tvar browser = proto.browser = {};","\t\t\tnavigator.userAgent.toLowerCase().replace(","\t\t\t\t/(opera|chrome|safari|webkit|firefox|msie|trident|atom)\\/?\\s*([.\\d]+)(?:.*version\\/([.\\d]+))?(?:.*rv\\:([.\\d]+))?/g,","\t\t\t\tfunction(all, n, v1, v2, rv) {","\t\t\t\t\tif (!browser.chrome) {","\t\t\t\t\t\tvar v = n === 'opera' ? v2 : v1;","\t\t\t\t\t\tif (n === 'trident') {","\t\t\t\t\t\t\tv = rv;","\t\t\t\t\t\t\tn = 'msie';","\t\t\t\t\t\t}","\t\t\t\t\t\tbrowser.version = v;","\t\t\t\t\t\tbrowser.versionNumber = parseFloat(v);","\t\t\t\t\t\tbrowser.name = n;","\t\t\t\t\t\tbrowser[n] = true;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t);","\t\t\tif (browser.chrome)","\t\t\t\tdelete browser.webkit;","\t\t\tif (browser.atom)","\t\t\t\tdelete browser.chrome;","\t\t}","\t},","","\tversion: '0.9.22',","","\tgetView: function() {","\t\treturn this.project && this.project.getView();","\t},","","\tgetPaper: function() {","\t\treturn this;","\t},","","\texecute: function(code, url, options) {","\t\tpaper.PaperScript.execute(code, this, url, options);","\t\tView.updateFocus();","\t},","","\tinstall: function(scope) {","\t\tvar that = this;","\t\tBase.each(['project', 'view', 'tool'], function(key) {","\t\t\tBase.define(scope, key, {","\t\t\t\tconfigurable: true,","\t\t\t\tget: function() {","\t\t\t\t\treturn that[key];","\t\t\t\t}","\t\t\t});","\t\t});","\t\tfor (var key in this)","\t\t\tif (!/^_/.test(key) && this[key])","\t\t\t\tscope[key] = this[key];","\t},","","\tsetup: function(element) {","\t\tpaper = this;","\t\tthis.project = new Project(element);","\t\treturn this;","\t},","","\tactivate: function() {","\t\tpaper = this;","\t},","","\tclear: function() {","\t\tfor (var i = this.projects.length - 1; i >= 0; i--)","\t\t\tthis.projects[i].remove();","\t\tfor (var i = this.tools.length - 1; i >= 0; i--)","\t\t\tthis.tools[i].remove();","\t\tfor (var i = this.palettes.length - 1; i >= 0; i--)","\t\t\tthis.palettes[i].remove();","\t},","","\tremove: function() {","\t\tthis.clear();","\t\tdelete PaperScope._scopes[this._id];","\t},","","\tstatics: new function() {","\t\tfunction handleAttribute(name) {","\t\t\tname += 'Attribute';","\t\t\treturn function(el, attr) {","\t\t\t\treturn el[name](attr) || el[name]('data-paper-' + attr);","\t\t\t};","\t\t}","","\t\treturn {","\t\t\t_scopes: {},","\t\t\t_id: 0,","","\t\t\tget: function(id) {","\t\t\t\treturn this._scopes[id] || null;","\t\t\t},","","\t\t\tgetAttribute: handleAttribute('get'),","\t\t\thasAttribute: handleAttribute('has')","\t\t};","\t}","});","","var PaperScopeItem = Base.extend(Emitter, {","","\tinitialize: function(activate) {","\t\tthis._scope = paper;","\t\tthis._index = this._scope[this._list].push(this) - 1;","\t\tif (activate || !this._scope[this._reference])","\t\t\tthis.activate();","\t},","","\tactivate: function() {","\t\tif (!this._scope)","\t\t\treturn false;","\t\tvar prev = this._scope[this._reference];","\t\tif (prev && prev !== this)","\t\t\tprev.emit('deactivate');","\t\tthis._scope[this._reference] = this;","\t\tthis.emit('activate', prev);","\t\treturn true;","\t},","","\tisActive: function() {","\t\treturn this._scope[this._reference] === this;","\t},","","\tremove: function() {","\t\tif (this._index == null)","\t\t\treturn false;","\t\tBase.splice(this._scope[this._list], null, this._index, 1);","\t\tif (this._scope[this._reference] == this)","\t\t\tthis._scope[this._reference] = null;","\t\tthis._scope = null;","\t\treturn true;","\t}","});","","var Formatter = Base.extend({","\tinitialize: function(precision) {","\t\tthis.precision = precision || 5;","\t\tthis.multiplier = Math.pow(10, this.precision);","\t},","","\tnumber: function(val) {","\t\treturn Math.round(val * this.multiplier) / this.multiplier;","\t},","","\tpair: function(val1, val2, separator) {","\t\treturn this.number(val1) + (separator || ',') + this.number(val2);","\t},","","\tpoint: function(val, separator) {","\t\treturn this.number(val.x) + (separator || ',') + this.number(val.y);","\t},","","\tsize: function(val, separator) {","\t\treturn this.number(val.width) + (separator || ',')","\t\t\t\t+ this.number(val.height);","\t},","","\trectangle: function(val, separator) {","\t\treturn this.point(val, separator) + (separator || ',')","\t\t\t\t+ this.size(val, separator);","\t}","});","","Formatter.instance = new Formatter();","","var Numerical = new function() {","","\tvar abscissas = [","\t\t[  0.5773502691896257645091488],","\t\t[0,0.7745966692414833770358531],","\t\t[  0.3399810435848562648026658,0.8611363115940525752239465],","\t\t[0,0.5384693101056830910363144,0.9061798459386639927976269],","\t\t[  0.2386191860831969086305017,0.6612093864662645136613996,0.9324695142031520278123016],","\t\t[0,0.4058451513773971669066064,0.7415311855993944398638648,0.9491079123427585245261897],","\t\t[  0.1834346424956498049394761,0.5255324099163289858177390,0.7966664774136267395915539,0.9602898564975362316835609],","\t\t[0,0.3242534234038089290385380,0.6133714327005903973087020,0.8360311073266357942994298,0.9681602395076260898355762],","\t\t[  0.1488743389816312108848260,0.4333953941292471907992659,0.6794095682990244062343274,0.8650633666889845107320967,0.9739065285171717200779640],","\t\t[0,0.2695431559523449723315320,0.5190961292068118159257257,0.7301520055740493240934163,0.8870625997680952990751578,0.9782286581460569928039380],","\t\t[  0.1252334085114689154724414,0.3678314989981801937526915,0.5873179542866174472967024,0.7699026741943046870368938,0.9041172563704748566784659,0.9815606342467192506905491],","\t\t[0,0.2304583159551347940655281,0.4484927510364468528779129,0.6423493394403402206439846,0.8015780907333099127942065,0.9175983992229779652065478,0.9841830547185881494728294],","\t\t[  0.1080549487073436620662447,0.3191123689278897604356718,0.5152486363581540919652907,0.6872929048116854701480198,0.8272013150697649931897947,0.9284348836635735173363911,0.9862838086968123388415973],","\t\t[0,0.2011940939974345223006283,0.3941513470775633698972074,0.5709721726085388475372267,0.7244177313601700474161861,0.8482065834104272162006483,0.9372733924007059043077589,0.9879925180204854284895657],","\t\t[  0.0950125098376374401853193,0.2816035507792589132304605,0.4580167776572273863424194,0.6178762444026437484466718,0.7554044083550030338951012,0.8656312023878317438804679,0.9445750230732325760779884,0.9894009349916499325961542]","\t];","","\tvar weights = [","\t\t[1],","\t\t[0.8888888888888888888888889,0.5555555555555555555555556],","\t\t[0.6521451548625461426269361,0.3478548451374538573730639],","\t\t[0.5688888888888888888888889,0.4786286704993664680412915,0.2369268850561890875142640],","\t\t[0.4679139345726910473898703,0.3607615730481386075698335,0.1713244923791703450402961],","\t\t[0.4179591836734693877551020,0.3818300505051189449503698,0.2797053914892766679014678,0.1294849661688696932706114],","\t\t[0.3626837833783619829651504,0.3137066458778872873379622,0.2223810344533744705443560,0.1012285362903762591525314],","\t\t[0.3302393550012597631645251,0.3123470770400028400686304,0.2606106964029354623187429,0.1806481606948574040584720,0.0812743883615744119718922],","\t\t[0.2955242247147528701738930,0.2692667193099963550912269,0.2190863625159820439955349,0.1494513491505805931457763,0.0666713443086881375935688],","\t\t[0.2729250867779006307144835,0.2628045445102466621806889,0.2331937645919904799185237,0.1862902109277342514260976,0.1255803694649046246346943,0.0556685671161736664827537],","\t\t[0.2491470458134027850005624,0.2334925365383548087608499,0.2031674267230659217490645,0.1600783285433462263346525,0.1069393259953184309602547,0.0471753363865118271946160],","\t\t[0.2325515532308739101945895,0.2262831802628972384120902,0.2078160475368885023125232,0.1781459807619457382800467,0.1388735102197872384636018,0.0921214998377284479144218,0.0404840047653158795200216],","\t\t[0.2152638534631577901958764,0.2051984637212956039659241,0.1855383974779378137417166,0.1572031671581935345696019,0.1215185706879031846894148,0.0801580871597602098056333,0.0351194603317518630318329],","\t\t[0.2025782419255612728806202,0.1984314853271115764561183,0.1861610000155622110268006,0.1662692058169939335532009,0.1395706779261543144478048,0.1071592204671719350118695,0.0703660474881081247092674,0.0307532419961172683546284],","\t\t[0.1894506104550684962853967,0.1826034150449235888667637,0.1691565193950025381893121,0.1495959888165767320815017,0.1246289712555338720524763,0.0951585116824927848099251,0.0622535239386478928628438,0.0271524594117540948517806]","\t];","","\tvar abs = Math.abs,","\t\tsqrt = Math.sqrt,","\t\tpow = Math.pow,","\t\tTOLERANCE = 1e-6,","\t\tEPSILON = 1e-12,","\t\tMACHINE_EPSILON = 1.12e-16;","","\treturn {","\t\tTOLERANCE: TOLERANCE,","\t\tEPSILON: EPSILON,","\t\tMACHINE_EPSILON: MACHINE_EPSILON,","\t\tKAPPA: 4 * (sqrt(2) - 1) / 3,","","\t\tisZero: function(val) {","\t\t\treturn abs(val) <= EPSILON;","\t\t},","","\t\tintegrate: function(f, a, b, n) {","\t\t\tvar x = abscissas[n - 2],","\t\t\t\tw = weights[n - 2],","\t\t\t\tA = (b - a) * 0.5,","\t\t\t\tB = A + a,","\t\t\t\ti = 0,","\t\t\t\tm = (n + 1) >> 1,","\t\t\t\tsum = n & 1 ? w[i++] * f(B) : 0;","\t\t\twhile (i < m) {","\t\t\t\tvar Ax = A * x[i];","\t\t\t\tsum += w[i++] * (f(B + Ax) + f(B - Ax));","\t\t\t}","\t\t\treturn A * sum;","\t\t},","","\t\tfindRoot: function(f, df, x, a, b, n, tolerance) {","\t\t\tfor (var i = 0; i < n; i++) {","\t\t\t\tvar fx = f(x),","\t\t\t\t\tdx = fx / df(x),","\t\t\t\t\tnx = x - dx;","\t\t\t\tif (abs(dx) < tolerance)","\t\t\t\t\treturn nx;","\t\t\t\tif (fx > 0) {","\t\t\t\t\tb = x;","\t\t\t\t\tx = nx <= a ? (a + b) * 0.5 : nx;","\t\t\t\t} else {","\t\t\t\t\ta = x;","\t\t\t\t\tx = nx >= b ? (a + b) * 0.5 : nx;","\t\t\t\t}","\t\t\t}","\t\t\treturn x;","\t\t},","","\t\tsolveQuadratic: function(a, b, c, roots, min, max) {","\t\t\tvar count = 0,","\t\t\t\tx1, x2 = Infinity,","\t\t\t\tB = b,","\t\t\t\tD;","\t\t\tb /= 2;","\t\t\tD = b * b - a * c;","\t\t\tif (abs(D) < MACHINE_EPSILON) {","\t\t\t\tvar pow = Math.pow,","\t\t\t\t\tgmC = pow(abs(a*b*c), 1/3);","\t\t\t\tif (gmC < 1e-8) {","\t\t\t\t\t/*","\t\t\t\t\t * we multiply with a factor to normalize the","\t\t\t\t\t * coefficients. The factor is just the nearest exponent","\t\t\t\t\t * of 10, big enough to raise all the coefficients to","\t\t\t\t\t * nearly [-1, +1] range.","\t\t\t\t\t */","\t\t\t\t\tvar mult = pow(10, abs(","\t\t\t\t\t\tMath.floor(Math.log(gmC) * Math.LOG10E)));","\t\t\t\t\tif (!isFinite(mult))","\t\t\t\t\t\tmult = 0;","\t\t\t\t\ta *= mult;","\t\t\t\t\tb *= mult;","\t\t\t\t\tc *= mult;","\t\t\t\t\tD = b * b - a * c;","\t\t\t\t}","\t\t\t}","\t\t\tif (abs(a) < MACHINE_EPSILON) {","\t\t\t\tif (abs(B) < MACHINE_EPSILON)","\t\t\t\t\treturn abs(c) < MACHINE_EPSILON ? -1 : 0;","\t\t\t\tx1 = -c / B;","\t\t\t} else {","\t\t\t\tif (D >= -MACHINE_EPSILON) {","\t\t\t\t\tD = D < 0 ? 0 : D;","\t\t\t\t\tvar R = sqrt(D);","\t\t\t\t\tif (b >= MACHINE_EPSILON && b <= MACHINE_EPSILON) {","\t\t\t\t\t\tx1 = abs(a) >= abs(c) ? R / a : -c / R;","\t\t\t\t\t\tx2 = -x1;","\t\t\t\t\t} else {","\t\t\t\t\t\tvar q = -(b + (b < 0 ? -1 : 1) * R);","\t\t\t\t\t\tx1 = q / a;","\t\t\t\t\t\tx2 = c / q;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif (isFinite(x1) && (min == null || x1 >= min && x1 <= max))","\t\t\t\troots[count++] = x1;","\t\t\tif (x2 !== x1","\t\t\t\t\t&& isFinite(x2) && (min == null || x2 >= min && x2 <= max))","\t\t\t\troots[count++] = x2;","\t\t\treturn count;","\t\t},","","\t\tsolveCubic: function(a, b, c, d, roots, min, max) {","\t\t\tvar x, b1, c2, count = 0;","\t\t\tif (a === 0) {","\t\t\t\ta = b;","\t\t\t\tb1 = c;","\t\t\t\tc2 = d;","\t\t\t\tx = Infinity;","\t\t\t} else if (d === 0) {","\t\t\t\tb1 = b;","\t\t\t\tc2 = c;","\t\t\t\tx = 0;","\t\t\t} else {","\t\t\t\tvar ec = 1 + MACHINE_EPSILON,","\t\t\t\t\tx0, q, qd, t, r, s, tmp;","\t\t\t\tx = -(b / a) / 3;","\t\t\t\ttmp = a * x,","\t\t\t\tb1 = tmp + b,","\t\t\t\tc2 = b1 * x + c,","\t\t\t\tqd = (tmp + b1) * x + c2,","\t\t\t\tq = c2 * x + d;","\t\t\t\tt = q /a;","\t\t\t\tr = pow(abs(t), 1/3);","\t\t\t\ts = t < 0 ? -1 : 1;","\t\t\t\tt = -qd / a;","\t\t\t\tr = t > 0 ? 1.3247179572 * Math.max(r, sqrt(t)) : r;","\t\t\t\tx0 = x - s * r;","\t\t\t\tif (x0 !== x) {","\t\t\t\t\tdo {","\t\t\t\t\t\tx = x0;","\t\t\t\t\t\ttmp = a * x,","\t\t\t\t\t\tb1 = tmp + b,","\t\t\t\t\t\tc2 = b1 * x + c,","\t\t\t\t\t\tqd = (tmp + b1) * x + c2,","\t\t\t\t\t\tq = c2 * x + d;","\t\t\t\t\t\tx0 = qd === 0 ? x : x - q / qd / ec;","\t\t\t\t\t\tif (x0 === x) {","\t\t\t\t\t\t\tx = x0;","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t} while (s * x0 > s * x);","\t\t\t\t\tif (abs(a) * x * x > abs(d / x)) {","\t\t\t\t\t\tc2 = -d / x;","\t\t\t\t\t\tb1 = (c2 - c) / x;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tvar count = Numerical.solveQuadratic(a, b1, c2, roots, min, max);","\t\t\tif (isFinite(x) && (count === 0 || x !== roots[count - 1])","\t\t\t\t\t&& (min == null || x >= min && x <= max))","\t\t\t\troots[count++] = x;","\t\t\treturn count;","\t\t}","\t};","};","","var Point = Base.extend({","\t_class: 'Point',","\t_readIndex: true,","","\tinitialize: function Point(arg0, arg1) {","\t\tvar type = typeof arg0;","\t\tif (type === 'number') {","\t\t\tvar hasY = typeof arg1 === 'number';","\t\t\tthis.x = arg0;","\t\t\tthis.y = hasY ? arg1 : arg0;","\t\t\tif (this.__read)","\t\t\t\tthis.__read = hasY ? 2 : 1;","\t\t} else if (type === 'undefined' || arg0 === null) {","\t\t\tthis.x = this.y = 0;","\t\t\tif (this.__read)","\t\t\t\tthis.__read = arg0 === null ? 1 : 0;","\t\t} else {","\t\t\tif (Array.isArray(arg0)) {","\t\t\t\tthis.x = arg0[0];","\t\t\t\tthis.y = arg0.length > 1 ? arg0[1] : arg0[0];","\t\t\t} else if (arg0.x != null) {","\t\t\t\tthis.x = arg0.x;","\t\t\t\tthis.y = arg0.y;","\t\t\t} else if (arg0.width != null) {","\t\t\t\tthis.x = arg0.width;","\t\t\t\tthis.y = arg0.height;","\t\t\t} else if (arg0.angle != null) {","\t\t\t\tthis.x = arg0.length;","\t\t\t\tthis.y = 0;","\t\t\t\tthis.setAngle(arg0.angle);","\t\t\t} else {","\t\t\t\tthis.x = this.y = 0;","\t\t\t\tif (this.__read)","\t\t\t\t\tthis.__read = 0;","\t\t\t}","\t\t\tif (this.__read)","\t\t\t\tthis.__read = 1;","\t\t}","\t},","","\tset: function(x, y) {","\t\tthis.x = x;","\t\tthis.y = y;","\t\treturn this;","\t},","","\tequals: function(point) {","\t\treturn this === point || point","\t\t\t\t&& (this.x === point.x && this.y === point.y","\t\t\t\t\t|| Array.isArray(point)","\t\t\t\t\t\t&& this.x === point[0] && this.y === point[1])","\t\t\t\t|| false;","\t},","","\tclone: function() {","\t\treturn new Point(this.x, this.y);","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '{ x: ' + f.number(this.x) + ', y: ' + f.number(this.y) + ' }';","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter;","\t\treturn [f.number(this.x), f.number(this.y)];","\t},","","\tgetLength: function() {","\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);","\t},","","\tsetLength: function(length) {","\t\tif (this.isZero()) {","\t\t\tvar angle = this._angle || 0;","\t\t\tthis.set(","\t\t\t\tMath.cos(angle) * length,","\t\t\t\tMath.sin(angle) * length","\t\t\t);","\t\t} else {","\t\t\tvar scale = length / this.getLength();","\t\t\tif (Numerical.isZero(scale))","\t\t\t\tthis.getAngle();","\t\t\tthis.set(","\t\t\t\tthis.x * scale,","\t\t\t\tthis.y * scale","\t\t\t);","\t\t}","\t},","\tgetAngle: function() {","\t\treturn this.getAngleInRadians.apply(this, arguments) * 180 / Math.PI;","\t},","","\tsetAngle: function(angle) {","\t\tthis.setAngleInRadians.call(this, angle * Math.PI / 180);","\t},","","\tgetAngleInDegrees: '#getAngle',","\tsetAngleInDegrees: '#setAngle',","","\tgetAngleInRadians: function() {","\t\tif (!arguments.length) {","\t\t\treturn this.isZero()","\t\t\t\t\t? this._angle || 0","\t\t\t\t\t: this._angle = Math.atan2(this.y, this.x);","\t\t} else {","\t\t\tvar point = Point.read(arguments),","\t\t\t\tdiv = this.getLength() * point.getLength();","\t\t\tif (Numerical.isZero(div)) {","\t\t\t\treturn NaN;","\t\t\t} else {","\t\t\t\tvar a = this.dot(point) / div;","\t\t\t\treturn Math.acos(a < -1 ? -1 : a > 1 ? 1 : a);","\t\t\t}","\t\t}","\t},","","\tsetAngleInRadians: function(angle) {","\t\tthis._angle = angle;","\t\tif (!this.isZero()) {","\t\t\tvar length = this.getLength();","\t\t\tthis.set(","\t\t\t\tMath.cos(angle) * length,","\t\t\t\tMath.sin(angle) * length","\t\t\t);","\t\t}","\t},","","\tgetQuadrant: function() {","\t\treturn this.x >= 0 ? this.y >= 0 ? 1 : 4 : this.y >= 0 ? 2 : 3;","\t}","}, {","\tbeans: false,","","\tgetDirectedAngle: function() {","\t\tvar point = Point.read(arguments);","\t\treturn Math.atan2(this.cross(point), this.dot(point)) * 180 / Math.PI;","\t},","","\tgetDistance: function() {","\t\tvar point = Point.read(arguments),","\t\t\tx = point.x - this.x,","\t\t\ty = point.y - this.y,","\t\t\td = x * x + y * y,","\t\t\tsquared = Base.read(arguments);","\t\treturn squared ? d : Math.sqrt(d);","\t},","","\tnormalize: function(length) {","\t\tif (length === undefined)","\t\t\tlength = 1;","\t\tvar current = this.getLength(),","\t\t\tscale = current !== 0 ? length / current : 0,","\t\t\tpoint = new Point(this.x * scale, this.y * scale);","\t\tif (scale >= 0)","\t\t\tpoint._angle = this._angle;","\t\treturn point;","\t},","","\trotate: function(angle, center) {","\t\tif (angle === 0)","\t\t\treturn this.clone();","\t\tangle = angle * Math.PI / 180;","\t\tvar point = center ? this.subtract(center) : this,","\t\t\ts = Math.sin(angle),","\t\t\tc = Math.cos(angle);","\t\tpoint = new Point(","\t\t\tpoint.x * c - point.y * s,","\t\t\tpoint.x * s + point.y * c","\t\t);","\t\treturn center ? point.add(center) : point;","\t},","","\ttransform: function(matrix) {","\t\treturn matrix ? matrix._transformPoint(this) : this;","\t},","","\tadd: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x + point.x, this.y + point.y);","\t},","","\tsubtract: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x - point.x, this.y - point.y);","\t},","","\tmultiply: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x * point.x, this.y * point.y);","\t},","","\tdivide: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x / point.x, this.y / point.y);","\t},","","\tmodulo: function() {","\t\tvar point = Point.read(arguments);","\t\treturn new Point(this.x % point.x, this.y % point.y);","\t},","","\tnegate: function() {","\t\treturn new Point(-this.x, -this.y);","\t},","","\tisInside: function() {","\t\treturn Rectangle.read(arguments).contains(this);","\t},","","\tisClose: function(point, tolerance) {","\t\treturn this.getDistance(point) < tolerance;","\t},","","\tisColinear: function(point) {","\t\treturn Math.abs(this.cross(point)) < 1e-12;","\t},","","\tisOrthogonal: function(point) {","\t\treturn Math.abs(this.dot(point)) < 1e-12;","\t},","","\tisZero: function() {","\t\treturn Numerical.isZero(this.x) && Numerical.isZero(this.y);","\t},","","\tisNaN: function() {","\t\treturn isNaN(this.x) || isNaN(this.y);","\t},","","\tdot: function() {","\t\tvar point = Point.read(arguments);","\t\treturn this.x * point.x + this.y * point.y;","\t},","","\tcross: function() {","\t\tvar point = Point.read(arguments);","\t\treturn this.x * point.y - this.y * point.x;","\t},","","\tproject: function() {","\t\tvar point = Point.read(arguments);","\t\tif (point.isZero()) {","\t\t\treturn new Point(0, 0);","\t\t} else {","\t\t\tvar scale = this.dot(point) / point.dot(point);","\t\t\treturn new Point(","\t\t\t\tpoint.x * scale,","\t\t\t\tpoint.y * scale","\t\t\t);","\t\t}","\t},","","\tstatics: {","\t\tmin: function() {","\t\t\tvar point1 = Point.read(arguments),","\t\t\t\tpoint2 = Point.read(arguments);","\t\t\treturn new Point(","\t\t\t\tMath.min(point1.x, point2.x),","\t\t\t\tMath.min(point1.y, point2.y)","\t\t\t);","\t\t},","","\t\tmax: function() {","\t\t\tvar point1 = Point.read(arguments),","\t\t\t\tpoint2 = Point.read(arguments);","\t\t\treturn new Point(","\t\t\t\tMath.max(point1.x, point2.x),","\t\t\t\tMath.max(point1.y, point2.y)","\t\t\t);","\t\t},","","\t\trandom: function() {","\t\t\treturn new Point(Math.random(), Math.random());","\t\t}","\t}","}, Base.each(['round', 'ceil', 'floor', 'abs'], function(name) {","\tvar op = Math[name];","\tthis[name] = function() {","\t\treturn new Point(op(this.x), op(this.y));","\t};","}, {}));","","var LinkedPoint = Point.extend({","\tinitialize: function Point(x, y, owner, setter) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._owner = owner;","\t\tthis._setter = setter;","\t},","","\tset: function(x, y, _dontNotify) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tif (!_dontNotify)","\t\t\tthis._owner[this._setter](this);","\t\treturn this;","\t},","","\tgetX: function() {","\t\treturn this._x;","\t},","","\tsetX: function(x) {","\t\tthis._x = x;","\t\tthis._owner[this._setter](this);","\t},","","\tgetY: function() {","\t\treturn this._y;","\t},","","\tsetY: function(y) {","\t\tthis._y = y;","\t\tthis._owner[this._setter](this);","\t}","});","","var Size = Base.extend({","\t_class: 'Size',","\t_readIndex: true,","","\tinitialize: function Size(arg0, arg1) {","\t\tvar type = typeof arg0;","\t\tif (type === 'number') {","\t\t\tvar hasHeight = typeof arg1 === 'number';","\t\t\tthis.width = arg0;","\t\t\tthis.height = hasHeight ? arg1 : arg0;","\t\t\tif (this.__read)","\t\t\t\tthis.__read = hasHeight ? 2 : 1;","\t\t} else if (type === 'undefined' || arg0 === null) {","\t\t\tthis.width = this.height = 0;","\t\t\tif (this.__read)","\t\t\t\tthis.__read = arg0 === null ? 1 : 0;","\t\t} else {","\t\t\tif (Array.isArray(arg0)) {","\t\t\t\tthis.width = arg0[0];","\t\t\t\tthis.height = arg0.length > 1 ? arg0[1] : arg0[0];","\t\t\t} else if (arg0.width != null) {","\t\t\t\tthis.width = arg0.width;","\t\t\t\tthis.height = arg0.height;","\t\t\t} else if (arg0.x != null) {","\t\t\t\tthis.width = arg0.x;","\t\t\t\tthis.height = arg0.y;","\t\t\t} else {","\t\t\t\tthis.width = this.height = 0;","\t\t\t\tif (this.__read)","\t\t\t\t\tthis.__read = 0;","\t\t\t}","\t\t\tif (this.__read)","\t\t\t\tthis.__read = 1;","\t\t}","\t},","","\tset: function(width, height) {","\t\tthis.width = width;","\t\tthis.height = height;","\t\treturn this;","\t},","","\tequals: function(size) {","\t\treturn size === this || size && (this.width === size.width","\t\t\t\t&& this.height === size.height","\t\t\t\t|| Array.isArray(size) && this.width === size[0]","\t\t\t\t\t&& this.height === size[1]) || false;","\t},","","\tclone: function() {","\t\treturn new Size(this.width, this.height);","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '{ width: ' + f.number(this.width)","\t\t\t\t+ ', height: ' + f.number(this.height) + ' }';","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter;","\t\treturn [f.number(this.width),","\t\t\t\tf.number(this.height)];","\t},","","\tadd: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width + size.width, this.height + size.height);","\t},","","\tsubtract: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width - size.width, this.height - size.height);","\t},","","\tmultiply: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width * size.width, this.height * size.height);","\t},","","\tdivide: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width / size.width, this.height / size.height);","\t},","","\tmodulo: function() {","\t\tvar size = Size.read(arguments);","\t\treturn new Size(this.width % size.width, this.height % size.height);","\t},","","\tnegate: function() {","\t\treturn new Size(-this.width, -this.height);","\t},","","\tisZero: function() {","\t\treturn Numerical.isZero(this.width) && Numerical.isZero(this.height);","\t},","","\tisNaN: function() {","\t\treturn isNaN(this.width) || isNaN(this.height);","\t},","","\tstatics: {","\t\tmin: function(size1, size2) {","\t\t\treturn new Size(","\t\t\t\tMath.min(size1.width, size2.width),","\t\t\t\tMath.min(size1.height, size2.height));","\t\t},","","\t\tmax: function(size1, size2) {","\t\t\treturn new Size(","\t\t\t\tMath.max(size1.width, size2.width),","\t\t\t\tMath.max(size1.height, size2.height));","\t\t},","","\t\trandom: function() {","\t\t\treturn new Size(Math.random(), Math.random());","\t\t}","\t}","}, Base.each(['round', 'ceil', 'floor', 'abs'], function(name) {","\tvar op = Math[name];","\tthis[name] = function() {","\t\treturn new Size(op(this.width), op(this.height));","\t};","}, {}));","","var LinkedSize = Size.extend({","\tinitialize: function Size(width, height, owner, setter) {","\t\tthis._width = width;","\t\tthis._height = height;","\t\tthis._owner = owner;","\t\tthis._setter = setter;","\t},","","\tset: function(width, height, _dontNotify) {","\t\tthis._width = width;","\t\tthis._height = height;","\t\tif (!_dontNotify)","\t\t\tthis._owner[this._setter](this);","\t\treturn this;","\t},","","\tgetWidth: function() {","\t\treturn this._width;","\t},","","\tsetWidth: function(width) {","\t\tthis._width = width;","\t\tthis._owner[this._setter](this);","\t},","","\tgetHeight: function() {","\t\treturn this._height;","\t},","","\tsetHeight: function(height) {","\t\tthis._height = height;","\t\tthis._owner[this._setter](this);","\t}","});","","var Rectangle = Base.extend({","\t_class: 'Rectangle',","\t_readIndex: true,","\tbeans: true,","","\tinitialize: function Rectangle(arg0, arg1, arg2, arg3) {","\t\tvar type = typeof arg0,","\t\t\tread = 0;","\t\tif (type === 'number') {","\t\t\tthis.x = arg0;","\t\t\tthis.y = arg1;","\t\t\tthis.width = arg2;","\t\t\tthis.height = arg3;","\t\t\tread = 4;","\t\t} else if (type === 'undefined' || arg0 === null) {","\t\t\tthis.x = this.y = this.width = this.height = 0;","\t\t\tread = arg0 === null ? 1 : 0;","\t\t} else if (arguments.length === 1) {","\t\t\tif (Array.isArray(arg0)) {","\t\t\t\tthis.x = arg0[0];","\t\t\t\tthis.y = arg0[1];","\t\t\t\tthis.width = arg0[2];","\t\t\t\tthis.height = arg0[3];","\t\t\t\tread = 1;","\t\t\t} else if (arg0.x !== undefined || arg0.width !== undefined) {","\t\t\t\tthis.x = arg0.x || 0;","\t\t\t\tthis.y = arg0.y || 0;","\t\t\t\tthis.width = arg0.width || 0;","\t\t\t\tthis.height = arg0.height || 0;","\t\t\t\tread = 1;","\t\t\t} else if (arg0.from === undefined && arg0.to === undefined) {","\t\t\t\tthis.x = this.y = this.width = this.height = 0;","\t\t\t\tthis._set(arg0);","\t\t\t\tread = 1;","\t\t\t}","\t\t}","\t\tif (!read) {","\t\t\tvar point = Point.readNamed(arguments, 'from'),","\t\t\t\tnext = Base.peek(arguments);","\t\t\tthis.x = point.x;","\t\t\tthis.y = point.y;","\t\t\tif (next && next.x !== undefined || Base.hasNamed(arguments, 'to')) {","\t\t\t\tvar to = Point.readNamed(arguments, 'to');","\t\t\t\tthis.width = to.x - point.x;","\t\t\t\tthis.height = to.y - point.y;","\t\t\t\tif (this.width < 0) {","\t\t\t\t\tthis.x = to.x;","\t\t\t\t\tthis.width = -this.width;","\t\t\t\t}","\t\t\t\tif (this.height < 0) {","\t\t\t\t\tthis.y = to.y;","\t\t\t\t\tthis.height = -this.height;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tvar size = Size.read(arguments);","\t\t\t\tthis.width = size.width;","\t\t\t\tthis.height = size.height;","\t\t\t}","\t\t\tread = arguments.__index;","\t\t}","\t\tif (this.__read)","\t\t\tthis.__read = read;","\t},","","\tset: function(x, y, width, height) {","\t\tthis.x = x;","\t\tthis.y = y;","\t\tthis.width = width;","\t\tthis.height = height;","\t\treturn this;","\t},","","\tclone: function() {","\t\treturn new Rectangle(this.x, this.y, this.width, this.height);","\t},","","\tequals: function(rect) {","\t\tvar rt = Base.isPlainValue(rect)","\t\t\t\t? Rectangle.read(arguments)","\t\t\t\t: rect;","\t\treturn rt === this","\t\t\t\t|| rt && this.x === rt.x && this.y === rt.y","\t\t\t\t\t&& this.width === rt.width && this.height === rt.height","\t\t\t\t|| false;","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '{ x: ' + f.number(this.x)","\t\t\t\t+ ', y: ' + f.number(this.y)","\t\t\t\t+ ', width: ' + f.number(this.width)","\t\t\t\t+ ', height: ' + f.number(this.height)","\t\t\t\t+ ' }';","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter;","\t\treturn [f.number(this.x),","\t\t\t\tf.number(this.y),","\t\t\t\tf.number(this.width),","\t\t\t\tf.number(this.height)];","\t},","","\tgetPoint: function(_dontLink) {","\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\treturn new ctor(this.x, this.y, this, 'setPoint');","\t},","","\tsetPoint: function() {","\t\tvar point = Point.read(arguments);","\t\tthis.x = point.x;","\t\tthis.y = point.y;","\t},","","\tgetSize: function(_dontLink) {","\t\tvar ctor = _dontLink ? Size : LinkedSize;","\t\treturn new ctor(this.width, this.height, this, 'setSize');","\t},","","\tsetSize: function() {","\t\tvar size = Size.read(arguments);","\t\tif (this._fixX)","\t\t\tthis.x += (this.width - size.width) * this._fixX;","\t\tif (this._fixY)","\t\t\tthis.y += (this.height - size.height) * this._fixY;","\t\tthis.width = size.width;","\t\tthis.height = size.height;","\t\tthis._fixW = 1;","\t\tthis._fixH = 1;","\t},","","\tgetLeft: function() {","\t\treturn this.x;","\t},","","\tsetLeft: function(left) {","\t\tif (!this._fixW)","\t\t\tthis.width -= left - this.x;","\t\tthis.x = left;","\t\tthis._fixX = 0;","\t},","","\tgetTop: function() {","\t\treturn this.y;","\t},","","\tsetTop: function(top) {","\t\tif (!this._fixH)","\t\t\tthis.height -= top - this.y;","\t\tthis.y = top;","\t\tthis._fixY = 0;","\t},","","\tgetRight: function() {","\t\treturn this.x + this.width;","\t},","","\tsetRight: function(right) {","\t\tif (this._fixX !== undefined && this._fixX !== 1)","\t\t\tthis._fixW = 0;","\t\tif (this._fixW)","\t\t\tthis.x = right - this.width;","\t\telse","\t\t\tthis.width = right - this.x;","\t\tthis._fixX = 1;","\t},","","\tgetBottom: function() {","\t\treturn this.y + this.height;","\t},","","\tsetBottom: function(bottom) {","\t\tif (this._fixY !== undefined && this._fixY !== 1)","\t\t\tthis._fixH = 0;","\t\tif (this._fixH)","\t\t\tthis.y = bottom - this.height;","\t\telse","\t\t\tthis.height = bottom - this.y;","\t\tthis._fixY = 1;","\t},","","\tgetCenterX: function() {","\t\treturn this.x + this.width * 0.5;","\t},","","\tsetCenterX: function(x) {","\t\tthis.x = x - this.width * 0.5;","\t\tthis._fixX = 0.5;","\t},","","\tgetCenterY: function() {","\t\treturn this.y + this.height * 0.5;","\t},","","\tsetCenterY: function(y) {","\t\tthis.y = y - this.height * 0.5;","\t\tthis._fixY = 0.5;","\t},","","\tgetCenter: function(_dontLink) {","\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\treturn new ctor(this.getCenterX(), this.getCenterY(), this, 'setCenter');","\t},","","\tsetCenter: function() {","\t\tvar point = Point.read(arguments);","\t\tthis.setCenterX(point.x);","\t\tthis.setCenterY(point.y);","\t\treturn this;","\t},","","\tgetArea: function() {","\t\treturn this.width * this.height;","\t},","","\tisEmpty: function() {","\t\treturn this.width === 0 || this.height === 0;","\t},","","\tcontains: function(arg) {","\t\treturn arg && arg.width !== undefined","\t\t\t\t|| (Array.isArray(arg) ? arg : arguments).length == 4","\t\t\t\t? this._containsRectangle(Rectangle.read(arguments))","\t\t\t\t: this._containsPoint(Point.read(arguments));","\t},","","\t_containsPoint: function(point) {","\t\tvar x = point.x,","\t\t\ty = point.y;","\t\treturn x >= this.x && y >= this.y","\t\t\t\t&& x <= this.x + this.width","\t\t\t\t&& y <= this.y + this.height;","\t},","","\t_containsRectangle: function(rect) {","\t\tvar x = rect.x,","\t\t\ty = rect.y;","\t\treturn x >= this.x && y >= this.y","\t\t\t\t&& x + rect.width <= this.x + this.width","\t\t\t\t&& y + rect.height <= this.y + this.height;","\t},","","\tintersects: function() {","\t\tvar rect = Rectangle.read(arguments);","\t\treturn rect.x + rect.width > this.x","\t\t\t\t&& rect.y + rect.height > this.y","\t\t\t\t&& rect.x < this.x + this.width","\t\t\t\t&& rect.y < this.y + this.height;","\t},","","\ttouches: function() {","\t\tvar rect = Rectangle.read(arguments);","\t\treturn rect.x + rect.width >= this.x","\t\t\t\t&& rect.y + rect.height >= this.y","\t\t\t\t&& rect.x <= this.x + this.width","\t\t\t\t&& rect.y <= this.y + this.height;","\t},","","\tintersect: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tx1 = Math.max(this.x, rect.x),","\t\t\ty1 = Math.max(this.y, rect.y),","\t\t\tx2 = Math.min(this.x + this.width, rect.x + rect.width),","\t\t\ty2 = Math.min(this.y + this.height, rect.y + rect.height);","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\tunite: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tx1 = Math.min(this.x, rect.x),","\t\t\ty1 = Math.min(this.y, rect.y),","\t\t\tx2 = Math.max(this.x + this.width, rect.x + rect.width),","\t\t\ty2 = Math.max(this.y + this.height, rect.y + rect.height);","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\tinclude: function() {","\t\tvar point = Point.read(arguments);","\t\tvar x1 = Math.min(this.x, point.x),","\t\t\ty1 = Math.min(this.y, point.y),","\t\t\tx2 = Math.max(this.x + this.width, point.x),","\t\t\ty2 = Math.max(this.y + this.height, point.y);","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\texpand: function() {","\t\tvar amount = Size.read(arguments),","\t\t\thor = amount.width,","\t\t\tver = amount.height;","\t\treturn new Rectangle(this.x - hor / 2, this.y - ver / 2,","\t\t\t\tthis.width + hor, this.height + ver);","\t},","","\tscale: function(hor, ver) {","\t\treturn this.expand(this.width * hor - this.width,","\t\t\t\tthis.height * (ver === undefined ? hor : ver) - this.height);","\t}","}, Base.each([","\t\t['Top', 'Left'], ['Top', 'Right'],","\t\t['Bottom', 'Left'], ['Bottom', 'Right'],","\t\t['Left', 'Center'], ['Top', 'Center'],","\t\t['Right', 'Center'], ['Bottom', 'Center']","\t],","\tfunction(parts, index) {","\t\tvar part = parts.join('');","\t\tvar xFirst = /^[RL]/.test(part);","\t\tif (index >= 4)","\t\t\tparts[1] += xFirst ? 'Y' : 'X';","\t\tvar x = parts[xFirst ? 0 : 1],","\t\t\ty = parts[xFirst ? 1 : 0],","\t\t\tgetX = 'get' + x,","\t\t\tgetY = 'get' + y,","\t\t\tsetX = 'set' + x,","\t\t\tsetY = 'set' + y,","\t\t\tget = 'get' + part,","\t\t\tset = 'set' + part;","\t\tthis[get] = function(_dontLink) {","\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\t\treturn new ctor(this[getX](), this[getY](), this, set);","\t\t};","\t\tthis[set] = function() {","\t\t\tvar point = Point.read(arguments);","\t\t\tthis[setX](point.x);","\t\t\tthis[setY](point.y);","\t\t};","\t}, {","\t\tbeans: true","\t}","));","","var LinkedRectangle = Rectangle.extend({","\tinitialize: function Rectangle(x, y, width, height, owner, setter) {","\t\tthis.set(x, y, width, height, true);","\t\tthis._owner = owner;","\t\tthis._setter = setter;","\t},","","\tset: function(x, y, width, height, _dontNotify) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._width = width;","\t\tthis._height = height;","\t\tif (!_dontNotify)","\t\t\tthis._owner[this._setter](this);","\t\treturn this;","\t}","}, new function() {","\tvar proto = Rectangle.prototype;","","\treturn Base.each(['x', 'y', 'width', 'height'], function(key) {","\t\tvar part = Base.capitalize(key);","\t\tvar internal = '_' + key;","\t\tthis['get' + part] = function() {","\t\t\treturn this[internal];","\t\t};","","\t\tthis['set' + part] = function(value) {","\t\t\tthis[internal] = value;","\t\t\tif (!this._dontNotify)","\t\t\t\tthis._owner[this._setter](this);","\t\t};","\t}, Base.each(['Point', 'Size', 'Center',","\t\t\t'Left', 'Top', 'Right', 'Bottom', 'CenterX', 'CenterY',","\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',","\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'],","\t\tfunction(key) {","\t\t\tvar name = 'set' + key;","\t\t\tthis[name] = function() {","\t\t\t\tthis._dontNotify = true;","\t\t\t\tproto[name].apply(this, arguments);","\t\t\t\tthis._dontNotify = false;","\t\t\t\tthis._owner[this._setter](this);","\t\t\t};","\t\t}, {","\t\t\tisSelected: function() {","\t\t\t\treturn this._owner._boundsSelected;","\t\t\t},","","\t\t\tsetSelected: function(selected) {","\t\t\t\tvar owner = this._owner;","\t\t\t\tif (owner.setSelected) {","\t\t\t\t\towner._boundsSelected = selected;","\t\t\t\t\towner.setSelected(selected || owner._selectedSegmentState > 0);","\t\t\t\t}","\t\t\t}","\t\t})","\t);","});","","var Matrix = Base.extend({","\t_class: 'Matrix',","","\tinitialize: function Matrix(arg) {","\t\tvar count = arguments.length,","\t\t\tok = true;","\t\tif (count === 6) {","\t\t\tthis.set.apply(this, arguments);","\t\t} else if (count === 1) {","\t\t\tif (arg instanceof Matrix) {","\t\t\t\tthis.set(arg._a, arg._c, arg._b, arg._d, arg._tx, arg._ty);","\t\t\t} else if (Array.isArray(arg)) {","\t\t\t\tthis.set.apply(this, arg);","\t\t\t} else {","\t\t\t\tok = false;","\t\t\t}","\t\t} else if (count === 0) {","\t\t\tthis.reset();","\t\t} else {","\t\t\tok = false;","\t\t}","\t\tif (!ok)","\t\t\tthrow new Error('Unsupported matrix parameters');","\t},","","\tset: function(a, c, b, d, tx, ty, _dontNotify) {","\t\tthis._a = a;","\t\tthis._c = c;","\t\tthis._b = b;","\t\tthis._d = d;","\t\tthis._tx = tx;","\t\tthis._ty = ty;","\t\tif (!_dontNotify)","\t\t\tthis._changed();","\t\treturn this;","\t},","","\t_serialize: function(options) {","\t\treturn Base.serialize(this.getValues(), options);","\t},","","\t_changed: function() {","\t\tvar owner = this._owner;","\t\tif (owner) {","\t\t\tif (owner._applyMatrix) {","\t\t\t\towner.transform(null, true);","\t\t\t} else {","\t\t\t\towner._changed(9);","\t\t\t}","\t\t}","\t},","","\tclone: function() {","\t\treturn new Matrix(this._a, this._c, this._b, this._d,","\t\t\t\tthis._tx, this._ty);","\t},","","\tequals: function(mx) {","\t\treturn mx === this || mx && this._a === mx._a && this._b === mx._b","\t\t\t\t&& this._c === mx._c && this._d === mx._d","\t\t\t\t&& this._tx === mx._tx && this._ty === mx._ty","\t\t\t\t|| false;","\t},","","\ttoString: function() {","\t\tvar f = Formatter.instance;","\t\treturn '[[' + [f.number(this._a), f.number(this._b),","\t\t\t\t\tf.number(this._tx)].join(', ') + '], ['","\t\t\t\t+ [f.number(this._c), f.number(this._d),","\t\t\t\t\tf.number(this._ty)].join(', ') + ']]';","\t},","","\treset: function(_dontNotify) {","\t\tthis._a = this._d = 1;","\t\tthis._c = this._b = this._tx = this._ty = 0;","\t\tif (!_dontNotify)","\t\t\tthis._changed();","\t\treturn this;","\t},","","\tapply: function(recursively, _setApplyMatrix) {","\t\tvar owner = this._owner;","\t\tif (owner) {","\t\t\towner.transform(null, true, Base.pick(recursively, true),","\t\t\t\t\t_setApplyMatrix);","\t\t\treturn this.isIdentity();","\t\t}","\t\treturn false;","\t},","","\ttranslate: function() {","\t\tvar point = Point.read(arguments),","\t\t\tx = point.x,","\t\t\ty = point.y;","\t\tthis._tx += x * this._a + y * this._b;","\t\tthis._ty += x * this._c + y * this._d;","\t\tthis._changed();","\t\treturn this;","\t},","","\tscale: function() {","\t\tvar scale = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\tif (center)","\t\t\tthis.translate(center);","\t\tthis._a *= scale.x;","\t\tthis._c *= scale.x;","\t\tthis._b *= scale.y;","\t\tthis._d *= scale.y;","\t\tif (center)","\t\t\tthis.translate(center.negate());","\t\tthis._changed();","\t\treturn this;","\t},","","\trotate: function(angle ) {","\t\tangle *= Math.PI / 180;","\t\tvar center = Point.read(arguments, 1),","\t\t\tx = center.x,","\t\t\ty = center.y,","\t\t\tcos = Math.cos(angle),","\t\t\tsin = Math.sin(angle),","\t\t\ttx = x - x * cos + y * sin,","\t\t\tty = y - x * sin - y * cos,","\t\t\ta = this._a,","\t\t\tb = this._b,","\t\t\tc = this._c,","\t\t\td = this._d;","\t\tthis._a = cos * a + sin * b;","\t\tthis._b = -sin * a + cos * b;","\t\tthis._c = cos * c + sin * d;","\t\tthis._d = -sin * c + cos * d;","\t\tthis._tx += tx * a + ty * b;","\t\tthis._ty += tx * c + ty * d;","\t\tthis._changed();","\t\treturn this;","\t},","","\tshear: function() {","\t\tvar shear = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\tif (center)","\t\t\tthis.translate(center);","\t\tvar a = this._a,","\t\t\tc = this._c;","\t\tthis._a += shear.y * this._b;","\t\tthis._c += shear.y * this._d;","\t\tthis._b += shear.x * a;","\t\tthis._d += shear.x * c;","\t\tif (center)","\t\t\tthis.translate(center.negate());","\t\tthis._changed();","\t\treturn this;","\t},","","\tskew: function() {","\t\tvar skew = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true }),","\t\t\ttoRadians = Math.PI / 180,","\t\t\tshear = new Point(Math.tan(skew.x * toRadians),","\t\t\t\tMath.tan(skew.y * toRadians));","\t\treturn this.shear(shear, center);","\t},","","\tconcatenate: function(mx) {","\t\tvar a1 = this._a,","\t\t\tb1 = this._b,","\t\t\tc1 = this._c,","\t\t\td1 = this._d,","\t\t\ta2 = mx._a,","\t\t\tb2 = mx._b,","\t\t\tc2 = mx._c,","\t\t\td2 = mx._d,","\t\t\ttx2 = mx._tx,","\t\t\tty2 = mx._ty;","\t\tthis._a = a2 * a1 + c2 * b1;","\t\tthis._b = b2 * a1 + d2 * b1;","\t\tthis._c = a2 * c1 + c2 * d1;","\t\tthis._d = b2 * c1 + d2 * d1;","\t\tthis._tx += tx2 * a1 + ty2 * b1;","\t\tthis._ty += tx2 * c1 + ty2 * d1;","\t\tthis._changed();","\t\treturn this;","\t},","","\tpreConcatenate: function(mx) {","\t\tvar a1 = this._a,","\t\t\tb1 = this._b,","\t\t\tc1 = this._c,","\t\t\td1 = this._d,","\t\t\ttx1 = this._tx,","\t\t\tty1 = this._ty,","\t\t\ta2 = mx._a,","\t\t\tb2 = mx._b,","\t\t\tc2 = mx._c,","\t\t\td2 = mx._d,","\t\t\ttx2 = mx._tx,","\t\t\tty2 = mx._ty;","\t\tthis._a = a2 * a1 + b2 * c1;","\t\tthis._b = a2 * b1 + b2 * d1;","\t\tthis._c = c2 * a1 + d2 * c1;","\t\tthis._d = c2 * b1 + d2 * d1;","\t\tthis._tx = a2 * tx1 + b2 * ty1 + tx2;","\t\tthis._ty = c2 * tx1 + d2 * ty1 + ty2;","\t\tthis._changed();","\t\treturn this;","\t},","","\tchain: function(mx) {","\t\tvar a1 = this._a,","\t\t\tb1 = this._b,","\t\t\tc1 = this._c,","\t\t\td1 = this._d,","\t\t\ttx1 = this._tx,","\t\t\tty1 = this._ty,","\t\t\ta2 = mx._a,","\t\t\tb2 = mx._b,","\t\t\tc2 = mx._c,","\t\t\td2 = mx._d,","\t\t\ttx2 = mx._tx,","\t\t\tty2 = mx._ty;","\t\treturn new Matrix(","\t\t\t\ta2 * a1 + c2 * b1,","\t\t\t\ta2 * c1 + c2 * d1,","\t\t\t\tb2 * a1 + d2 * b1,","\t\t\t\tb2 * c1 + d2 * d1,","\t\t\t\ttx1 + tx2 * a1 + ty2 * b1,","\t\t\t\tty1 + tx2 * c1 + ty2 * d1);","\t},","","\tisIdentity: function() {","\t\treturn this._a === 1 && this._c === 0 && this._b === 0 && this._d === 1","\t\t\t\t&& this._tx === 0 && this._ty === 0;","\t},","","\torNullIfIdentity: function() {","\t\treturn this.isIdentity() ? null : this;","\t},","","\tisInvertible: function() {","\t\treturn !!this._getDeterminant();","\t},","","\tisSingular: function() {","\t\treturn !this._getDeterminant();","\t},","","\ttransform: function( src, dst, count) {","\t\treturn arguments.length < 3","\t\t\t? this._transformPoint(Point.read(arguments))","\t\t\t: this._transformCoordinates(src, dst, count);","\t},","","\t_transformPoint: function(point, dest, _dontNotify) {","\t\tvar x = point.x,","\t\t\ty = point.y;","\t\tif (!dest)","\t\t\tdest = new Point();","\t\treturn dest.set(","\t\t\tx * this._a + y * this._b + this._tx,","\t\t\tx * this._c + y * this._d + this._ty,","\t\t\t_dontNotify","\t\t);","\t},","","\t_transformCoordinates: function(src, dst, count) {","\t\tvar i = 0,","\t\t\tj = 0,","\t\t\tmax = 2 * count;","\t\twhile (i < max) {","\t\t\tvar x = src[i++],","\t\t\t\ty = src[i++];","\t\t\tdst[j++] = x * this._a + y * this._b + this._tx;","\t\t\tdst[j++] = x * this._c + y * this._d + this._ty;","\t\t}","\t\treturn dst;","\t},","","\t_transformCorners: function(rect) {","\t\tvar x1 = rect.x,","\t\t\ty1 = rect.y,","\t\t\tx2 = x1 + rect.width,","\t\t\ty2 = y1 + rect.height,","\t\t\tcoords = [ x1, y1, x2, y1, x2, y2, x1, y2 ];","\t\treturn this._transformCoordinates(coords, coords, 4);","\t},","","\t_transformBounds: function(bounds, dest, _dontNotify) {","\t\tvar coords = this._transformCorners(bounds),","\t\t\tmin = coords.slice(0, 2),","\t\t\tmax = coords.slice();","\t\tfor (var i = 2; i < 8; i++) {","\t\t\tvar val = coords[i],","\t\t\t\tj = i & 1;","\t\t\tif (val < min[j])","\t\t\t\tmin[j] = val;","\t\t\telse if (val > max[j])","\t\t\t\tmax[j] = val;","\t\t}","\t\tif (!dest)","\t\t\tdest = new Rectangle();","\t\treturn dest.set(min[0], min[1], max[0] - min[0], max[1] - min[1],","\t\t\t\t_dontNotify);","\t},","","\tinverseTransform: function() {","\t\treturn this._inverseTransform(Point.read(arguments));","\t},","","\t_getDeterminant: function() {","\t\tvar det = this._a * this._d - this._b * this._c;","\t\treturn isFinite(det) && !Numerical.isZero(det)","\t\t\t\t&& isFinite(this._tx) && isFinite(this._ty)","\t\t\t\t? det : null;","\t},","","\t_inverseTransform: function(point, dest, _dontNotify) {","\t\tvar det = this._getDeterminant();","\t\tif (!det)","\t\t\treturn null;","\t\tvar x = point.x - this._tx,","\t\t\ty = point.y - this._ty;","\t\tif (!dest)","\t\t\tdest = new Point();","\t\treturn dest.set(","\t\t\t(x * this._d - y * this._b) / det,","\t\t\t(y * this._a - x * this._c) / det,","\t\t\t_dontNotify","\t\t);","\t},","","\tdecompose: function() {","\t\tvar a = this._a, b = this._b, c = this._c, d = this._d;","\t\tif (Numerical.isZero(a * d - b * c))","\t\t\treturn null;","","\t\tvar scaleX = Math.sqrt(a * a + b * b);","\t\ta /= scaleX;","\t\tb /= scaleX;","","\t\tvar shear = a * c + b * d;","\t\tc -= a * shear;","\t\td -= b * shear;","","\t\tvar scaleY = Math.sqrt(c * c + d * d);","\t\tc /= scaleY;","\t\td /= scaleY;","\t\tshear /= scaleY;","","\t\tif (a * d < b * c) {","\t\t\ta = -a;","\t\t\tb = -b;","\t\t\tshear = -shear;","\t\t\tscaleX = -scaleX;","\t\t}","","\t\treturn {","\t\t\tscaling: new Point(scaleX, scaleY),","\t\t\trotation: -Math.atan2(b, a) * 180 / Math.PI,","\t\t\tshearing: shear","\t\t};","\t},","","\tgetValues: function() {","\t\treturn [ this._a, this._c, this._b, this._d, this._tx, this._ty ];","\t},","","\tgetTranslation: function() {","\t\treturn new Point(this._tx, this._ty);","\t},","","\tgetScaling: function() {","\t\treturn (this.decompose() || {}).scaling;","\t},","","\tgetRotation: function() {","\t\treturn (this.decompose() || {}).rotation;","\t},","","\tinverted: function() {","\t\tvar det = this._getDeterminant();","\t\treturn det && new Matrix(","\t\t\t\tthis._d / det,","\t\t\t\t-this._c / det,","\t\t\t\t-this._b / det,","\t\t\t\tthis._a / det,","\t\t\t\t(this._b * this._ty - this._d * this._tx) / det,","\t\t\t\t(this._c * this._tx - this._a * this._ty) / det);","\t},","","\tshiftless: function() {","\t\treturn new Matrix(this._a, this._c, this._b, this._d, 0, 0);","\t},","","\tapplyToContext: function(ctx) {","\t\tctx.transform(this._a, this._c, this._b, this._d, this._tx, this._ty);","\t}","}, Base.each(['a', 'c', 'b', 'd', 'tx', 'ty'], function(name) {","\tvar part = Base.capitalize(name),","\t\tprop = '_' + name;","\tthis['get' + part] = function() {","\t\treturn this[prop];","\t};","\tthis['set' + part] = function(value) {","\t\tthis[prop] = value;","\t\tthis._changed();","\t};","}, {}));","","var Line = Base.extend({","\t_class: 'Line',","","\tinitialize: function Line(arg0, arg1, arg2, arg3, arg4) {","\t\tvar asVector = false;","\t\tif (arguments.length >= 4) {","\t\t\tthis._px = arg0;","\t\t\tthis._py = arg1;","\t\t\tthis._vx = arg2;","\t\t\tthis._vy = arg3;","\t\t\tasVector = arg4;","\t\t} else {","\t\t\tthis._px = arg0.x;","\t\t\tthis._py = arg0.y;","\t\t\tthis._vx = arg1.x;","\t\t\tthis._vy = arg1.y;","\t\t\tasVector = arg2;","\t\t}","\t\tif (!asVector) {","\t\t\tthis._vx -= this._px;","\t\t\tthis._vy -= this._py;","\t\t}","\t},","","\tgetPoint: function() {","\t\treturn new Point(this._px, this._py);","\t},","","\tgetVector: function() {","\t\treturn new Point(this._vx, this._vy);","\t},","","\tgetLength: function() {","\t\treturn this.getVector().getLength();","\t},","","\tintersect: function(line, isInfinite) {","\t\treturn Line.intersect(","\t\t\t\tthis._px, this._py, this._vx, this._vy,","\t\t\t\tline._px, line._py, line._vx, line._vy,","\t\t\t\ttrue, isInfinite);","\t},","","\tgetSide: function(point) {","\t\treturn Line.getSide(","\t\t\t\tthis._px, this._py, this._vx, this._vy,","\t\t\t\tpoint.x, point.y, true);","\t},","","\tgetDistance: function(point) {","\t\treturn Math.abs(Line.getSignedDistance(","\t\t\t\tthis._px, this._py, this._vx, this._vy,","\t\t\t\tpoint.x, point.y, true));","\t},","","\tstatics: {","\t\tintersect: function(apx, apy, avx, avy, bpx, bpy, bvx, bvy, asVector,","\t\t\t\tisInfinite) {","\t\t\tif (!asVector) {","\t\t\t\tavx -= apx;","\t\t\t\tavy -= apy;","\t\t\t\tbvx -= bpx;","\t\t\t\tbvy -= bpy;","\t\t\t}","\t\t\tvar cross = avx * bvy - avy * bvx;","\t\t\tif (!Numerical.isZero(cross)) {","\t\t\t\tvar dx = apx - bpx,","\t\t\t\t\tdy = apy - bpy,","\t\t\t\t\tta = (bvx * dy - bvy * dx) / cross,","\t\t\t\t\ttb = (avx * dy - avy * dx) / cross;","\t\t\t\tif (isInfinite || 0 <= ta && ta <= 1 && 0 <= tb && tb <= 1)","\t\t\t\t\treturn new Point(","\t\t\t\t\t\t\t\tapx + ta * avx,","\t\t\t\t\t\t\t\tapy + ta * avy);","\t\t\t}","\t\t},","","\t\tgetSide: function(px, py, vx, vy, x, y, asVector) {","\t\t\tif (!asVector) {","\t\t\t\tvx -= px;","\t\t\t\tvy -= py;","\t\t\t}","\t\t\tvar v2x = x - px,","\t\t\t\tv2y = y - py,","\t\t\t\tccw = v2x * vy - v2y * vx;","\t\t\tif (ccw === 0) {","\t\t\t\tccw = v2x * vx + v2y * vy;","\t\t\t\tif (ccw > 0) {","\t\t\t\t\tv2x -= vx;","\t\t\t\t\tv2y -= vy;","\t\t\t\t\tccw = v2x * vx + v2y * vy;","\t\t\t\t\tif (ccw < 0)","\t\t\t\t\t\tccw = 0;","\t\t\t\t}","\t\t\t}","\t\t\treturn ccw < 0 ? -1 : ccw > 0 ? 1 : 0;","\t\t},","","\t\tgetSignedDistance: function(px, py, vx, vy, x, y, asVector) {","\t\t\tif (!asVector) {","\t\t\t\tvx -= px;","\t\t\t\tvy -= py;","\t\t\t}","\t\t\treturn Numerical.isZero(vx)","\t\t\t\t\t? vy >= 0 ? px - x : x - px","\t\t\t\t\t: Numerical.isZero(vy)","\t\t\t\t\t\t? vx >= 0 ? y - py : py - y","\t\t\t\t\t\t: (vx * (y - py) - vy * (x - px)) / Math.sqrt(vx * vx + vy * vy);","\t\t}","\t}","});","","var Project = PaperScopeItem.extend({","\t_class: 'Project',","\t_list: 'projects',","\t_reference: 'project',","","\tinitialize: function Project(element) {","\t\tPaperScopeItem.call(this, true);","\t\tthis.layers = [];","\t\tthis._activeLayer = null;","\t\tthis.symbols = [];","\t\tthis._currentStyle = new Style(null, null, this);","\t\tthis._view = View.create(this,","\t\t\t\telement || CanvasProvider.getCanvas(1, 1));","\t\tthis._selectedItems = {};","\t\tthis._selectedItemCount = 0;","\t\tthis._updateVersion = 0;","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn Base.serialize(this.layers, options, true, dictionary);","\t},","","\tclear: function() {","\t\tfor (var i = this.layers.length - 1; i >= 0; i--)","\t\t\tthis.layers[i].remove();","\t\tthis.symbols = [];","\t},","","\tisEmpty: function() {","\t\treturn this.layers.length === 0;","\t},","","\tremove: function remove() {","\t\tif (!remove.base.call(this))","\t\t\treturn false;","\t\tif (this._view)","\t\t\tthis._view.remove();","\t\treturn true;","\t},","","\tgetView: function() {","\t\treturn this._view;","\t},","","\tgetCurrentStyle: function() {","\t\treturn this._currentStyle;","\t},","","\tsetCurrentStyle: function(style) {","\t\tthis._currentStyle.initialize(style);","\t},","","\tgetIndex: function() {","\t\treturn this._index;","\t},","","\tgetOptions: function() {","\t\treturn this._scope.settings;","\t},","","\tgetActiveLayer: function() {","\t\treturn this._activeLayer || new Layer({ project: this });","\t},","","\tgetSelectedItems: function() {","\t\tvar items = [];","\t\tfor (var id in this._selectedItems) {","\t\t\tvar item = this._selectedItems[id];","\t\t\tif (item.isInserted())","\t\t\t\titems.push(item);","\t\t}","\t\treturn items;","\t},","","\tinsertChild: function(index, item, _preserve) {","\t\tif (item instanceof Layer) {","\t\t\titem._remove(false, true);","\t\t\tBase.splice(this.layers, [item], index, 0);","\t\t\titem._setProject(this, true);","\t\t\tif (this._changes)","\t\t\t\titem._changed(5);","\t\t\tif (!this._activeLayer)","\t\t\t\tthis._activeLayer = item;","\t\t} else if (item instanceof Item) {","\t\t\t(this._activeLayer","\t\t\t\t|| this.insertChild(index, new Layer(Item.NO_INSERT)))","\t\t\t\t\t.insertChild(index, item, _preserve);","\t\t} else {","\t\t\titem = null;","\t\t}","\t\treturn item;","\t},","","\taddChild: function(item, _preserve) {","\t\treturn this.insertChild(undefined, item, _preserve);","\t},","","\t_updateSelection: function(item) {","\t\tvar id = item._id,","\t\t\tselectedItems = this._selectedItems;","\t\tif (item._selected) {","\t\t\tif (selectedItems[id] !== item) {","\t\t\t\tthis._selectedItemCount++;","\t\t\t\tselectedItems[id] = item;","\t\t\t}","\t\t} else if (selectedItems[id] === item) {","\t\t\tthis._selectedItemCount--;","\t\t\tdelete selectedItems[id];","\t\t}","\t},","","\tselectAll: function() {","\t\tvar layers = this.layers;","\t\tfor (var i = 0, l = layers.length; i < l; i++)","\t\t\tlayers[i].setFullySelected(true);","\t},","","\tdeselectAll: function() {","\t\tvar selectedItems = this._selectedItems;","\t\tfor (var i in selectedItems)","\t\t\tselectedItems[i].setFullySelected(false);","\t},","","\thitTest: function() {","\t\tvar point = Point.read(arguments),","\t\t\toptions = HitResult.getOptions(Base.read(arguments));","\t\tfor (var i = this.layers.length - 1; i >= 0; i--) {","\t\t\tvar res = this.layers[i]._hitTest(point, options);","\t\t\tif (res) return res;","\t\t}","\t\treturn null;","\t},","","\tgetItems: function(match) {","\t\treturn Item._getItems(this.layers, match);","\t},","","\tgetItem: function(match) {","\t\treturn Item._getItems(this.layers, match, null, null, true)[0] || null;","\t},","","\timportJSON: function(json) {","\t\tthis.activate();","\t\tvar layer = this._activeLayer;","\t\treturn Base.importJSON(json, layer && layer.isEmpty() && layer);","\t},","","\tdraw: function(ctx, matrix, pixelRatio) {","\t\tthis._updateVersion++;","\t\tctx.save();","\t\tmatrix.applyToContext(ctx);","\t\tvar param = new Base({","\t\t\toffset: new Point(0, 0),","\t\t\tpixelRatio: pixelRatio,","\t\t\tviewMatrix: matrix.isIdentity() ? null : matrix,","\t\t\tmatrices: [new Matrix()],","\t\t\tupdateMatrix: true","\t\t});","\t\tfor (var i = 0, layers = this.layers, l = layers.length; i < l; i++)","\t\t\tlayers[i].draw(ctx, param);","\t\tctx.restore();","","\t\tif (this._selectedItemCount > 0) {","\t\t\tctx.save();","\t\t\tctx.strokeWidth = 1;","\t\t\tvar items = this._selectedItems,","\t\t\t\tsize = this._scope.settings.handleSize,","\t\t\t\tversion = this._updateVersion;","\t\t\tfor (var id in items)","\t\t\t\titems[id]._drawSelection(ctx, matrix, size, items, version);","\t\t\tctx.restore();","\t\t}","\t}","});","","var Symbol = Base.extend({","\t_class: 'Symbol',","","\tinitialize: function Symbol(item, dontCenter) {","\t\tthis._id = Symbol._id = (Symbol._id || 0) + 1;","\t\tthis.project = paper.project;","\t\tthis.project.symbols.push(this);","\t\tif (item)","\t\t\tthis.setDefinition(item, dontCenter);","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn dictionary.add(this, function() {","\t\t\treturn Base.serialize([this._class, this._definition],","\t\t\t\t\toptions, false, dictionary);","\t\t});","\t},","","\t_changed: function(flags) {","\t\tif (flags & 8) {","\t\t\tItem._clearBoundsCache(this);","\t\t}","\t\tif (flags & 1) {","\t\t\tthis.project._needsUpdate = true;","\t\t}","\t},","","\tgetDefinition: function() {","\t\treturn this._definition;","\t},","","\tsetDefinition: function(item, _dontCenter) {","\t\tif (item._parentSymbol)","\t\t\titem = item.clone();","\t\tif (this._definition)","\t\t\tthis._definition._parentSymbol = null;","\t\tthis._definition = item;","\t\titem.remove();","\t\titem.setSelected(false);","\t\tif (!_dontCenter)","\t\t\titem.setPosition(new Point());","\t\titem._parentSymbol = this;","\t\tthis._changed(9);","\t},","","\tplace: function(position) {","\t\treturn new PlacedSymbol(this, position);","\t},","","\tclone: function() {","\t\treturn new Symbol(this._definition.clone(false));","\t},","","\tequals: function(symbol) {","\t\treturn symbol === this","\t\t\t\t|| symbol && this.definition.equals(symbol.definition)","\t\t\t\t|| false;","\t}","});","","var Item = Base.extend(Emitter, {","\tstatics: {","\t\textend: function extend(src) {","\t\t\tif (src._serializeFields)","\t\t\t\tsrc._serializeFields = new Base(","\t\t\t\t\t\tthis.prototype._serializeFields, src._serializeFields);","\t\t\treturn extend.base.apply(this, arguments);","\t\t},","","\t\tNO_INSERT: { insert: false }","\t},","","\t_class: 'Item',","\t_applyMatrix: true,","\t_canApplyMatrix: true,","\t_boundsSelected: false,","\t_selectChildren: false,","\t_serializeFields: {","\t\tname: null,","\t\tapplyMatrix: null,","\t\tmatrix: new Matrix(),","\t\tpivot: null,","\t\tlocked: false,","\t\tvisible: true,","\t\tblendMode: 'normal',","\t\topacity: 1,","\t\tguide: false,","\t\tselected: false,","\t\tclipMask: false,","\t\tdata: {}","\t},","","\tinitialize: function Item() {","\t},","","\t_initialize: function(props, point) {","\t\tvar hasProps = props && Base.isPlainObject(props),","\t\t\tinternal = hasProps && props.internal === true,","\t\t\tmatrix = this._matrix = new Matrix(),","\t\t\tproject = hasProps && props.project || paper.project;","\t\tif (!internal)","\t\t\tthis._id = Item._id = (Item._id || 0) + 1;","\t\tthis._applyMatrix = this._canApplyMatrix && paper.settings.applyMatrix;","\t\tif (point)","\t\t\tmatrix.translate(point);","\t\tmatrix._owner = this;","\t\tthis._style = new Style(project._currentStyle, this, project);","\t\tif (!this._project) {","\t\t\tif (internal || hasProps && props.insert === false) {","\t\t\t\tthis._setProject(project);","\t\t\t} else if (hasProps && props.parent) {","\t\t\t\tthis.setParent(props.parent);","\t\t\t} else {","\t\t\t\t(project._activeLayer || new Layer()).addChild(this);","\t\t\t}","\t\t}","\t\tif (hasProps && props !== Item.NO_INSERT)","\t\t\tthis._set(props, { insert: true, parent: true }, true);","\t\treturn hasProps;","\t},","","\t_events: new function() {","","\t\tvar mouseFlags = {","\t\t\tmousedown: {","\t\t\t\tmousedown: 1,","\t\t\t\tmousedrag: 1,","\t\t\t\tclick: 1,","\t\t\t\tdoubleclick: 1","\t\t\t},","\t\t\tmouseup: {","\t\t\t\tmouseup: 1,","\t\t\t\tmousedrag: 1,","\t\t\t\tclick: 1,","\t\t\t\tdoubleclick: 1","\t\t\t},","\t\t\tmousemove: {","\t\t\t\tmousedrag: 1,","\t\t\t\tmousemove: 1,","\t\t\t\tmouseenter: 1,","\t\t\t\tmouseleave: 1","\t\t\t}","\t\t};","","\t\tvar mouseEvent = {","\t\t\tinstall: function(type) {","\t\t\t\tvar counters = this.getView()._eventCounters;","\t\t\t\tif (counters) {","\t\t\t\t\tfor (var key in mouseFlags) {","\t\t\t\t\t\tcounters[key] = (counters[key] || 0)","\t\t\t\t\t\t\t\t+ (mouseFlags[key][type] || 0);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t},","\t\t\tuninstall: function(type) {","\t\t\t\tvar counters = this.getView()._eventCounters;","\t\t\t\tif (counters) {","\t\t\t\t\tfor (var key in mouseFlags)","\t\t\t\t\t\tcounters[key] -= mouseFlags[key][type] || 0;","\t\t\t\t}","\t\t\t}","\t\t};","","\t\treturn Base.each(['onMouseDown', 'onMouseUp', 'onMouseDrag', 'onClick',","\t\t\t'onDoubleClick', 'onMouseMove', 'onMouseEnter', 'onMouseLeave'],","\t\t\tfunction(name) {","\t\t\t\tthis[name] = mouseEvent;","\t\t\t}, {","\t\t\t\tonFrame: {","\t\t\t\t\tinstall: function() {","\t\t\t\t\t\tthis._animateItem(true);","\t\t\t\t\t},","\t\t\t\t\tuninstall: function() {","\t\t\t\t\t\tthis._animateItem(false);","\t\t\t\t\t}","\t\t\t\t},","","\t\t\t\tonLoad: {}","\t\t\t}","\t\t);","\t},","","\t_animateItem: function(animate) {","\t\tthis.getView()._animateItem(this, animate);","\t},","","\t_serialize: function(options, dictionary) {","\t\tvar props = {},","\t\t\tthat = this;","","\t\tfunction serialize(fields) {","\t\t\tfor (var key in fields) {","\t\t\t\tvar value = that[key];","\t\t\t\tif (!Base.equals(value, key === 'leading'","\t\t\t\t\t\t? fields.fontSize * 1.2 : fields[key])) {","\t\t\t\t\tprops[key] = Base.serialize(value, options,","\t\t\t\t\t\t\tkey !== 'data', dictionary);","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tserialize(this._serializeFields);","\t\tif (!(this instanceof Group))","\t\t\tserialize(this._style._defaults);","\t\treturn [ this._class, props ];","\t},","","\t_changed: function(flags) {","\t\tvar symbol = this._parentSymbol,","\t\t\tcacheParent = this._parent || symbol,","\t\t\tproject = this._project;","\t\tif (flags & 8) {","\t\t\tthis._bounds = this._position = this._decomposed =","\t\t\t\t\tthis._globalMatrix = this._currentPath = undefined;","\t\t}","\t\tif (cacheParent","\t\t\t\t&& (flags & 40)) {","\t\t\tItem._clearBoundsCache(cacheParent);","\t\t}","\t\tif (flags & 2) {","\t\t\tItem._clearBoundsCache(this);","\t\t}","\t\tif (project) {","\t\t\tif (flags & 1) {","\t\t\t\tproject._needsUpdate = true;","\t\t\t}","\t\t\tif (project._changes) {","\t\t\t\tvar entry = project._changesById[this._id];","\t\t\t\tif (entry) {","\t\t\t\t\tentry.flags |= flags;","\t\t\t\t} else {","\t\t\t\t\tentry = { item: this, flags: flags };","\t\t\t\t\tproject._changesById[this._id] = entry;","\t\t\t\t\tproject._changes.push(entry);","\t\t\t\t}","\t\t\t}","\t\t}","\t\tif (symbol)","\t\t\tsymbol._changed(flags);","\t},","","\tset: function(props) {","\t\tif (props)","\t\t\tthis._set(props);","\t\treturn this;","\t},","","\tgetId: function() {","\t\treturn this._id;","\t},","","\tgetName: function() {","\t\treturn this._name;","\t},","","\tsetName: function(name, unique) {","","\t\tif (this._name)","\t\t\tthis._removeNamed();","\t\tif (name === (+name) + '')","\t\t\tthrow new Error(","\t\t\t\t\t'Names consisting only of numbers are not supported.');","\t\tvar parent = this._parent;","\t\tif (name && parent) {","\t\t\tvar children = parent._children,","\t\t\t\tnamedChildren = parent._namedChildren,","\t\t\t\torig = name,","\t\t\t\ti = 1;","\t\t\twhile (unique && children[name])","\t\t\t\tname = orig + ' ' + (i++);","\t\t\t(namedChildren[name] = namedChildren[name] || []).push(this);","\t\t\tchildren[name] = this;","\t\t}","\t\tthis._name = name || undefined;","\t\tthis._changed(128);","\t},","","\tgetStyle: function() {","\t\treturn this._style;","\t},","","\tsetStyle: function(style) {","\t\tthis.getStyle().set(style);","\t}","}, Base.each(['locked', 'visible', 'blendMode', 'opacity', 'guide'],","\tfunction(name) {","\t\tvar part = Base.capitalize(name),","\t\t\tname = '_' + name;","\t\tthis['get' + part] = function() {","\t\t\treturn this[name];","\t\t};","\t\tthis['set' + part] = function(value) {","\t\t\tif (value != this[name]) {","\t\t\t\tthis[name] = value;","\t\t\t\tthis._changed(name === '_locked'","\t\t\t\t\t\t? 128 : 129);","\t\t\t}","\t\t};","\t},","{}), {","\tbeans: true,","","\t_locked: false,","","\t_visible: true,","","\t_blendMode: 'normal',","","\t_opacity: 1,","","\t_guide: false,","","\tisSelected: function() {","\t\tif (this._selectChildren) {","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tif (children[i].isSelected())","\t\t\t\t\treturn true;","\t\t}","\t\treturn this._selected;","\t},","","\tsetSelected: function(selected, noChildren) {","\t\tif (!noChildren && this._selectChildren) {","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].setSelected(selected);","\t\t}","\t\tif ((selected = !!selected) ^ this._selected) {","\t\t\tthis._selected = selected;","\t\t\tthis._project._updateSelection(this);","\t\t\tthis._changed(129);","\t\t}","\t},","","\t_selected: false,","","\tisFullySelected: function() {","\t\tvar children = this._children;","\t\tif (children && this._selected) {","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tif (!children[i].isFullySelected())","\t\t\t\t\treturn false;","\t\t\treturn true;","\t\t}","\t\treturn this._selected;","\t},","","\tsetFullySelected: function(selected) {","\t\tvar children = this._children;","\t\tif (children) {","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].setFullySelected(selected);","\t\t}","\t\tthis.setSelected(selected, true);","\t},","","\tisClipMask: function() {","\t\treturn this._clipMask;","\t},","","\tsetClipMask: function(clipMask) {","\t\tif (this._clipMask != (clipMask = !!clipMask)) {","\t\t\tthis._clipMask = clipMask;","\t\t\tif (clipMask) {","\t\t\t\tthis.setFillColor(null);","\t\t\t\tthis.setStrokeColor(null);","\t\t\t}","\t\t\tthis._changed(129);","\t\t\tif (this._parent)","\t\t\t\tthis._parent._changed(1024);","\t\t}","\t},","","\t_clipMask: false,","","\tgetData: function() {","\t\tif (!this._data)","\t\t\tthis._data = {};","\t\treturn this._data;","\t},","","\tsetData: function(data) {","\t\tthis._data = data;","\t},","","\tgetPosition: function(_dontLink) {","\t\tvar position = this._position,","\t\t\tctor = _dontLink ? Point : LinkedPoint;","\t\tif (!position) {","\t\t\tvar pivot = this._pivot;","\t\t\tposition = this._position = pivot","\t\t\t\t\t? this._matrix._transformPoint(pivot)","\t\t\t\t\t: this.getBounds().getCenter(true);","\t\t}","\t\treturn new ctor(position.x, position.y, this, 'setPosition');","\t},","","\tsetPosition: function() {","\t\tthis.translate(Point.read(arguments).subtract(this.getPosition(true)));","\t},","","\tgetPivot: function(_dontLink) {","\t\tvar pivot = this._pivot;","\t\tif (pivot) {","\t\t\tvar ctor = _dontLink ? Point : LinkedPoint;","\t\t\tpivot = new ctor(pivot.x, pivot.y, this, 'setPivot');","\t\t}","\t\treturn pivot;","\t},","","\tsetPivot: function() {","\t\tthis._pivot = Point.read(arguments);","\t\tthis._position = undefined;","\t},","","\t_pivot: null,","","\tgetRegistration: '#getPivot',","\tsetRegistration: '#setPivot'","}, Base.each(['bounds', 'strokeBounds', 'handleBounds', 'roughBounds',","\t\t'internalBounds', 'internalRoughBounds'],","\tfunction(key) {","\t\tvar getter = 'get' + Base.capitalize(key),","\t\t\tmatch = key.match(/^internal(.*)$/),","\t\t\tinternalGetter = match ? 'get' + match[1] : null;","\t\tthis[getter] = function(_matrix) {","\t\t\tvar boundsGetter = this._boundsGetter,","\t\t\t\tname = !internalGetter && (typeof boundsGetter === 'string'","\t\t\t\t\t\t? boundsGetter : boundsGetter && boundsGetter[getter])","\t\t\t\t\t\t|| getter,","\t\t\t\tbounds = this._getCachedBounds(name, _matrix, this,","\t\t\t\t\t\tinternalGetter);","\t\t\treturn key === 'bounds'","\t\t\t\t\t? new LinkedRectangle(bounds.x, bounds.y, bounds.width,","\t\t\t\t\t\t\tbounds.height, this, 'setBounds')","\t\t\t\t\t: bounds;","\t\t};","\t},","{","\tbeans: true,","","\t_getBounds: function(getter, matrix, cacheItem) {","\t\tvar children = this._children;","\t\tif (!children || children.length == 0)","\t\t\treturn new Rectangle();","\t\tvar x1 = Infinity,","\t\t\tx2 = -x1,","\t\t\ty1 = x1,","\t\t\ty2 = x2;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i];","\t\t\tif (child._visible && !child.isEmpty()) {","\t\t\t\tvar rect = child._getCachedBounds(getter,","\t\t\t\t\t\tmatrix && matrix.chain(child._matrix), cacheItem);","\t\t\t\tx1 = Math.min(rect.x, x1);","\t\t\t\ty1 = Math.min(rect.y, y1);","\t\t\t\tx2 = Math.max(rect.x + rect.width, x2);","\t\t\t\ty2 = Math.max(rect.y + rect.height, y2);","\t\t\t}","\t\t}","\t\treturn isFinite(x1)","\t\t\t\t? new Rectangle(x1, y1, x2 - x1, y2 - y1)","\t\t\t\t: new Rectangle();","\t},","","\tsetBounds: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tbounds = this.getBounds(),","\t\t\tmatrix = new Matrix(),","\t\t\tcenter = rect.getCenter();","\t\tmatrix.translate(center);","\t\tif (rect.width != bounds.width || rect.height != bounds.height) {","\t\t\tmatrix.scale(","\t\t\t\t\tbounds.width != 0 ? rect.width / bounds.width : 1,","\t\t\t\t\tbounds.height != 0 ? rect.height / bounds.height : 1);","\t\t}","\t\tcenter = bounds.getCenter();","\t\tmatrix.translate(-center.x, -center.y);","\t\tthis.transform(matrix);","\t},","","\t_getCachedBounds: function(getter, matrix, cacheItem, internalGetter) {","\t\tmatrix = matrix && matrix.orNullIfIdentity();","\t\tvar _matrix = internalGetter ? null : this._matrix.orNullIfIdentity(),","\t\t\tcache = (!matrix || matrix.equals(_matrix)) && getter;","\t\tvar cacheParent = this._parent || this._parentSymbol;","\t\tif (cacheParent) {","\t\t\tvar id = cacheItem._id,","\t\t\t\tref = cacheParent._boundsCache = cacheParent._boundsCache || {","\t\t\t\t\tids: {},","\t\t\t\t\tlist: []","\t\t\t\t};","\t\t\tif (!ref.ids[id]) {","\t\t\t\tref.list.push(cacheItem);","\t\t\t\tref.ids[id] = cacheItem;","\t\t\t}","\t\t}","\t\tif (cache && this._bounds && this._bounds[cache])","\t\t\treturn this._bounds[cache].clone();","\t\tvar bounds = this._getBounds(internalGetter || getter,","\t\t\t\tmatrix || _matrix, cacheItem);","\t\tif (cache) {","\t\t\tif (!this._bounds)","\t\t\t\tthis._bounds = {};","\t\t\tvar cached = this._bounds[cache] = bounds.clone();","\t\t\tcached._internal = !!internalGetter;","\t\t}","\t\treturn bounds;","\t},","","\tstatics: {","\t\t_clearBoundsCache: function(item) {","\t\t\tvar cache = item._boundsCache;","\t\t\tif (cache) {","\t\t\t\titem._bounds = item._position = item._boundsCache = undefined;","\t\t\t\tfor (var i = 0, list = cache.list, l = list.length; i < l; i++) {","\t\t\t\t\tvar other = list[i];","\t\t\t\t\tif (other !== item) {","\t\t\t\t\t\tother._bounds = other._position = undefined;","\t\t\t\t\t\tif (other._boundsCache)","\t\t\t\t\t\t\tItem._clearBoundsCache(other);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t}","","}), {","\tbeans: true,","","\t_decompose: function() {","\t\treturn this._decomposed = this._matrix.decompose();","\t},","","\tgetRotation: function() {","\t\tvar decomposed = this._decomposed || this._decompose();","\t\treturn decomposed && decomposed.rotation;","\t},","","\tsetRotation: function(rotation) {","\t\tvar current = this.getRotation();","\t\tif (current != null && rotation != null) {","\t\t\tvar decomposed = this._decomposed;","\t\t\tthis.rotate(rotation - current);","\t\t\tdecomposed.rotation = rotation;","\t\t\tthis._decomposed = decomposed;","\t\t}","\t},","","\tgetScaling: function(_dontLink) {","\t\tvar decomposed = this._decomposed || this._decompose(),","\t\t\tscaling = decomposed && decomposed.scaling,","\t\t\tctor = _dontLink ? Point : LinkedPoint;","\t\treturn scaling && new ctor(scaling.x, scaling.y, this, 'setScaling');","\t},","","\tsetScaling: function() {","\t\tvar current = this.getScaling();","\t\tif (current) {","\t\t\tvar scaling = Point.read(arguments, 0, { clone: true }),","\t\t\t\tdecomposed = this._decomposed;","\t\t\tthis.scale(scaling.x / current.x, scaling.y / current.y);","\t\t\tdecomposed.scaling = scaling;","\t\t\tthis._decomposed = decomposed;","\t\t}","\t},","","\tgetMatrix: function() {","\t\treturn this._matrix;","\t},","","\tsetMatrix: function(matrix) {","\t\tthis._matrix.initialize(matrix);","\t\tif (this._applyMatrix) {","\t\t\tthis.transform(null, true);","\t\t} else {","\t\t\tthis._changed(9);","\t\t}","\t},","","\tgetGlobalMatrix: function(_dontClone) {","\t\tvar matrix = this._globalMatrix,","\t\t\tupdateVersion = this._project._updateVersion;","\t\tif (matrix && matrix._updateVersion !== updateVersion)","\t\t\tmatrix = null;","\t\tif (!matrix) {","\t\t\tmatrix = this._globalMatrix = this._matrix.clone();","\t\t\tvar parent = this._parent;","\t\t\tif (parent)","\t\t\t\tmatrix.preConcatenate(parent.getGlobalMatrix(true));","\t\t\tmatrix._updateVersion = updateVersion;","\t\t}","\t\treturn _dontClone ? matrix : matrix.clone();","\t},","","\tgetApplyMatrix: function() {","\t\treturn this._applyMatrix;","\t},","","\tsetApplyMatrix: function(apply) {","\t\tif (this._applyMatrix = this._canApplyMatrix && !!apply)","\t\t\tthis.transform(null, true);","\t},","","\tgetTransformContent: '#getApplyMatrix',","\tsetTransformContent: '#setApplyMatrix',","}, {","\tgetProject: function() {","\t\treturn this._project;","\t},","","\t_setProject: function(project, installEvents) {","\t\tif (this._project !== project) {","\t\t\tif (this._project)","\t\t\t\tthis._installEvents(false);","\t\t\tthis._project = project;","\t\t\tvar children = this._children;","\t\t\tfor (var i = 0, l = children && children.length; i < l; i++)","\t\t\t\tchildren[i]._setProject(project);","\t\t\tinstallEvents = true;","\t\t}","\t\tif (installEvents)","\t\t\tthis._installEvents(true);","\t},","","\tgetView: function() {","\t\treturn this._project.getView();","\t},","","\t_installEvents: function _installEvents(install) {","\t\t_installEvents.base.call(this, install);","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children && children.length; i < l; i++)","\t\t\tchildren[i]._installEvents(install);","\t},","","\tgetLayer: function() {","\t\tvar parent = this;","\t\twhile (parent = parent._parent) {","\t\t\tif (parent instanceof Layer)","\t\t\t\treturn parent;","\t\t}","\t\treturn null;","\t},","","\tgetParent: function() {","\t\treturn this._parent;","\t},","","\tsetParent: function(item) {","\t\treturn item.addChild(this);","\t},","","\tgetChildren: function() {","\t\treturn this._children;","\t},","","\tsetChildren: function(items) {","\t\tthis.removeChildren();","\t\tthis.addChildren(items);","\t},","","\tgetFirstChild: function() {","\t\treturn this._children && this._children[0] || null;","\t},","","\tgetLastChild: function() {","\t\treturn this._children && this._children[this._children.length - 1]","\t\t\t\t|| null;","\t},","","\tgetNextSibling: function() {","\t\treturn this._parent && this._parent._children[this._index + 1] || null;","\t},","","\tgetPreviousSibling: function() {","\t\treturn this._parent && this._parent._children[this._index - 1] || null;","\t},","","\tgetIndex: function() {","\t\treturn this._index;","\t},","","\tequals: function(item) {","\t\treturn item === this || item && this._class === item._class","\t\t\t\t&& this._style.equals(item._style)","\t\t\t\t&& this._matrix.equals(item._matrix)","\t\t\t\t&& this._locked === item._locked","\t\t\t\t&& this._visible === item._visible","\t\t\t\t&& this._blendMode === item._blendMode","\t\t\t\t&& this._opacity === item._opacity","\t\t\t\t&& this._clipMask === item._clipMask","\t\t\t\t&& this._guide === item._guide","\t\t\t\t&& this._equals(item)","\t\t\t\t|| false;","\t},","","\t_equals: function(item) {","\t\treturn Base.equals(this._children, item._children);","\t},","","\tclone: function(insert) {","\t\treturn this._clone(new this.constructor(Item.NO_INSERT), insert);","\t},","","\t_clone: function(copy, insert) {","\t\tcopy.setStyle(this._style);","\t\tif (this._children) {","\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)","\t\t\t\tcopy.addChild(this._children[i].clone(false), true);","\t\t}","\t\tif (insert || insert === undefined)","\t\t\tcopy.insertAbove(this);","\t\tvar keys = ['_locked', '_visible', '_blendMode', '_opacity',","\t\t\t\t'_clipMask', '_guide', '_applyMatrix'];","\t\tfor (var i = 0, l = keys.length; i < l; i++) {","\t\t\tvar key = keys[i];","\t\t\tif (this.hasOwnProperty(key))","\t\t\t\tcopy[key] = this[key];","\t\t}","\t\tcopy._matrix.initialize(this._matrix);","\t\tcopy._data = this._data ? Base.clone(this._data) : null;","\t\tcopy.setSelected(this._selected);","\t\tif (this._name)","\t\t\tcopy.setName(this._name, true);","\t\treturn copy;","\t},","","\tcopyTo: function(itemOrProject) {","\t\treturn itemOrProject.addChild(this.clone(false));","\t},","","\trasterize: function(resolution) {","\t\tvar bounds = this.getStrokeBounds(),","\t\t\tscale = (resolution || this.getView().getResolution()) / 72,","\t\t\ttopLeft = bounds.getTopLeft().floor(),","\t\t\tbottomRight = bounds.getBottomRight().ceil(),","\t\t\tsize = new Size(bottomRight.subtract(topLeft)),","\t\t\tcanvas = CanvasProvider.getCanvas(size.multiply(scale)),","\t\t\tctx = canvas.getContext('2d'),","\t\t\tmatrix = new Matrix().scale(scale).translate(topLeft.negate());","\t\tctx.save();","\t\tmatrix.applyToContext(ctx);","\t\tthis.draw(ctx, new Base({ matrices: [matrix] }));","\t\tctx.restore();","\t\tvar raster = new Raster(Item.NO_INSERT);","\t\traster.setCanvas(canvas);","\t\traster.transform(new Matrix().translate(topLeft.add(size.divide(2)))","\t\t\t\t.scale(1 / scale));","\t\traster.insertAbove(this);","\t\treturn raster;","\t},","","\tcontains: function() {","\t\treturn !!this._contains(","\t\t\t\tthis._matrix._inverseTransform(Point.read(arguments)));","\t},","","\t_contains: function(point) {","\t\tif (this._children) {","\t\t\tfor (var i = this._children.length - 1; i >= 0; i--) {","\t\t\t\tif (this._children[i].contains(point))","\t\t\t\t\treturn true;","\t\t\t}","\t\t\treturn false;","\t\t}","\t\treturn point.isInside(this.getInternalBounds());","\t},","","\tisInside: function() {","\t\treturn Rectangle.read(arguments).contains(this.getBounds());","\t},","","\t_asPathItem: function() {","\t\treturn new Path.Rectangle({","\t\t\trectangle: this.getInternalBounds(),","\t\t\tmatrix: this._matrix,","\t\t\tinsert: false,","\t\t});","\t},","","\tintersects: function(item, _matrix) {","\t\tif (!(item instanceof Item))","\t\t\treturn false;","\t\treturn this._asPathItem().getIntersections(item._asPathItem(),","\t\t\t\t_matrix || item._matrix).length > 0;","\t},","","\thitTest: function() {","\t\treturn this._hitTest(","\t\t\t\tPoint.read(arguments),","\t\t\t\tHitResult.getOptions(Base.read(arguments)));","\t},","","\t_hitTest: function(point, options) {","\t\tif (this._locked || !this._visible || this._guide && !options.guides","\t\t\t\t|| this.isEmpty())","\t\t\treturn null;","","\t\tvar matrix = this._matrix,","\t\t\tparentTotalMatrix = options._totalMatrix,","\t\t\tview = this.getView(),","\t\t\ttotalMatrix = options._totalMatrix = parentTotalMatrix","\t\t\t\t\t? parentTotalMatrix.chain(matrix)","\t\t\t\t\t: this.getGlobalMatrix().preConcatenate(view._matrix),","\t\t\ttolerancePadding = options._tolerancePadding = new Size(","\t\t\t\t\t\tPath._getPenPadding(1, totalMatrix.inverted())","\t\t\t\t\t).multiply(","\t\t\t\t\t\tMath.max(options.tolerance, 0.000001)","\t\t\t\t\t);","\t\tpoint = matrix._inverseTransform(point);","","\t\tif (!this._children && !this.getInternalRoughBounds()","\t\t\t\t.expand(tolerancePadding.multiply(2))._containsPoint(point))","\t\t\treturn null;","\t\tvar checkSelf = !(options.guides && !this._guide","\t\t\t\t|| options.selected && !this._selected","\t\t\t\t|| options.type && options.type !== Base.hyphenate(this._class)","\t\t\t\t|| options.class && !(this instanceof options.class)),","\t\t\tthat = this,","\t\t\tres;","","\t\tfunction checkBounds(type, part) {","\t\t\tvar pt = bounds['get' + part]();","\t\t\tif (point.subtract(pt).divide(tolerancePadding).length <= 1)","\t\t\t\treturn new HitResult(type, that,","\t\t\t\t\t\t{ name: Base.hyphenate(part), point: pt });","\t\t}","","\t\tif (checkSelf && (options.center || options.bounds) && this._parent) {","\t\t\tvar bounds = this.getInternalBounds();","\t\t\tif (options.center)","\t\t\t\tres = checkBounds('center', 'Center');","\t\t\tif (!res && options.bounds) {","\t\t\t\tvar points = [","\t\t\t\t\t'TopLeft', 'TopRight', 'BottomLeft', 'BottomRight',","\t\t\t\t\t'LeftCenter', 'TopCenter', 'RightCenter', 'BottomCenter'","\t\t\t\t];","\t\t\t\tfor (var i = 0; i < 8 && !res; i++)","\t\t\t\t\tres = checkBounds('bounds', points[i]);","\t\t\t}","\t\t}","","\t\tvar children = !res && this._children;","\t\tif (children) {","\t\t\tvar opts = this._getChildHitTestOptions(options);","\t\t\tfor (var i = children.length - 1; i >= 0 && !res; i--)","\t\t\t\tres = children[i]._hitTest(point, opts);","\t\t}","\t\tif (!res && checkSelf)","\t\t\tres = this._hitTestSelf(point, options);","\t\tif (res && res.point)","\t\t\tres.point = matrix.transform(res.point);","\t\toptions._totalMatrix = parentTotalMatrix;","\t\treturn res;","\t},","","\t_getChildHitTestOptions: function(options) {","\t\treturn options;","\t},","","\t_hitTestSelf: function(point, options) {","\t\tif (options.fill && this.hasFill() && this._contains(point))","\t\t\treturn new HitResult('fill', this);","\t},","","\tmatches: function(name, compare) {","\t\tfunction matchObject(obj1, obj2) {","\t\t\tfor (var i in obj1) {","\t\t\t\tif (obj1.hasOwnProperty(i)) {","\t\t\t\t\tvar val1 = obj1[i],","\t\t\t\t\t\tval2 = obj2[i];","\t\t\t\t\tif (Base.isPlainObject(val1) && Base.isPlainObject(val2)) {","\t\t\t\t\t\tif (!matchObject(val1, val2))","\t\t\t\t\t\t\treturn false;","\t\t\t\t\t} else if (!Base.equals(val1, val2)) {","\t\t\t\t\t\treturn false;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\treturn true;","\t\t}","\t\tif (typeof name === 'object') {","\t\t\tfor (var key in name) {","\t\t\t\tif (name.hasOwnProperty(key) && !this.matches(key, name[key]))","\t\t\t\t\treturn false;","\t\t\t}","\t\t} else {","\t\t\tvar value = /^(empty|editable)$/.test(name)","\t\t\t\t\t? this['is' + Base.capitalize(name)]()","\t\t\t\t\t: name === 'type'","\t\t\t\t\t\t? Base.hyphenate(this._class)","\t\t\t\t\t\t: this[name];","\t\t\tif (/^(constructor|class)$/.test(name)) {","\t\t\t\tif (!(this instanceof compare))","\t\t\t\t\treturn false;","\t\t\t} else if (compare instanceof RegExp) {","\t\t\t\tif (!compare.test(value))","\t\t\t\t\treturn false;","\t\t\t} else if (typeof compare === 'function') {","\t\t\t\tif (!compare(value))","\t\t\t\t\treturn false;","\t\t\t} else if (Base.isPlainObject(compare)) {","\t\t\t\tif (!matchObject(compare, value))","\t\t\t\t\treturn false;","\t\t\t} else if (!Base.equals(value, compare)) {","\t\t\t\treturn false;","\t\t\t}","\t\t}","\t\treturn true;","\t},","","\tgetItems: function(match) {","\t\treturn Item._getItems(this._children, match, this._matrix);","\t},","","\tgetItem: function(match) {","\t\treturn Item._getItems(this._children, match, this._matrix, null, true)","\t\t\t\t[0] || null;","\t},","","\tstatics: {","\t\t_getItems: function _getItems(children, match, matrix, param,","\t\t\t\tfirstOnly) {","\t\t\tif (!param) {","\t\t\t\tvar overlapping = match.overlapping,","\t\t\t\t\tinside = match.inside,","\t\t\t\t\tbounds = overlapping || inside,","\t\t\t\t\trect =\tbounds && Rectangle.read([bounds]);","\t\t\t\tparam = {","\t\t\t\t\titems: [],","\t\t\t\t\tinside: rect,","\t\t\t\t\toverlapping: overlapping && new Path.Rectangle({","\t\t\t\t\t\trectangle: rect,","\t\t\t\t\t\tinsert: false","\t\t\t\t\t})","\t\t\t\t};","\t\t\t\tif (bounds)","\t\t\t\t\tmatch = Base.set({}, match,","\t\t\t\t\t\t\t{ inside: true, overlapping: true });","\t\t\t}","\t\t\tvar items = param.items,","\t\t\t\tinside = param.inside,","\t\t\t\toverlapping = param.overlapping;","\t\t\tmatrix = inside && (matrix || new Matrix());","\t\t\tfor (var i = 0, l = children && children.length; i < l; i++) {","\t\t\t\tvar child = children[i],","\t\t\t\t\tchildMatrix = matrix && matrix.chain(child._matrix),","\t\t\t\t\tadd = true;","\t\t\t\tif (inside) {","\t\t\t\t\tvar bounds = child.getBounds(childMatrix);","\t\t\t\t\tif (!inside.intersects(bounds))","\t\t\t\t\t\tcontinue;","\t\t\t\t\tif (!(inside && inside.contains(bounds)) && !(overlapping","\t\t\t\t\t\t\t&& overlapping.intersects(child, childMatrix)))","\t\t\t\t\t\tadd = false;","\t\t\t\t}","\t\t\t\tif (add && child.matches(match)) {","\t\t\t\t\titems.push(child);","\t\t\t\t\tif (firstOnly)","\t\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t\t_getItems(child._children, match,","\t\t\t\t\t\tchildMatrix, param,","\t\t\t\t\t\tfirstOnly);","\t\t\t\tif (firstOnly && items.length > 0)","\t\t\t\t\tbreak;","\t\t\t}","\t\t\treturn items;","\t\t}","\t}","}, {","","\timportJSON: function(json) {","\t\tvar res = Base.importJSON(json, this);","\t\treturn res !== this","\t\t\t\t? this.addChild(res)","\t\t\t\t: res;","\t},","","\taddChild: function(item, _preserve) {","\t\treturn this.insertChild(undefined, item, _preserve);","\t},","","\tinsertChild: function(index, item, _preserve) {","\t\tvar res = item ? this.insertChildren(index, [item], _preserve) : null;","\t\treturn res && res[0];","\t},","","\taddChildren: function(items, _preserve) {","\t\treturn this.insertChildren(this._children.length, items, _preserve);","\t},","","\tinsertChildren: function(index, items, _preserve, _proto) {","\t\tvar children = this._children;","\t\tif (children && items && items.length > 0) {","\t\t\titems = Array.prototype.slice.apply(items);","\t\t\tfor (var i = items.length - 1; i >= 0; i--) {","\t\t\t\tvar item = items[i];","\t\t\t\tif (_proto && !(item instanceof _proto)) {","\t\t\t\t\titems.splice(i, 1);","\t\t\t\t} else {","\t\t\t\t\tvar shift = item._parent === this && item._index < index;","\t\t\t\t\tif (item._remove(false, true) && shift)","\t\t\t\t\t\tindex--;","\t\t\t\t}","\t\t\t}","\t\t\tBase.splice(children, items, index, 0);","\t\t\tvar project = this._project,","\t\t\t\tnotifySelf = project && project._changes;","\t\t\tfor (var i = 0, l = items.length; i < l; i++) {","\t\t\t\tvar item = items[i];","\t\t\t\titem._parent = this;","\t\t\t\titem._setProject(this._project, true);","\t\t\t\tif (item._name)","\t\t\t\t\titem.setName(item._name);","\t\t\t\tif (notifySelf)","\t\t\t\t\tthis._changed(5);","\t\t\t}","\t\t\tthis._changed(11);","\t\t} else {","\t\t\titems = null;","\t\t}","\t\treturn items;","\t},","","\t_insertSibling: function(index, item, _preserve) {","\t\treturn this._parent","\t\t\t\t? this._parent.insertChild(index, item, _preserve)","\t\t\t\t: null;","\t},","","\tinsertAbove: function(item, _preserve) {","\t\treturn item._insertSibling(item._index + 1, this, _preserve);","\t},","","\tinsertBelow: function(item, _preserve) {","\t\treturn item._insertSibling(item._index, this, _preserve);","\t},","","\tsendToBack: function() {","\t\treturn (this._parent || this instanceof Layer && this._project)","\t\t\t\t.insertChild(0, this);","\t},","","\tbringToFront: function() {","\t\treturn (this._parent || this instanceof Layer && this._project)","\t\t\t\t.addChild(this);","\t},","","\tappendTop: '#addChild',","","\tappendBottom: function(item) {","\t\treturn this.insertChild(0, item);","\t},","","\tmoveAbove: '#insertAbove',","","\tmoveBelow: '#insertBelow',","","\treduce: function() {","\t\tif (this._children && this._children.length === 1) {","\t\t\tvar child = this._children[0].reduce();","\t\t\tchild.insertAbove(this);","\t\t\tchild.setStyle(this._style);","\t\t\tthis.remove();","\t\t\treturn child;","\t\t}","\t\treturn this;","\t},","","\t_removeNamed: function() {","\t\tvar parent = this._parent;","\t\tif (parent) {","\t\t\tvar children = parent._children,","\t\t\t\tnamedChildren = parent._namedChildren,","\t\t\t\tname = this._name,","\t\t\t\tnamedArray = namedChildren[name],","\t\t\t\tindex = namedArray ? namedArray.indexOf(this) : -1;","\t\t\tif (index !== -1) {","\t\t\t\tif (children[name] == this)","\t\t\t\t\tdelete children[name];","\t\t\t\tnamedArray.splice(index, 1);","\t\t\t\tif (namedArray.length) {","\t\t\t\t\tchildren[name] = namedArray[namedArray.length - 1];","\t\t\t\t} else {","\t\t\t\t\tdelete namedChildren[name];","\t\t\t\t}","\t\t\t}","\t\t}","\t},","","\t_remove: function(notifySelf, notifyParent) {","\t\tvar parent = this._parent;","\t\tif (parent) {","\t\t\tif (this._name)","\t\t\t\tthis._removeNamed();","\t\t\tif (this._index != null)","\t\t\t\tBase.splice(parent._children, null, this._index, 1);","\t\t\tthis._installEvents(false);","\t\t\tif (notifySelf) {","\t\t\t\tvar project = this._project;","\t\t\t\tif (project && project._changes)","\t\t\t\t\tthis._changed(5);","\t\t\t}","\t\t\tif (notifyParent)","\t\t\t\tparent._changed(11);","\t\t\tthis._parent = null;","\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tremove: function() {","\t\treturn this._remove(true, true);","\t},","","\treplaceWith: function(item) {","\t\tvar ok = item && item.insertBelow(this);","\t\tif (ok)","\t\t\tthis.remove();","\t\treturn ok;","\t},","","\tremoveChildren: function(from, to) {","\t\tif (!this._children)","\t\t\treturn null;","\t\tfrom = from || 0;","\t\tto = Base.pick(to, this._children.length);","\t\tvar removed = Base.splice(this._children, null, from, to - from);","\t\tfor (var i = removed.length - 1; i >= 0; i--) {","\t\t\tremoved[i]._remove(true, false);","\t\t}","\t\tif (removed.length > 0)","\t\t\tthis._changed(11);","\t\treturn removed;","\t},","","\tclear: '#removeChildren',","","\treverseChildren: function() {","\t\tif (this._children) {","\t\t\tthis._children.reverse();","\t\t\tfor (var i = 0, l = this._children.length; i < l; i++)","\t\t\t\tthis._children[i]._index = i;","\t\t\tthis._changed(11);","\t\t}","\t},","","\tisEmpty: function() {","\t\treturn !this._children || this._children.length === 0;","\t},","","\tisEditable: function() {","\t\tvar item = this;","\t\twhile (item) {","\t\t\tif (!item._visible || item._locked)","\t\t\t\treturn false;","\t\t\titem = item._parent;","\t\t}","\t\treturn true;","\t},","","\thasFill: function() {","\t\treturn this.getStyle().hasFill();","\t},","","\thasStroke: function() {","\t\treturn this.getStyle().hasStroke();","\t},","","\thasShadow: function() {","\t\treturn this.getStyle().hasShadow();","\t},","","\t_getOrder: function(item) {","\t\tfunction getList(item) {","\t\t\tvar list = [];","\t\t\tdo {","\t\t\t\tlist.unshift(item);","\t\t\t} while (item = item._parent);","\t\t\treturn list;","\t\t}","\t\tvar list1 = getList(this),","\t\t\tlist2 = getList(item);","\t\tfor (var i = 0, l = Math.min(list1.length, list2.length); i < l; i++) {","\t\t\tif (list1[i] != list2[i]) {","\t\t\t\treturn list1[i]._index < list2[i]._index ? 1 : -1;","\t\t\t}","\t\t}","\t\treturn 0;","\t},","","\thasChildren: function() {","\t\treturn this._children && this._children.length > 0;","\t},","","\tisInserted: function() {","\t\treturn this._parent ? this._parent.isInserted() : false;","\t},","","\tisAbove: function(item) {","\t\treturn this._getOrder(item) === -1;","\t},","","\tisBelow: function(item) {","\t\treturn this._getOrder(item) === 1;","\t},","","\tisParent: function(item) {","\t\treturn this._parent === item;","\t},","","\tisChild: function(item) {","\t\treturn item && item._parent === this;","\t},","","\tisDescendant: function(item) {","\t\tvar parent = this;","\t\twhile (parent = parent._parent) {","\t\t\tif (parent == item)","\t\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tisAncestor: function(item) {","\t\treturn item ? item.isDescendant(this) : false;","\t},","","\tisGroupedWith: function(item) {","\t\tvar parent = this._parent;","\t\twhile (parent) {","\t\t\tif (parent._parent","\t\t\t\t&& /^(Group|Layer|CompoundPath)$/.test(parent._class)","\t\t\t\t&& item.isDescendant(parent))","\t\t\t\t\treturn true;","\t\t\tparent = parent._parent;","\t\t}","\t\treturn false;","\t},","","\ttranslate: function() {","\t\tvar mx = new Matrix();","\t\treturn this.transform(mx.translate.apply(mx, arguments));","\t},","","\trotate: function(angle ) {","\t\treturn this.transform(new Matrix().rotate(angle,","\t\t\t\tPoint.read(arguments, 1, { readNull: true })","\t\t\t\t\t|| this.getPosition(true)));","\t}","}, Base.each(['scale', 'shear', 'skew'], function(name) {","\tthis[name] = function() {","\t\tvar point = Point.read(arguments),","\t\t\tcenter = Point.read(arguments, 0, { readNull: true });","\t\treturn this.transform(new Matrix()[name](point,","\t\t\t\tcenter || this.getPosition(true)));","\t};","}, {","","}), {","\ttransform: function(matrix, _applyMatrix, _applyRecursively,","\t\t\t_setApplyMatrix) {","\t\tif (matrix && matrix.isIdentity())","\t\t\tmatrix = null;","\t\tvar _matrix = this._matrix,","\t\t\tapplyMatrix = (_applyMatrix || this._applyMatrix)","\t\t\t\t\t&& ((!_matrix.isIdentity() || matrix)","\t\t\t\t\t\t|| _applyMatrix && _applyRecursively && this._children);","\t\tif (!matrix && !applyMatrix)","\t\t\treturn this;","\t\tif (matrix)","\t\t\t_matrix.preConcatenate(matrix);","\t\tif (applyMatrix = applyMatrix && this._transformContent(_matrix,","\t\t\t\t\t_applyRecursively, _setApplyMatrix)) {","\t\t\tvar pivot = this._pivot,","\t\t\t\tstyle = this._style,","\t\t\t\tfillColor = style.getFillColor(true),","\t\t\t\tstrokeColor = style.getStrokeColor(true);","\t\t\tif (pivot)","\t\t\t\t_matrix._transformPoint(pivot, pivot, true);","\t\t\tif (fillColor)","\t\t\t\tfillColor.transform(_matrix);","\t\t\tif (strokeColor)","\t\t\t\tstrokeColor.transform(_matrix);","\t\t\t_matrix.reset(true);","\t\t\tif (_setApplyMatrix && this._canApplyMatrix)","\t\t\t\tthis._applyMatrix = true;","\t\t}","\t\tvar bounds = this._bounds,","\t\t\tposition = this._position;","\t\tthis._changed(9);","\t\tvar decomp = bounds && matrix && matrix.decompose();","\t\tif (decomp && !decomp.shearing && decomp.rotation % 90 === 0) {","\t\t\tfor (var key in bounds) {","\t\t\t\tvar rect = bounds[key];","\t\t\t\tif (applyMatrix || !rect._internal)","\t\t\t\t\tmatrix._transformBounds(rect, rect);","\t\t\t}","\t\t\tvar getter = this._boundsGetter,","\t\t\t\trect = bounds[getter && getter.getBounds || getter || 'getBounds'];","\t\t\tif (rect)","\t\t\t\tthis._position = rect.getCenter(true);","\t\t\tthis._bounds = bounds;","\t\t} else if (matrix && position) {","\t\t\tthis._position = matrix._transformPoint(position, position);","\t\t}","\t\treturn this;","\t},","","\t_transformContent: function(matrix, applyRecursively, setApplyMatrix) {","\t\tvar children = this._children;","\t\tif (children) {","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].transform(matrix, true, applyRecursively,","\t\t\t\t\t\tsetApplyMatrix);","\t\t\treturn true;","\t\t}","\t},","","\tglobalToLocal: function() {","\t\treturn this.getGlobalMatrix(true)._inverseTransform(","\t\t\t\tPoint.read(arguments));","\t},","","\tlocalToGlobal: function() {","\t\treturn this.getGlobalMatrix(true)._transformPoint(","\t\t\t\tPoint.read(arguments));","\t},","","\tparentToLocal: function() {","\t\treturn this._matrix._inverseTransform(Point.read(arguments));","\t},","","\tlocalToParent: function() {","\t\treturn this._matrix._transformPoint(Point.read(arguments));","\t},","","\tfitBounds: function(rectangle, fill) {","\t\trectangle = Rectangle.read(arguments);","\t\tvar bounds = this.getBounds(),","\t\t\titemRatio = bounds.height / bounds.width,","\t\t\trectRatio = rectangle.height / rectangle.width,","\t\t\tscale = (fill ? itemRatio > rectRatio : itemRatio < rectRatio)","\t\t\t\t\t? rectangle.width / bounds.width","\t\t\t\t\t: rectangle.height / bounds.height,","\t\t\tnewBounds = new Rectangle(new Point(),","\t\t\t\t\tnew Size(bounds.width * scale, bounds.height * scale));","\t\tnewBounds.setCenter(rectangle.getCenter());","\t\tthis.setBounds(newBounds);","\t},","","\t_setStyles: function(ctx) {","\t\tvar style = this._style,","\t\t\tfillColor = style.getFillColor(),","\t\t\tstrokeColor = style.getStrokeColor(),","\t\t\tshadowColor = style.getShadowColor();","\t\tif (fillColor)","\t\t\tctx.fillStyle = fillColor.toCanvasStyle(ctx);","\t\tif (strokeColor) {","\t\t\tvar strokeWidth = style.getStrokeWidth();","\t\t\tif (strokeWidth > 0) {","\t\t\t\tctx.strokeStyle = strokeColor.toCanvasStyle(ctx);","\t\t\t\tctx.lineWidth = strokeWidth;","\t\t\t\tvar strokeJoin = style.getStrokeJoin(),","\t\t\t\t\tstrokeCap = style.getStrokeCap(),","\t\t\t\t\tmiterLimit = style.getMiterLimit();","\t\t\t\tif (strokeJoin)","\t\t\t\t\tctx.lineJoin = strokeJoin;","\t\t\t\tif (strokeCap)","\t\t\t\t\tctx.lineCap = strokeCap;","\t\t\t\tif (miterLimit)","\t\t\t\t\tctx.miterLimit = miterLimit;","\t\t\t\tif (paper.support.nativeDash) {","\t\t\t\t\tvar dashArray = style.getDashArray(),","\t\t\t\t\t\tdashOffset = style.getDashOffset();","\t\t\t\t\tif (dashArray && dashArray.length) {","\t\t\t\t\t\tif ('setLineDash' in ctx) {","\t\t\t\t\t\t\tctx.setLineDash(dashArray);","\t\t\t\t\t\t\tctx.lineDashOffset = dashOffset;","\t\t\t\t\t\t} else {","\t\t\t\t\t\t\tctx.mozDash = dashArray;","\t\t\t\t\t\t\tctx.mozDashOffset = dashOffset;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\tif (shadowColor) {","\t\t\tvar shadowBlur = style.getShadowBlur();","\t\t\tif (shadowBlur > 0) {","\t\t\t\tctx.shadowColor = shadowColor.toCanvasStyle(ctx);","\t\t\t\tctx.shadowBlur = shadowBlur;","\t\t\t\tvar offset = this.getShadowOffset();","\t\t\t\tctx.shadowOffsetX = offset.x;","\t\t\t\tctx.shadowOffsetY = offset.y;","\t\t\t}","\t\t}","\t},","","\tdraw: function(ctx, param, parentStrokeMatrix) {","\t\tvar updateVersion = this._updateVersion = this._project._updateVersion;","\t\tif (!this._visible || this._opacity === 0)","\t\t\treturn;","\t\tvar matrices = param.matrices,","\t\t\tviewMatrix = param.viewMatrix,","\t\t\tmatrix = this._matrix,","\t\t\tglobalMatrix = matrices[matrices.length - 1].chain(matrix);","\t\tif (!globalMatrix.isInvertible())","\t\t\treturn;","","\t\tfunction getViewMatrix(matrix) {","\t\t\treturn viewMatrix ? viewMatrix.chain(matrix) : matrix;","\t\t}","","\t\tmatrices.push(globalMatrix);","\t\tif (param.updateMatrix) {","\t\t\tglobalMatrix._updateVersion = updateVersion;","\t\t\tthis._globalMatrix = globalMatrix;","\t\t}","","\t\tvar blendMode = this._blendMode,","\t\t\topacity = this._opacity,","\t\t\tnormalBlend = blendMode === 'normal',","\t\t\tnativeBlend = BlendMode.nativeModes[blendMode],","\t\t\tdirect = normalBlend && opacity === 1","\t\t\t\t\t|| param.dontStart","\t\t\t\t\t|| param.clip","\t\t\t\t\t|| (nativeBlend || normalBlend && opacity < 1)","\t\t\t\t\t\t&& this._canComposite(),","\t\t\tpixelRatio = param.pixelRatio,","\t\t\tmainCtx, itemOffset, prevOffset;","\t\tif (!direct) {","\t\t\tvar bounds = this.getStrokeBounds(getViewMatrix(globalMatrix));","\t\t\tif (!bounds.width || !bounds.height)","\t\t\t\treturn;","\t\t\tprevOffset = param.offset;","\t\t\titemOffset = param.offset = bounds.getTopLeft().floor();","\t\t\tmainCtx = ctx;","\t\t\tctx = CanvasProvider.getContext(bounds.getSize().ceil().add(1)","\t\t\t\t\t.multiply(pixelRatio));","\t\t\tif (pixelRatio !== 1)","\t\t\t\tctx.scale(pixelRatio, pixelRatio);","\t\t}","\t\tctx.save();","\t\tvar strokeMatrix = parentStrokeMatrix","\t\t\t\t? parentStrokeMatrix.chain(matrix)","\t\t\t\t: !this.getStrokeScaling(true) && getViewMatrix(globalMatrix),","\t\t\tclip = !direct && param.clipItem,","\t\t\ttransform = !strokeMatrix || clip;","\t\tif (direct) {","\t\t\tctx.globalAlpha = opacity;","\t\t\tif (nativeBlend)","\t\t\t\tctx.globalCompositeOperation = blendMode;","\t\t} else if (transform) {","\t\t\tctx.translate(-itemOffset.x, -itemOffset.y);","\t\t}","\t\tif (transform)","\t\t\t(direct ? matrix : getViewMatrix(globalMatrix)).applyToContext(ctx);","\t\tif (clip)","\t\t\tparam.clipItem.draw(ctx, param.extend({ clip: true }));","\t\tif (strokeMatrix) {","\t\t\tctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);","\t\t\tvar offset = param.offset;","\t\t\tif (offset)","\t\t\t\tctx.translate(-offset.x, -offset.y);","\t\t}","\t\tthis._draw(ctx, param, strokeMatrix);","\t\tctx.restore();","\t\tmatrices.pop();","\t\tif (param.clip && !param.dontFinish)","\t\t\tctx.clip();","\t\tif (!direct) {","\t\t\tBlendMode.process(blendMode, ctx, mainCtx, opacity,","\t\t\t\t\titemOffset.subtract(prevOffset).multiply(pixelRatio));","\t\t\tCanvasProvider.release(ctx);","\t\t\tparam.offset = prevOffset;","\t\t}","\t},","","\t_isUpdated: function(updateVersion) {","\t\tvar parent = this._parent;","\t\tif (parent instanceof CompoundPath)","\t\t\treturn parent._isUpdated(updateVersion);","\t\tvar updated = this._updateVersion === updateVersion;","\t\tif (!updated && parent && parent._visible","\t\t\t\t&& parent._isUpdated(updateVersion)) {","\t\t\tthis._updateVersion = updateVersion;","\t\t\tupdated = true;","\t\t}","\t\treturn updated;","\t},","","\t_drawSelection: function(ctx, matrix, size, selectedItems, updateVersion) {","\t\tif ((this._drawSelected || this._boundsSelected)","\t\t\t\t&& this._isUpdated(updateVersion)) {","\t\t\tvar color = this.getSelectedColor(true)","\t\t\t\t\t|| this.getLayer().getSelectedColor(true),","\t\t\t\tmx = matrix.chain(this.getGlobalMatrix(true));","\t\t\tctx.strokeStyle = ctx.fillStyle = color","\t\t\t\t\t? color.toCanvasStyle(ctx) : '#009dec';","\t\t\tif (this._drawSelected)","\t\t\t\tthis._drawSelected(ctx, mx, selectedItems);","\t\t\tif (this._boundsSelected) {","\t\t\t\tvar half = size / 2;","\t\t\t\t\tcoords = mx._transformCorners(this.getInternalBounds());","\t\t\t\tctx.beginPath();","\t\t\t\tfor (var i = 0; i < 8; i++)","\t\t\t\t\tctx[i === 0 ? 'moveTo' : 'lineTo'](coords[i], coords[++i]);","\t\t\t\tctx.closePath();","\t\t\t\tctx.stroke();","\t\t\t\tfor (var i = 0; i < 8; i++)","\t\t\t\t\tctx.fillRect(coords[i] - half, coords[++i] - half,","\t\t\t\t\t\t\tsize, size);","\t\t\t}","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn false;","\t}","}, Base.each(['down', 'drag', 'up', 'move'], function(name) {","\tthis['removeOn' + Base.capitalize(name)] = function() {","\t\tvar hash = {};","\t\thash[name] = true;","\t\treturn this.removeOn(hash);","\t};","}, {","","\tremoveOn: function(obj) {","\t\tfor (var name in obj) {","\t\t\tif (obj[name]) {","\t\t\t\tvar key = 'mouse' + name,","\t\t\t\t\tproject = this._project,","\t\t\t\t\tsets = project._removeSets = project._removeSets || {};","\t\t\t\tsets[key] = sets[key] || {};","\t\t\t\tsets[key][this._id] = this;","\t\t\t}","\t\t}","\t\treturn this;","\t}","}));","","var Group = Item.extend({","\t_class: 'Group',","\t_selectChildren: true,","\t_serializeFields: {","\t\tchildren: []","\t},","","\tinitialize: function Group(arg) {","\t\tthis._children = [];","\t\tthis._namedChildren = {};","\t\tif (!this._initialize(arg))","\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);","\t},","","\t_changed: function _changed(flags) {","\t\t_changed.base.call(this, flags);","\t\tif (flags & 1026) {","\t\t\tthis._clipItem = undefined;","\t\t}","\t},","","\t_getClipItem: function() {","\t\tvar clipItem = this._clipItem;","\t\tif (clipItem === undefined) {","\t\t\tclipItem = null;","\t\t\tfor (var i = 0, l = this._children.length; i < l; i++) {","\t\t\t\tvar child = this._children[i];","\t\t\t\tif (child._clipMask) {","\t\t\t\t\tclipItem = child;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\tthis._clipItem = clipItem;","\t\t}","\t\treturn clipItem;","\t},","","\tisClipped: function() {","\t\treturn !!this._getClipItem();","\t},","","\tsetClipped: function(clipped) {","\t\tvar child = this.getFirstChild();","\t\tif (child)","\t\t\tchild.setClipMask(clipped);","\t},","","\t_draw: function(ctx, param) {","\t\tvar clip = param.clip,","\t\t\tclipItem = !clip && this._getClipItem(),","\t\t\tdraw = true;","\t\tparam = param.extend({ clipItem: clipItem, clip: false });","\t\tif (clip) {","\t\t\tif (this._currentPath) {","\t\t\t\tctx.currentPath = this._currentPath;","\t\t\t\tdraw = false;","\t\t\t} else {","\t\t\t\tctx.beginPath();","\t\t\t\tparam.dontStart = param.dontFinish = true;","\t\t\t}","\t\t} else if (clipItem) {","\t\t\tclipItem.draw(ctx, param.extend({ clip: true }));","\t\t}","\t\tif (draw) {","\t\t\tfor (var i = 0, l = this._children.length; i < l; i++) {","\t\t\t\tvar item = this._children[i];","\t\t\t\tif (item !== clipItem)","\t\t\t\t\titem.draw(ctx, param);","\t\t\t}","\t\t}","\t\tif (clip) {","\t\t\tthis._currentPath = ctx.currentPath;","\t\t}","\t}","});","","var Layer = Group.extend({","\t_class: 'Layer',","","\tinitialize: function Layer(arg) {","\t\tvar props = Base.isPlainObject(arg)","\t\t\t\t? new Base(arg)","\t\t\t\t: { children: Array.isArray(arg) ? arg : arguments },","\t\t\tinsert = props.insert;","\t\tprops.insert = false;","\t\tGroup.call(this, props);","\t\tif (insert || insert === undefined) {","\t\t\tthis._project.addChild(this);","\t\t\tthis.activate();","\t\t}","\t},","","\t_remove: function _remove(notifySelf, notifyParent) {","\t\tif (this._parent)","\t\t\treturn _remove.base.call(this, notifySelf, notifyParent);","\t\tif (this._index != null) {","\t\t\tvar project = this._project;","\t\t\tif (project._activeLayer === this)","\t\t\t\tproject._activeLayer = this.getNextSibling()","\t\t\t\t\t\t|| this.getPreviousSibling();","\t\t\tBase.splice(project.layers, null, this._index, 1);","\t\t\tthis._installEvents(false);","\t\t\tif (notifySelf && project._changes)","\t\t\t\tthis._changed(5);","\t\t\tif (notifyParent) {","\t\t\t\tproject._needsUpdate = true;","\t\t\t}","\t\t\treturn true;","\t\t}","\t\treturn false;","\t},","","\tgetNextSibling: function getNextSibling() {","\t\treturn this._parent ? getNextSibling.base.call(this)","\t\t\t\t: this._project.layers[this._index + 1] || null;","\t},","","\tgetPreviousSibling: function getPreviousSibling() {","\t\treturn this._parent ? getPreviousSibling.base.call(this)","\t\t\t\t: this._project.layers[this._index - 1] || null;","\t},","","\tisInserted: function isInserted() {","\t\treturn this._parent ? isInserted.base.call(this) : this._index != null;","\t},","","\tactivate: function() {","\t\tthis._project._activeLayer = this;","\t},","","\t_insertSibling: function _insertSibling(index, item, _preserve) {","\t\treturn !this._parent","\t\t\t\t? this._project.insertChild(index, item, _preserve)","\t\t\t\t: _insertSibling.base.call(this, index, item, _preserve);","\t}","});","","var Shape = Item.extend({","\t_class: 'Shape',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_boundsSelected: true,","\t_serializeFields: {","\t\ttype: null,","\t\tsize: null,","\t\tradius: null","\t},","","\tinitialize: function Shape(props) {","\t\tthis._initialize(props);","\t},","","\t_equals: function(item) {","\t\treturn this._type === item._type","\t\t\t&& this._size.equals(item._size)","\t\t\t&& Base.equals(this._radius, item._radius);","\t},","","\tclone: function(insert) {","\t\tvar copy = new Shape(Item.NO_INSERT);","\t\tcopy.setType(this._type);","\t\tcopy.setSize(this._size);","\t\tcopy.setRadius(this._radius);","\t\treturn this._clone(copy, insert);","\t},","","\tgetType: function() {","\t\treturn this._type;","\t},","","\tsetType: function(type) {","\t\tthis._type = type;","\t},","","\tgetShape: '#getType',","\tsetShape: '#setType',","","\tgetSize: function() {","\t\tvar size = this._size;","\t\treturn new LinkedSize(size.width, size.height, this, 'setSize');","\t},","","\tsetSize: function() {","\t\tvar size = Size.read(arguments);","\t\tif (!this._size) {","\t\t\tthis._size = size.clone();","\t\t} else if (!this._size.equals(size)) {","\t\t\tvar type = this._type,","\t\t\t\twidth = size.width,","\t\t\t\theight = size.height;","\t\t\tif (type === 'rectangle') {","\t\t\t\tvar radius = Size.min(this._radius, size.divide(2));","\t\t\t\tthis._radius.set(radius.width, radius.height);","\t\t\t} else if (type === 'circle') {","\t\t\t\twidth = height = (width + height) / 2;","\t\t\t\tthis._radius = width / 2;","\t\t\t} else if (type === 'ellipse') {","\t\t\t\tthis._radius.set(width / 2, height / 2);","\t\t\t}","\t\t\tthis._size.set(width, height);","\t\t\tthis._changed(9);","\t\t}","\t},","","\tgetRadius: function() {","\t\tvar rad = this._radius;","\t\treturn this._type === 'circle'","\t\t\t\t? rad","\t\t\t\t: new LinkedSize(rad.width, rad.height, this, 'setRadius');","\t},","","\tsetRadius: function(radius) {","\t\tvar type = this._type;","\t\tif (type === 'circle') {","\t\t\tif (radius === this._radius)","\t\t\t\treturn;","\t\t\tvar size = radius * 2;","\t\t\tthis._radius = radius;","\t\t\tthis._size.set(size, size);","\t\t} else {","\t\t\tradius = Size.read(arguments);","\t\t\tif (!this._radius) {","\t\t\t\tthis._radius = radius.clone();","\t\t\t} else {","\t\t\t\tif (this._radius.equals(radius))","\t\t\t\t\treturn;","\t\t\t\tthis._radius.set(radius.width, radius.height);","\t\t\t\tif (type === 'rectangle') {","\t\t\t\t\tvar size = Size.max(this._size, radius.multiply(2));","\t\t\t\t\tthis._size.set(size.width, size.height);","\t\t\t\t} else if (type === 'ellipse') {","\t\t\t\t\tthis._size.set(radius.width * 2, radius.height * 2);","\t\t\t\t}","\t\t\t}","\t\t}","\t\tthis._changed(9);","\t},","","\tisEmpty: function() {","\t\treturn false;","\t},","","\ttoPath: function(insert) {","\t\tvar path = new Path[Base.capitalize(this._type)]({","\t\t\tcenter: new Point(),","\t\t\tsize: this._size,","\t\t\tradius: this._radius,","\t\t\tinsert: false","\t\t});","\t\tpath.setStyle(this._style);","\t\tpath.transform(this._matrix);","\t\tif (insert || insert === undefined)","\t\t\tpath.insertAbove(this);","\t\treturn path;","\t},","","\t_draw: function(ctx, param, strokeMatrix) {","\t\tvar style = this._style,","\t\t\thasFill = style.hasFill(),","\t\t\thasStroke = style.hasStroke(),","\t\t\tdontPaint = param.dontFinish || param.clip,","\t\t\tuntransformed = !strokeMatrix;","\t\tif (hasFill || hasStroke || dontPaint) {","\t\t\tvar type = this._type,","\t\t\t\tradius = this._radius,","\t\t\t\tisCircle = type === 'circle';","\t\t\tif (!param.dontStart)","\t\t\t\tctx.beginPath();","\t\t\tif (untransformed && isCircle) {","\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, true);","\t\t\t} else {","\t\t\t\tvar rx = isCircle ? radius : radius.width,","\t\t\t\t\try = isCircle ? radius : radius.height,","\t\t\t\t\tsize = this._size,","\t\t\t\t\twidth = size.width,","\t\t\t\t\theight = size.height;","\t\t\t\tif (untransformed && type === 'rect' && rx === 0 && ry === 0) {","\t\t\t\t\tctx.rect(-width / 2, -height / 2, width, height);","\t\t\t\t} else {","\t\t\t\t\tvar x = width / 2,","\t\t\t\t\t\ty = height / 2,","\t\t\t\t\t\tkappa = 1 - 0.5522847498307936,","\t\t\t\t\t\tcx = rx * kappa,","\t\t\t\t\t\tcy = ry * kappa,","\t\t\t\t\t\tc = [","\t\t\t\t\t\t\t-x, -y + ry,","\t\t\t\t\t\t\t-x, -y + cy,","\t\t\t\t\t\t\t-x + cx, -y,","\t\t\t\t\t\t\t-x + rx, -y,","\t\t\t\t\t\t\tx - rx, -y,","\t\t\t\t\t\t\tx - cx, -y,","\t\t\t\t\t\t\tx, -y + cy,","\t\t\t\t\t\t\tx, -y + ry,","\t\t\t\t\t\t\tx, y - ry,","\t\t\t\t\t\t\tx, y - cy,","\t\t\t\t\t\t\tx - cx, y,","\t\t\t\t\t\t\tx - rx, y,","\t\t\t\t\t\t\t-x + rx, y,","\t\t\t\t\t\t\t-x + cx, y,","\t\t\t\t\t\t\t-x, y - cy,","\t\t\t\t\t\t\t-x, y - ry","\t\t\t\t\t\t];","\t\t\t\t\tif (strokeMatrix)","\t\t\t\t\t\tstrokeMatrix.transform(c, c, 32);","\t\t\t\t\tctx.moveTo(c[0], c[1]);","\t\t\t\t\tctx.bezierCurveTo(c[2], c[3], c[4], c[5], c[6], c[7]);","\t\t\t\t\tif (x !== rx)","\t\t\t\t\t\tctx.lineTo(c[8], c[9]);","\t\t\t\t\tctx.bezierCurveTo(c[10], c[11], c[12], c[13], c[14], c[15]);","\t\t\t\t\tif (y !== ry)","\t\t\t\t\t\tctx.lineTo(c[16], c[17]);","\t\t\t\t\tctx.bezierCurveTo(c[18], c[19], c[20], c[21], c[22], c[23]);","\t\t\t\t\tif (x !== rx)","\t\t\t\t\t\tctx.lineTo(c[24], c[25]);","\t\t\t\t\tctx.bezierCurveTo(c[26], c[27], c[28], c[29], c[30], c[31]);","\t\t\t\t}","\t\t\t}","\t\t\tctx.closePath();","\t\t}","\t\tif (!dontPaint && (hasFill || hasStroke)) {","\t\t\tthis._setStyles(ctx);","\t\t\tif (hasFill) {","\t\t\t\tctx.fill(style.getWindingRule());","\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t}","\t\t\tif (hasStroke)","\t\t\t\tctx.stroke();","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn !(this.hasFill() && this.hasStroke());","\t},","","\t_getBounds: function(getter, matrix) {","\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);","\t\tif (getter !== 'getBounds' && this.hasStroke())","\t\t\trect = rect.expand(this.getStrokeWidth());","\t\treturn matrix ? matrix._transformBounds(rect) : rect;","\t}","},","new function() {","","\tfunction getCornerCenter(that, point, expand) {","\t\tvar radius = that._radius;","\t\tif (!radius.isZero()) {","\t\t\tvar halfSize = that._size.divide(2);","\t\t\tfor (var i = 0; i < 4; i++) {","\t\t\t\tvar dir = new Point(i & 1 ? 1 : -1, i > 1 ? 1 : -1),","\t\t\t\t\tcorner = dir.multiply(halfSize),","\t\t\t\t\tcenter = corner.subtract(dir.multiply(radius)),","\t\t\t\t\trect = new Rectangle(corner, center);","\t\t\t\tif ((expand ? rect.expand(expand) : rect).contains(point))","\t\t\t\t\treturn center;","\t\t\t}","\t\t}","\t}","","\tfunction getEllipseRadius(point, radius) {","\t\tvar angle = point.getAngleInRadians(),","\t\t\twidth = radius.width * 2,","\t\t\theight = radius.height * 2,","\t\t\tx = width * Math.sin(angle),","\t\t\ty = height * Math.cos(angle);","\t\treturn width * height / (2 * Math.sqrt(x * x + y * y));","\t}","","\treturn {","\t\t_contains: function _contains(point) {","\t\t\tif (this._type === 'rectangle') {","\t\t\t\tvar center = getCornerCenter(this, point);","\t\t\t\treturn center","\t\t\t\t\t\t? point.subtract(center).divide(this._radius)","\t\t\t\t\t\t\t.getLength() <= 1","\t\t\t\t\t\t: _contains.base.call(this, point);","\t\t\t} else {","\t\t\t\treturn point.divide(this.size).getLength() <= 0.5;","\t\t\t}","\t\t},","","\t\t_hitTestSelf: function _hitTestSelf(point, options) {","\t\t\tvar hit = false;","\t\t\tif (this.hasStroke()) {","\t\t\t\tvar type = this._type,","\t\t\t\t\tradius = this._radius,","\t\t\t\t\tstrokeWidth = this.getStrokeWidth() + 2 * options.tolerance;","\t\t\t\tif (type === 'rectangle') {","\t\t\t\t\tvar center = getCornerCenter(this, point, strokeWidth);","\t\t\t\t\tif (center) {","\t\t\t\t\t\tvar pt = point.subtract(center);","\t\t\t\t\t\thit = 2 * Math.abs(pt.getLength()","\t\t\t\t\t\t\t\t- getEllipseRadius(pt, radius)) <= strokeWidth;","\t\t\t\t\t} else {","\t\t\t\t\t\tvar rect = new Rectangle(this._size).setCenter(0, 0),","\t\t\t\t\t\t\touter = rect.expand(strokeWidth),","\t\t\t\t\t\t\tinner = rect.expand(-strokeWidth);","\t\t\t\t\t\thit = outer._containsPoint(point)","\t\t\t\t\t\t\t\t&& !inner._containsPoint(point);","\t\t\t\t\t}","\t\t\t\t} else {","\t\t\t\t\tif (type === 'ellipse')","\t\t\t\t\t\tradius = getEllipseRadius(point, radius);","\t\t\t\t\thit = 2 * Math.abs(point.getLength() - radius)","\t\t\t\t\t\t\t<= strokeWidth;","\t\t\t\t}","\t\t\t}","\t\t\treturn hit","\t\t\t\t\t? new HitResult('stroke', this)","\t\t\t\t\t: _hitTestSelf.base.apply(this, arguments);","\t\t}","\t};","}, {","","statics: new function() {","\tfunction createShape(type, point, size, radius, args) {","\t\tvar item = new Shape(Base.getNamed(args));","\t\titem._type = type;","\t\titem._size = size;","\t\titem._radius = radius;","\t\treturn item.translate(point);","\t}","","\treturn {","\t\tCircle: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tradius = Base.readNamed(arguments, 'radius');","\t\t\treturn createShape('circle', center, new Size(radius * 2), radius,","\t\t\t\t\targuments);","\t\t},","","\t\tRectangle: function() {","\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),","\t\t\t\tradius = Size.min(Size.readNamed(arguments, 'radius'),","\t\t\t\t\t\trect.getSize(true).divide(2));","\t\t\treturn createShape('rectangle', rect.getCenter(true),","\t\t\t\t\trect.getSize(true), radius, arguments);","\t\t},","","\t\tEllipse: function() {","\t\t\tvar ellipse = Shape._readEllipse(arguments),","\t\t\t\tradius = ellipse.radius;","\t\t\treturn createShape('ellipse', ellipse.center, radius.multiply(2),","\t\t\t\t\tradius, arguments);","\t\t},","","\t\t_readEllipse: function(args) {","\t\t\tvar center,","\t\t\t\tradius;","\t\t\tif (Base.hasNamed(args, 'radius')) {","\t\t\t\tcenter = Point.readNamed(args, 'center');","\t\t\t\tradius = Size.readNamed(args, 'radius');","\t\t\t} else {","\t\t\t\tvar rect = Rectangle.readNamed(args, 'rectangle');","\t\t\t\tcenter = rect.getCenter(true);","\t\t\t\tradius = rect.getSize(true).divide(2);","\t\t\t}","\t\t\treturn { center: center, radius: radius };","\t\t}","\t};","}});","","var Raster = Item.extend({","\t_class: 'Raster',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_boundsGetter: 'getBounds',","\t_boundsSelected: true,","\t_serializeFields: {","\t\tsource: null","\t},","","\tinitialize: function Raster(object, position) {","\t\tif (!this._initialize(object,","\t\t\t\tposition !== undefined && Point.read(arguments, 1))) {","\t\t\tif (typeof object === 'string') {","\t\t\t\tthis.setSource(object);","\t\t\t} else {","\t\t\t\tthis.setImage(object);","\t\t\t}","\t\t}","\t\tif (!this._size) {","\t\t\tthis._size = new Size();","\t\t\tthis._loaded = false;","\t\t}","\t},","","\t_equals: function(item) {","\t\treturn this.getSource() === item.getSource();","\t},","","\tclone: function(insert) {","\t\tvar copy = new Raster(Item.NO_INSERT),","\t\t\timage = this._image,","\t\t\tcanvas = this._canvas;","\t\tif (image) {","\t\t\tcopy.setImage(image);","\t\t} else if (canvas) {","\t\t\tvar copyCanvas = CanvasProvider.getCanvas(this._size);","\t\t\tcopyCanvas.getContext('2d').drawImage(canvas, 0, 0);","\t\t\tcopy.setImage(copyCanvas);","\t\t}","\t\treturn this._clone(copy, insert);","\t},","","\tgetSize: function() {","\t\tvar size = this._size;","\t\treturn new LinkedSize(size ? size.width : 0, size ? size.height : 0,","\t\t\t\tthis, 'setSize');","\t},","","\tsetSize: function() {","\t\tvar size = Size.read(arguments);","\t\tif (!size.equals(this._size)) {","\t\t\tif (size.width > 0 && size.height > 0) {","\t\t\t\tvar element = this.getElement();","\t\t\t\tthis.setImage(CanvasProvider.getCanvas(size));","\t\t\t\tif (element)","\t\t\t\t\tthis.getContext(true).drawImage(element, 0, 0,","\t\t\t\t\t\t\tsize.width, size.height);","\t\t\t} else {","\t\t\t\tif (this._canvas)","\t\t\t\t\tCanvasProvider.release(this._canvas);","\t\t\t\tthis._size = size.clone();","\t\t\t}","\t\t}","\t},","","\tgetWidth: function() {","\t\treturn this._size ? this._size.width : 0;","\t},","","\tsetWidth: function(width) {","\t\tthis.setSize(width, this.getHeight());","\t},","","\tgetHeight: function() {","\t\treturn this._size ? this._size.height : 0;","\t},","","\tsetHeight: function(height) {","\t\tthis.setSize(this.getWidth(), height);","\t},","","\tisEmpty: function() {","\t\tvar size = this._size;","\t\treturn !size || size.width === 0 && size.height === 0;","\t},","","\tgetResolution: function() {","\t\tvar matrix = this._matrix,","\t\t\torig = new Point(0, 0).transform(matrix),","\t\t\tu = new Point(1, 0).transform(matrix).subtract(orig),","\t\t\tv = new Point(0, 1).transform(matrix).subtract(orig);","\t\treturn new Size(","\t\t\t72 / u.getLength(),","\t\t\t72 / v.getLength()","\t\t);","\t},","","\tgetPpi: '#getResolution',","","\tgetImage: function() {","\t\treturn this._image;","\t},","","\tsetImage: function(image) {","\t\tif (this._canvas)","\t\t\tCanvasProvider.release(this._canvas);","\t\tif (image && image.getContext) {","\t\t\tthis._image = null;","\t\t\tthis._canvas = image;","\t\t\tthis._loaded = true;","\t\t} else {","\t\t\tthis._image = image;","\t\t\tthis._canvas = null;","\t\t\tthis._loaded = image && image.complete;","\t\t}","\t\tthis._size = new Size(","\t\t\t\timage ? image.naturalWidth || image.width : 0,","\t\t\t\timage ? image.naturalHeight || image.height : 0);","\t\tthis._context = null;","\t\tthis._changed(521);","\t},","","\tgetCanvas: function() {","\t\tif (!this._canvas) {","\t\t\tvar ctx = CanvasProvider.getContext(this._size);","\t\t\ttry {","\t\t\t\tif (this._image)","\t\t\t\t\tctx.drawImage(this._image, 0, 0);","\t\t\t\tthis._canvas = ctx.canvas;","\t\t\t} catch (e) {","\t\t\t\tCanvasProvider.release(ctx);","\t\t\t}","\t\t}","\t\treturn this._canvas;","\t},","","\tsetCanvas: '#setImage',","","\tgetContext: function(modify) {","\t\tif (!this._context)","\t\t\tthis._context = this.getCanvas().getContext('2d');","\t\tif (modify) {","\t\t\tthis._image = null;","\t\t\tthis._changed(513);","\t\t}","\t\treturn this._context;","\t},","","\tsetContext: function(context) {","\t\tthis._context = context;","\t},","","\tgetSource: function() {","\t\treturn this._image && this._image.src || this.toDataURL();","\t},","","\tsetSource: function(src) {","\t\tvar that = this,","\t\t\timage;","","\t\tfunction loaded() {","\t\t\tvar view = that.getView();","\t\t\tif (view) {","\t\t\t\tpaper = view._scope;","\t\t\t\tthat.setImage(image);","\t\t\t\tthat.emit('load');","\t\t\t\tview.update();","\t\t\t}","\t\t}","","\t\t\timage = document.getElementById(src) || new Image();","","\t\tif (image.naturalWidth && image.naturalHeight) {","\t\t\tsetTimeout(loaded, 0);","\t\t} else {","\t\t\tDomEvent.add(image, {","\t\t\t\tload: loaded","\t\t\t});","\t\t\tif (!image.src)","\t\t\t\timage.src = src;","\t\t}","\t\tthis.setImage(image);","\t},","","\tgetElement: function() {","\t\treturn this._canvas || this._loaded && this._image;","\t}","}, {","\tbeans: false,","","\tgetSubCanvas: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\tctx = CanvasProvider.getContext(rect.getSize());","\t\tctx.drawImage(this.getCanvas(), rect.x, rect.y,","\t\t\t\trect.width, rect.height, 0, 0, rect.width, rect.height);","\t\treturn ctx.canvas;","\t},","","\tgetSubRaster: function() {","\t\tvar rect = Rectangle.read(arguments),","\t\t\traster = new Raster(Item.NO_INSERT);","\t\traster.setImage(this.getSubCanvas(rect));","\t\traster.translate(rect.getCenter().subtract(this.getSize().divide(2)));","\t\traster._matrix.preConcatenate(this._matrix);","\t\traster.insertAbove(this);","\t\treturn raster;","\t},","","\ttoDataURL: function() {","\t\tvar src = this._image && this._image.src;","\t\tif (/^data:/.test(src))","\t\t\treturn src;","\t\tvar canvas = this.getCanvas();","\t\treturn canvas ? canvas.toDataURL() : null;","\t},","","\tdrawImage: function(image ) {","\t\tvar point = Point.read(arguments, 1);","\t\tthis.getContext(true).drawImage(image, point.x, point.y);","\t},","","\tgetAverageColor: function(object) {","\t\tvar bounds, path;","\t\tif (!object) {","\t\t\tbounds = this.getBounds();","\t\t} else if (object instanceof PathItem) {","\t\t\tpath = object;","\t\t\tbounds = object.getBounds();","\t\t} else if (object.width) {","\t\t\tbounds = new Rectangle(object);","\t\t} else if (object.x) {","\t\t\tbounds = new Rectangle(object.x - 0.5, object.y - 0.5, 1, 1);","\t\t}","\t\tvar sampleSize = 32,","\t\t\twidth = Math.min(bounds.width, sampleSize),","\t\t\theight = Math.min(bounds.height, sampleSize);","\t\tvar ctx = Raster._sampleContext;","\t\tif (!ctx) {","\t\t\tctx = Raster._sampleContext = CanvasProvider.getContext(","\t\t\t\t\tnew Size(sampleSize));","\t\t} else {","\t\t\tctx.clearRect(0, 0, sampleSize + 1, sampleSize + 1);","\t\t}","\t\tctx.save();","\t\tvar matrix = new Matrix()","\t\t\t\t.scale(width / bounds.width, height / bounds.height)","\t\t\t\t.translate(-bounds.x, -bounds.y);","\t\tmatrix.applyToContext(ctx);","\t\tif (path)","\t\t\tpath.draw(ctx, new Base({ clip: true, matrices: [matrix] }));","\t\tthis._matrix.applyToContext(ctx);","\t\tvar element = this.getElement(),","\t\t\tsize = this._size;","\t\tif (element)","\t\t\tctx.drawImage(element, -size.width / 2, -size.height / 2);","\t\tctx.restore();","\t\tvar pixels = ctx.getImageData(0.5, 0.5, Math.ceil(width),","\t\t\t\tMath.ceil(height)).data,","\t\t\tchannels = [0, 0, 0],","\t\t\ttotal = 0;","\t\tfor (var i = 0, l = pixels.length; i < l; i += 4) {","\t\t\tvar alpha = pixels[i + 3];","\t\t\ttotal += alpha;","\t\t\talpha /= 255;","\t\t\tchannels[0] += pixels[i] * alpha;","\t\t\tchannels[1] += pixels[i + 1] * alpha;","\t\t\tchannels[2] += pixels[i + 2] * alpha;","\t\t}","\t\tfor (var i = 0; i < 3; i++)","\t\t\tchannels[i] /= total;","\t\treturn total ? Color.read(channels) : null;","\t},","","\tgetPixel: function() {","\t\tvar point = Point.read(arguments);","\t\tvar data = this.getContext().getImageData(point.x, point.y, 1, 1).data;","\t\treturn new Color('rgb', [data[0] / 255, data[1] / 255, data[2] / 255],","\t\t\t\tdata[3] / 255);","\t},","","\tsetPixel: function() {","\t\tvar point = Point.read(arguments),","\t\t\tcolor = Color.read(arguments),","\t\t\tcomponents = color._convert('rgb'),","\t\t\talpha = color._alpha,","\t\t\tctx = this.getContext(true),","\t\t\timageData = ctx.createImageData(1, 1),","\t\t\tdata = imageData.data;","\t\tdata[0] = components[0] * 255;","\t\tdata[1] = components[1] * 255;","\t\tdata[2] = components[2] * 255;","\t\tdata[3] = alpha != null ? alpha * 255 : 255;","\t\tctx.putImageData(imageData, point.x, point.y);","\t},","","\tcreateImageData: function() {","\t\tvar size = Size.read(arguments);","\t\treturn this.getContext().createImageData(size.width, size.height);","\t},","","\tgetImageData: function() {","\t\tvar rect = Rectangle.read(arguments);","\t\tif (rect.isEmpty())","\t\t\trect = new Rectangle(this._size);","\t\treturn this.getContext().getImageData(rect.x, rect.y,","\t\t\t\trect.width, rect.height);","\t},","","\tsetImageData: function(data ) {","\t\tvar point = Point.read(arguments, 1);","\t\tthis.getContext(true).putImageData(data, point.x, point.y);","\t},","","\t_getBounds: function(getter, matrix) {","\t\tvar rect = new Rectangle(this._size).setCenter(0, 0);","\t\treturn matrix ? matrix._transformBounds(rect) : rect;","\t},","","\t_hitTestSelf: function(point) {","\t\tif (this._contains(point)) {","\t\t\tvar that = this;","\t\t\treturn new HitResult('pixel', that, {","\t\t\t\toffset: point.add(that._size.divide(2)).round(),","\t\t\t\tcolor: {","\t\t\t\t\tget: function() {","\t\t\t\t\t\treturn that.getPixel(this.offset);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t});","\t\t}","\t},","","\t_draw: function(ctx) {","\t\tvar element = this.getElement();","\t\tif (element) {","\t\t\tctx.globalAlpha = this._opacity;","\t\t\tctx.drawImage(element,","\t\t\t\t\t-this._size.width / 2, -this._size.height / 2);","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn true;","\t}","});","","var PlacedSymbol = Item.extend({","\t_class: 'PlacedSymbol',","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_boundsGetter: { getBounds: 'getStrokeBounds' },","\t_boundsSelected: true,","\t_serializeFields: {","\t\tsymbol: null","\t},","","\tinitialize: function PlacedSymbol(arg0, arg1) {","\t\tif (!this._initialize(arg0,","\t\t\t\targ1 !== undefined && Point.read(arguments, 1)))","\t\t\tthis.setSymbol(arg0 instanceof Symbol ? arg0 : new Symbol(arg0));","\t},","","\t_equals: function(item) {","\t\treturn this._symbol === item._symbol;","\t},","","\tgetSymbol: function() {","\t\treturn this._symbol;","\t},","","\tsetSymbol: function(symbol) {","\t\tthis._symbol = symbol;","\t\tthis._changed(9);","\t},","","\tclone: function(insert) {","\t\tvar copy = new PlacedSymbol(Item.NO_INSERT);","\t\tcopy.setSymbol(this._symbol);","\t\treturn this._clone(copy, insert);","\t},","","\tisEmpty: function() {","\t\treturn this._symbol._definition.isEmpty();","\t},","","\t_getBounds: function(getter, matrix, cacheItem) {","\t\tvar definition = this.symbol._definition;","\t\treturn definition._getCachedBounds(getter,","\t\t\t\tmatrix && matrix.chain(definition._matrix), cacheItem);","\t},","","\t_hitTestSelf: function(point, options) {","\t\tvar res = this._symbol._definition._hitTest(point, options);","\t\tif (res)","\t\t\tres.item = this;","\t\treturn res;","\t},","","\t_draw: function(ctx, param) {","\t\tthis.symbol._definition.draw(ctx, param);","\t}","","});","","var HitResult = Base.extend({","\t_class: 'HitResult',","","\tinitialize: function HitResult(type, item, values) {","\t\tthis.type = type;","\t\tthis.item = item;","\t\tif (values) {","\t\t\tvalues.enumerable = true;","\t\t\tthis.inject(values);","\t\t}","\t},","","\tstatics: {","\t\tgetOptions: function(options) {","\t\t\treturn new Base({","\t\t\t\ttype: null,","\t\t\t\ttolerance: paper.settings.hitTolerance,","\t\t\t\tfill: !options,","\t\t\t\tstroke: !options,","\t\t\t\tsegments: !options,","\t\t\t\thandles: false,","\t\t\t\tends: false,","\t\t\t\tcenter: false,","\t\t\t\tbounds: false,","\t\t\t\tguides: false,","\t\t\t\tselected: false","\t\t\t}, options);","\t\t}","\t}","});","","var Segment = Base.extend({","\t_class: 'Segment',","\tbeans: true,","","\tinitialize: function Segment(arg0, arg1, arg2, arg3, arg4, arg5) {","\t\tvar count = arguments.length,","\t\t\tpoint, handleIn, handleOut;","\t\tif (count === 0) {","\t\t} else if (count === 1) {","\t\t\tif (arg0.point) {","\t\t\t\tpoint = arg0.point;","\t\t\t\thandleIn = arg0.handleIn;","\t\t\t\thandleOut = arg0.handleOut;","\t\t\t} else {","\t\t\t\tpoint = arg0;","\t\t\t}","\t\t} else if (count === 2 && typeof arg0 === 'number') {","\t\t\tpoint = arguments;","\t\t} else if (count <= 3) {","\t\t\tpoint = arg0;","\t\t\thandleIn = arg1;","\t\t\thandleOut = arg2;","\t\t} else {","\t\t\tpoint = arg0 !== undefined ? [ arg0, arg1 ] : null;","\t\t\thandleIn = arg2 !== undefined ? [ arg2, arg3 ] : null;","\t\t\thandleOut = arg4 !== undefined ? [ arg4, arg5 ] : null;","\t\t}","\t\tnew SegmentPoint(point, this, '_point');","\t\tnew SegmentPoint(handleIn, this, '_handleIn');","\t\tnew SegmentPoint(handleOut, this, '_handleOut');","\t},","","\t_serialize: function(options) {","\t\treturn Base.serialize(this.isLinear() ? this._point","\t\t\t\t: [this._point, this._handleIn, this._handleOut],","\t\t\t\toptions, true);","\t},","","\t_changed: function(point) {","\t\tvar path = this._path;","\t\tif (!path)","\t\t\treturn;","\t\tvar curves = path._curves,","\t\t\tindex = this._index,","\t\t\tcurve;","\t\tif (curves) {","\t\t\tif ((!point || point === this._point || point === this._handleIn)","\t\t\t\t\t&& (curve = index > 0 ? curves[index - 1] : path._closed","\t\t\t\t\t\t? curves[curves.length - 1] : null))","\t\t\t\tcurve._changed();","\t\t\tif ((!point || point === this._point || point === this._handleOut)","\t\t\t\t\t&& (curve = curves[index]))","\t\t\t\tcurve._changed();","\t\t}","\t\tpath._changed(25);","\t},","","\tgetPoint: function() {","\t\treturn this._point;","\t},","","\tsetPoint: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._point.set(point.x, point.y);","\t},","","\tgetHandleIn: function() {","\t\treturn this._handleIn;","\t},","","\tsetHandleIn: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._handleIn.set(point.x, point.y);","\t},","","\tgetHandleOut: function() {","\t\treturn this._handleOut;","\t},","","\tsetHandleOut: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._handleOut.set(point.x, point.y);","\t},","","\tisLinear: function() {","\t\treturn this._handleIn.isZero() && this._handleOut.isZero();","\t},","","\tsetLinear: function(linear) {","\t\tif (linear) {","\t\t\tthis._handleIn.set(0, 0);","\t\t\tthis._handleOut.set(0, 0);","\t\t} else {","\t\t}","\t},","","\tisColinear: function(segment) {","\t\tvar next1 = this.getNext(),","\t\t\tnext2 = segment.getNext();","\t\treturn this._handleOut.isZero() && next1._handleIn.isZero()","\t\t\t\t&& segment._handleOut.isZero() && next2._handleIn.isZero()","\t\t\t\t&& next1._point.subtract(this._point).isColinear(","\t\t\t\t\tnext2._point.subtract(segment._point));","\t},","","\tisOrthogonal: function() {","\t\tvar prev = this.getPrevious(),","\t\t\tnext = this.getNext();","\t\treturn prev._handleOut.isZero() && this._handleIn.isZero()","\t\t\t&& this._handleOut.isZero() && next._handleIn.isZero()","\t\t\t&& this._point.subtract(prev._point).isOrthogonal(","\t\t\t\t\tnext._point.subtract(this._point));","\t},","","\tisArc: function() {","\t\tvar next = this.getNext(),","\t\t\thandle1 = this._handleOut,","\t\t\thandle2 = next._handleIn,","\t\t\tkappa = 0.5522847498307936;","\t\tif (handle1.isOrthogonal(handle2)) {","\t\t\tvar from = this._point,","\t\t\t\tto = next._point,","\t\t\t\tcorner = new Line(from, handle1, true).intersect(","\t\t\t\t\t\tnew Line(to, handle2, true), true);","\t\t\treturn corner && Numerical.isZero(handle1.getLength() /","\t\t\t\t\tcorner.subtract(from).getLength() - kappa)","\t\t\t\t&& Numerical.isZero(handle2.getLength() /","\t\t\t\t\tcorner.subtract(to).getLength() - kappa);","\t\t}","\t\treturn false;","\t},","","\t_selectionState: 0,","","\tisSelected: function(_point) {","\t\tvar state = this._selectionState;","\t\treturn !_point ? !!(state & 7)","\t\t\t: _point === this._point ? !!(state & 4)","\t\t\t: _point === this._handleIn ? !!(state & 1)","\t\t\t: _point === this._handleOut ? !!(state & 2)","\t\t\t: false;","\t},","","\tsetSelected: function(selected, _point) {","\t\tvar path = this._path,","\t\t\tselected = !!selected,","\t\t\tstate = this._selectionState,","\t\t\toldState = state,","\t\t\tflag = !_point ? 7","\t\t\t\t\t: _point === this._point ? 4","\t\t\t\t\t: _point === this._handleIn ? 1","\t\t\t\t\t: _point === this._handleOut ? 2","\t\t\t\t\t: 0;","\t\tif (selected) {","\t\t\tstate |= flag;","\t\t} else {","\t\t\tstate &= ~flag;","\t\t}","\t\tthis._selectionState = state;","\t\tif (path && state !== oldState) {","\t\t\tpath._updateSelection(this, oldState, state);","\t\t\tpath._changed(129);","\t\t}","\t},","","\tgetIndex: function() {","\t\treturn this._index !== undefined ? this._index : null;","\t},","","\tgetPath: function() {","\t\treturn this._path || null;","\t},","","\tgetCurve: function() {","\t\tvar path = this._path,","\t\t\tindex = this._index;","\t\tif (path) {","\t\t\tif (index > 0 && !path._closed","\t\t\t\t\t&& index === path._segments.length - 1)","\t\t\t\tindex--;","\t\t\treturn path.getCurves()[index] || null;","\t\t}","\t\treturn null;","\t},","","\tgetLocation: function() {","\t\tvar curve = this.getCurve();","\t\treturn curve","\t\t\t\t? new CurveLocation(curve, this === curve._segment1 ? 0 : 1)","\t\t\t\t: null;","\t},","","\tgetNext: function() {","\t\tvar segments = this._path && this._path._segments;","\t\treturn segments && (segments[this._index + 1]","\t\t\t\t|| this._path._closed && segments[0]) || null;","\t},","","\tgetPrevious: function() {","\t\tvar segments = this._path && this._path._segments;","\t\treturn segments && (segments[this._index - 1]","\t\t\t\t|| this._path._closed && segments[segments.length - 1]) || null;","\t},","","\treverse: function() {","\t\treturn new Segment(this._point, this._handleOut, this._handleIn);","\t},","","\tremove: function() {","\t\treturn this._path ? !!this._path.removeSegment(this._index) : false;","\t},","","\tclone: function() {","\t\treturn new Segment(this._point, this._handleIn, this._handleOut);","\t},","","\tequals: function(segment) {","\t\treturn segment === this || segment && this._class === segment._class","\t\t\t\t&& this._point.equals(segment._point)","\t\t\t\t&& this._handleIn.equals(segment._handleIn)","\t\t\t\t&& this._handleOut.equals(segment._handleOut)","\t\t\t\t|| false;","\t},","","\ttoString: function() {","\t\tvar parts = [ 'point: ' + this._point ];","\t\tif (!this._handleIn.isZero())","\t\t\tparts.push('handleIn: ' + this._handleIn);","\t\tif (!this._handleOut.isZero())","\t\t\tparts.push('handleOut: ' + this._handleOut);","\t\treturn '{ ' + parts.join(', ') + ' }';","\t},","","\ttransform: function(matrix) {","\t\tthis._transformCoordinates(matrix, new Array(6), true);","\t\tthis._changed();","\t},","","\t_transformCoordinates: function(matrix, coords, change) {","\t\tvar point = this._point,","\t\t\thandleIn = !change || !this._handleIn.isZero()","\t\t\t\t\t? this._handleIn : null,","\t\t\thandleOut = !change || !this._handleOut.isZero()","\t\t\t\t\t? this._handleOut : null,","\t\t\tx = point._x,","\t\t\ty = point._y,","\t\t\ti = 2;","\t\tcoords[0] = x;","\t\tcoords[1] = y;","\t\tif (handleIn) {","\t\t\tcoords[i++] = handleIn._x + x;","\t\t\tcoords[i++] = handleIn._y + y;","\t\t}","\t\tif (handleOut) {","\t\t\tcoords[i++] = handleOut._x + x;","\t\t\tcoords[i++] = handleOut._y + y;","\t\t}","\t\tif (matrix) {","\t\t\tmatrix._transformCoordinates(coords, coords, i / 2);","\t\t\tx = coords[0];","\t\t\ty = coords[1];","\t\t\tif (change) {","\t\t\t\tpoint._x = x;","\t\t\t\tpoint._y = y;","\t\t\t\ti  = 2;","\t\t\t\tif (handleIn) {","\t\t\t\t\thandleIn._x = coords[i++] - x;","\t\t\t\t\thandleIn._y = coords[i++] - y;","\t\t\t\t}","\t\t\t\tif (handleOut) {","\t\t\t\t\thandleOut._x = coords[i++] - x;","\t\t\t\t\thandleOut._y = coords[i++] - y;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tif (!handleIn) {","\t\t\t\t\tcoords[i++] = x;","\t\t\t\t\tcoords[i++] = y;","\t\t\t\t}","\t\t\t\tif (!handleOut) {","\t\t\t\t\tcoords[i++] = x;","\t\t\t\t\tcoords[i++] = y;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn coords;","\t}","});","","var SegmentPoint = Point.extend({","\tinitialize: function SegmentPoint(point, owner, key) {","\t\tvar x, y, selected;","\t\tif (!point) {","\t\t\tx = y = 0;","\t\t} else if ((x = point[0]) !== undefined) {","\t\t\ty = point[1];","\t\t} else {","\t\t\tvar pt = point;","\t\t\tif ((x = pt.x) === undefined) {","\t\t\t\tpt = Point.read(arguments);","\t\t\t\tx = pt.x;","\t\t\t}","\t\t\ty = pt.y;","\t\t\tselected = pt.selected;","\t\t}","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._owner = owner;","\t\towner[key] = this;","\t\tif (selected)","\t\t\tthis.setSelected(true);","\t},","","\tset: function(x, y) {","\t\tthis._x = x;","\t\tthis._y = y;","\t\tthis._owner._changed(this);","\t\treturn this;","\t},","","\t_serialize: function(options) {","\t\tvar f = options.formatter,","\t\t\tx = f.number(this._x),","\t\t\ty = f.number(this._y);","\t\treturn this.isSelected()","\t\t\t\t? { x: x, y: y, selected: true }","\t\t\t\t: [x, y];","\t},","","\tgetX: function() {","\t\treturn this._x;","\t},","","\tsetX: function(x) {","\t\tthis._x = x;","\t\tthis._owner._changed(this);","\t},","","\tgetY: function() {","\t\treturn this._y;","\t},","","\tsetY: function(y) {","\t\tthis._y = y;","\t\tthis._owner._changed(this);","\t},","","\tisZero: function() {","\t\treturn Numerical.isZero(this._x) && Numerical.isZero(this._y);","\t},","","\tsetSelected: function(selected) {","\t\tthis._owner.setSelected(selected, this);","\t},","","\tisSelected: function() {","\t\treturn this._owner.isSelected(this);","\t}","});","","var Curve = Base.extend({","\t_class: 'Curve',","","\tinitialize: function Curve(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {","\t\tvar count = arguments.length;","\t\tif (count === 3) {","\t\t\tthis._path = arg0;","\t\t\tthis._segment1 = arg1;","\t\t\tthis._segment2 = arg2;","\t\t} else if (count === 0) {","\t\t\tthis._segment1 = new Segment();","\t\t\tthis._segment2 = new Segment();","\t\t} else if (count === 1) {","\t\t\tthis._segment1 = new Segment(arg0.segment1);","\t\t\tthis._segment2 = new Segment(arg0.segment2);","\t\t} else if (count === 2) {","\t\t\tthis._segment1 = new Segment(arg0);","\t\t\tthis._segment2 = new Segment(arg1);","\t\t} else {","\t\t\tvar point1, handle1, handle2, point2;","\t\t\tif (count === 4) {","\t\t\t\tpoint1 = arg0;","\t\t\t\thandle1 = arg1;","\t\t\t\thandle2 = arg2;","\t\t\t\tpoint2 = arg3;","\t\t\t} else if (count === 8) {","\t\t\t\tpoint1 = [arg0, arg1];","\t\t\t\tpoint2 = [arg6, arg7];","\t\t\t\thandle1 = [arg2 - arg0, arg3 - arg1];","\t\t\t\thandle2 = [arg4 - arg6, arg5 - arg7];","\t\t\t}","\t\t\tthis._segment1 = new Segment(point1, null, handle1);","\t\t\tthis._segment2 = new Segment(point2, handle2, null);","\t\t}","\t},","","\t_changed: function() {","\t\tthis._length = this._bounds = undefined;","\t},","","\tgetPoint1: function() {","\t\treturn this._segment1._point;","\t},","","\tsetPoint1: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._segment1._point.set(point.x, point.y);","\t},","","\tgetPoint2: function() {","\t\treturn this._segment2._point;","\t},","","\tsetPoint2: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._segment2._point.set(point.x, point.y);","\t},","","\tgetHandle1: function() {","\t\treturn this._segment1._handleOut;","\t},","","\tsetHandle1: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._segment1._handleOut.set(point.x, point.y);","\t},","","\tgetHandle2: function() {","\t\treturn this._segment2._handleIn;","\t},","","\tsetHandle2: function() {","\t\tvar point = Point.read(arguments);","\t\tthis._segment2._handleIn.set(point.x, point.y);","\t},","","\tgetSegment1: function() {","\t\treturn this._segment1;","\t},","","\tgetSegment2: function() {","\t\treturn this._segment2;","\t},","","\tgetPath: function() {","\t\treturn this._path;","\t},","","\tgetIndex: function() {","\t\treturn this._segment1._index;","\t},","","\tgetNext: function() {","\t\tvar curves = this._path && this._path._curves;","\t\treturn curves && (curves[this._segment1._index + 1]","\t\t\t\t|| this._path._closed && curves[0]) || null;","\t},","","\tgetPrevious: function() {","\t\tvar curves = this._path && this._path._curves;","\t\treturn curves && (curves[this._segment1._index - 1]","\t\t\t\t|| this._path._closed && curves[curves.length - 1]) || null;","\t},","","\tisSelected: function() {","\t\treturn this.getPoint1().isSelected()","\t\t\t\t&& this.getHandle2().isSelected()","\t\t\t\t&& this.getHandle2().isSelected()","\t\t\t\t&& this.getPoint2().isSelected();","\t},","","\tsetSelected: function(selected) {","\t\tthis.getPoint1().setSelected(selected);","\t\tthis.getHandle1().setSelected(selected);","\t\tthis.getHandle2().setSelected(selected);","\t\tthis.getPoint2().setSelected(selected);","\t},","","\tgetValues: function(matrix) {","\t\treturn Curve.getValues(this._segment1, this._segment2, matrix);","\t},","","\tgetPoints: function() {","\t\tvar coords = this.getValues(),","\t\t\tpoints = [];","\t\tfor (var i = 0; i < 8; i += 2)","\t\t\tpoints.push(new Point(coords[i], coords[i + 1]));","\t\treturn points;","\t},","","\tgetLength: function() {","\t\tif (this._length == null) {","\t\t\tthis._length = this.isLinear()","\t\t\t\t? this._segment2._point.getDistance(this._segment1._point)","\t\t\t\t: Curve.getLength(this.getValues(), 0, 1);","\t\t}","\t\treturn this._length;","\t},","","\tgetArea: function() {","\t\treturn Curve.getArea(this.getValues());","\t},","","\tgetPart: function(from, to) {","\t\treturn new Curve(Curve.getPart(this.getValues(), from, to));","\t},","","\tgetPartLength: function(from, to) {","\t\treturn Curve.getLength(this.getValues(), from, to);","\t},","","\tisLinear: function() {","\t\treturn this._segment1._handleOut.isZero()","\t\t\t\t&& this._segment2._handleIn.isZero();","\t},","","\tgetIntersections: function(curve) {","\t\treturn Curve.filterIntersections(Curve.getIntersections(","\t\t\t\tthis.getValues(), curve.getValues(), this, curve, []));","\t},","","\t_getParameter: function(offset, isParameter) {","\t\treturn isParameter","\t\t\t\t? offset","\t\t\t\t: offset && offset.curve === this","\t\t\t\t\t? offset.parameter","\t\t\t\t\t: offset === undefined && isParameter === undefined","\t\t\t\t\t\t? 0.5","\t\t\t\t\t\t: this.getParameterAt(offset, 0);","\t},","","\tdivide: function(offset, isParameter, ignoreLinear) {","\t\tvar parameter = this._getParameter(offset, isParameter),","\t\t\ttolerance = 0.000001,","\t\t\tres = null;","\t\tif (parameter > tolerance && parameter < 1 - tolerance) {","\t\t\tvar parts = Curve.subdivide(this.getValues(), parameter),","\t\t\t\tisLinear = ignoreLinear ? false : this.isLinear(),","\t\t\t\tleft = parts[0],","\t\t\t\tright = parts[1];","","\t\t\tif (!isLinear) {","\t\t\t\tthis._segment1._handleOut.set(left[2] - left[0],","\t\t\t\t\t\tleft[3] - left[1]);","\t\t\t\tthis._segment2._handleIn.set(right[4] - right[6],","\t\t\t\t\t\tright[5] - right[7]);","\t\t\t}","","\t\t\tvar x = left[6], y = left[7],","\t\t\t\tsegment = new Segment(new Point(x, y),","\t\t\t\t\t\t!isLinear && new Point(left[4] - x, left[5] - y),","\t\t\t\t\t\t!isLinear && new Point(right[2] - x, right[3] - y));","","\t\t\tif (this._path) {","\t\t\t\tif (this._segment1._index > 0 && this._segment2._index === 0) {","\t\t\t\t\tthis._path.add(segment);","\t\t\t\t} else {","\t\t\t\t\tthis._path.insert(this._segment2._index, segment);","\t\t\t\t}","\t\t\t\tres = this;","\t\t\t} else {","\t\t\t\tvar end = this._segment2;","\t\t\t\tthis._segment2 = segment;","\t\t\t\tres = new Curve(segment, end);","\t\t\t}","\t\t}","\t\treturn res;","\t},","","\tsplit: function(offset, isParameter) {","\t\treturn this._path","\t\t\t? this._path.split(this._segment1._index,","\t\t\t\t\tthis._getParameter(offset, isParameter))","\t\t\t: null;","\t},","","\treverse: function() {","\t\treturn new Curve(this._segment2.reverse(), this._segment1.reverse());","\t},","","\tremove: function() {","\t\tvar removed = false;","\t\tif (this._path) {","\t\t\tvar segment2 = this._segment2,","\t\t\t\thandleOut = segment2._handleOut;","\t\t\tremoved = segment2.remove();","\t\t\tif (removed)","\t\t\t\tthis._segment1._handleOut.set(handleOut.x, handleOut.y);","\t\t}","\t\treturn removed;","\t},","","\tclone: function() {","\t\treturn new Curve(this._segment1, this._segment2);","\t},","","\ttoString: function() {","\t\tvar parts = [ 'point1: ' + this._segment1._point ];","\t\tif (!this._segment1._handleOut.isZero())","\t\t\tparts.push('handle1: ' + this._segment1._handleOut);","\t\tif (!this._segment2._handleIn.isZero())","\t\t\tparts.push('handle2: ' + this._segment2._handleIn);","\t\tparts.push('point2: ' + this._segment2._point);","\t\treturn '{ ' + parts.join(', ') + ' }';","\t},","","statics: {","\tgetValues: function(segment1, segment2, matrix) {","\t\tvar p1 = segment1._point,","\t\t\th1 = segment1._handleOut,","\t\t\th2 = segment2._handleIn,","\t\t\tp2 = segment2._point,","\t\t\tvalues = [","\t\t\t\tp1._x, p1._y,","\t\t\t\tp1._x + h1._x, p1._y + h1._y,","\t\t\t\tp2._x + h2._x, p2._y + h2._y,","\t\t\t\tp2._x, p2._y","\t\t\t];","\t\tif (matrix)","\t\t\tmatrix._transformCoordinates(values, values, 4);","\t\treturn values;","\t},","","\tevaluate: function(v, t, type) {","\t\tvar p1x = v[0], p1y = v[1],","\t\t\tc1x = v[2], c1y = v[3],","\t\t\tc2x = v[4], c2y = v[5],","\t\t\tp2x = v[6], p2y = v[7],","\t\t\ttolerance = 0.000001,","\t\t\tx, y;","","\t\tif (type === 0 && (t < tolerance || t > 1 - tolerance)) {","\t\t\tvar isZero = t < tolerance;","\t\t\tx = isZero ? p1x : p2x;","\t\t\ty = isZero ? p1y : p2y;","\t\t} else {","\t\t\tvar cx = 3 * (c1x - p1x),","\t\t\t\tbx = 3 * (c2x - c1x) - cx,","\t\t\t\tax = p2x - p1x - cx - bx,","","\t\t\t\tcy = 3 * (c1y - p1y),","\t\t\t\tby = 3 * (c2y - c1y) - cy,","\t\t\t\tay = p2y - p1y - cy - by;","\t\t\tif (type === 0) {","\t\t\t\tx = ((ax * t + bx) * t + cx) * t + p1x;","\t\t\t\ty = ((ay * t + by) * t + cy) * t + p1y;","\t\t\t} else {","\t\t\t\tif (t < tolerance && c1x === p1x && c1y === p1y","\t\t\t\t\t\t|| t > 1 - tolerance && c2x === p2x && c2y === p2y) {","\t\t\t\t\tx = c2x - c1x;","\t\t\t\t\ty = c2y - c1y;","\t\t\t\t} else if (t < tolerance) {","\t\t\t\t\tx = cx;","\t\t\t\t\ty = cy;","\t\t\t\t} else if (t > 1 - tolerance) {","\t\t\t\t\tx = 3 * (p2x - c2x);","\t\t\t\t\ty = 3 * (p2y - c2y);","\t\t\t\t} else {","\t\t\t\t\tx = (3 * ax * t + 2 * bx) * t + cx;","\t\t\t\t\ty = (3 * ay * t + 2 * by) * t + cy;","\t\t\t\t}","\t\t\t\tif (type === 3) {","\t\t\t\t\tvar x2 = 6 * ax * t + 2 * bx,","\t\t\t\t\t\ty2 = 6 * ay * t + 2 * by;","\t\t\t\t\treturn (x * y2 - y * x2) / Math.pow(x * x + y * y, 3 / 2);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn type === 2 ? new Point(y, -x) : new Point(x, y);","\t},","","\tsubdivide: function(v, t) {","\t\tvar p1x = v[0], p1y = v[1],","\t\t\tc1x = v[2], c1y = v[3],","\t\t\tc2x = v[4], c2y = v[5],","\t\t\tp2x = v[6], p2y = v[7];","\t\tif (t === undefined)","\t\t\tt = 0.5;","\t\tvar u = 1 - t,","\t\t\tp3x = u * p1x + t * c1x, p3y = u * p1y + t * c1y,","\t\t\tp4x = u * c1x + t * c2x, p4y = u * c1y + t * c2y,","\t\t\tp5x = u * c2x + t * p2x, p5y = u * c2y + t * p2y,","\t\t\tp6x = u * p3x + t * p4x, p6y = u * p3y + t * p4y,","\t\t\tp7x = u * p4x + t * p5x, p7y = u * p4y + t * p5y,","\t\t\tp8x = u * p6x + t * p7x, p8y = u * p6y + t * p7y;","\t\treturn [","\t\t\t[p1x, p1y, p3x, p3y, p6x, p6y, p8x, p8y],","\t\t\t[p8x, p8y, p7x, p7y, p5x, p5y, p2x, p2y]","\t\t];","\t},","","\tsolveCubic: function (v, coord, val, roots, min, max) {","\t\tvar p1 = v[coord],","\t\t\tc1 = v[coord + 2],","\t\t\tc2 = v[coord + 4],","\t\t\tp2 = v[coord + 6],","\t\t\tc = 3 * (c1 - p1),","\t\t\tb = 3 * (c2 - c1) - c,","\t\t\ta = p2 - p1 - c - b,","\t\t\tisZero = Numerical.isZero;","\t\tif (isZero(a) && isZero(b))","\t\t\ta = b = 0;","\t\treturn Numerical.solveCubic(a, b, c, p1 - val, roots, min, max);","\t},","","\tgetParameterOf: function(v, x, y) {","\t\tvar tolerance = 0.000001;","\t\tif (Math.abs(v[0] - x) < tolerance && Math.abs(v[1] - y) < tolerance)","\t\t\treturn 0;","\t\tif (Math.abs(v[6] - x) < tolerance && Math.abs(v[7] - y) < tolerance)","\t\t\treturn 1;","\t\tvar txs = [],","\t\t\ttys = [],","\t\t\tsx = Curve.solveCubic(v, 0, x, txs, 0, 1),","\t\t\tsy = Curve.solveCubic(v, 1, y, tys, 0, 1),","\t\t\ttx, ty;","\t\tfor (var cx = 0;  sx == -1 || cx < sx;) {","\t\t\tif (sx == -1 || (tx = txs[cx++]) >= 0 && tx <= 1) {","\t\t\t\tfor (var cy = 0; sy == -1 || cy < sy;) {","\t\t\t\t\tif (sy == -1 || (ty = tys[cy++]) >= 0 && ty <= 1) {","\t\t\t\t\t\tif (sx == -1) tx = ty;","\t\t\t\t\t\telse if (sy == -1) ty = tx;","\t\t\t\t\t\tif (Math.abs(tx - ty) < tolerance)","\t\t\t\t\t\t\treturn (tx + ty) * 0.5;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (sx == -1)","\t\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\treturn null;","\t},","","\tgetPart: function(v, from, to) {","\t\tif (from > 0)","\t\t\tv = Curve.subdivide(v, from)[1];","\t\tif (to < 1)","\t\t\tv = Curve.subdivide(v, (to - from) / (1 - from))[0];","\t\treturn v;","\t},","","\tisLinear: function(v) {","\t\tvar isZero = Numerical.isZero;","\t\treturn isZero(v[0] - v[2]) && isZero(v[1] - v[3])","\t\t\t\t&& isZero(v[4] - v[6]) && isZero(v[5] - v[7]);","\t},","","\tisFlatEnough: function(v, tolerance) {","\t\tvar p1x = v[0], p1y = v[1],","\t\t\tc1x = v[2], c1y = v[3],","\t\t\tc2x = v[4], c2y = v[5],","\t\t\tp2x = v[6], p2y = v[7],","\t\t\tux = 3 * c1x - 2 * p1x - p2x,","\t\t\tuy = 3 * c1y - 2 * p1y - p2y,","\t\t\tvx = 3 * c2x - 2 * p2x - p1x,","\t\t\tvy = 3 * c2y - 2 * p2y - p1y;","\t\treturn Math.max(ux * ux, vx * vx) + Math.max(uy * uy, vy * vy)","\t\t\t\t< 10 * tolerance * tolerance;","\t},","","\tgetArea: function(v) {","\t\tvar p1x = v[0], p1y = v[1],","\t\t\tc1x = v[2], c1y = v[3],","\t\t\tc2x = v[4], c2y = v[5],","\t\t\tp2x = v[6], p2y = v[7];","\t\treturn (  3.0 * c1y * p1x - 1.5 * c1y * c2x","\t\t\t\t- 1.5 * c1y * p2x - 3.0 * p1y * c1x","\t\t\t\t- 1.5 * p1y * c2x - 0.5 * p1y * p2x","\t\t\t\t+ 1.5 * c2y * p1x + 1.5 * c2y * c1x","\t\t\t\t- 3.0 * c2y * p2x + 0.5 * p2y * p1x","\t\t\t\t+ 1.5 * p2y * c1x + 3.0 * p2y * c2x) / 10;","\t},","","\tgetEdgeSum: function(v) {","\t\treturn\t  (v[0] - v[2]) * (v[3] + v[1])","\t\t\t\t+ (v[2] - v[4]) * (v[5] + v[3])","\t\t\t\t+ (v[4] - v[6]) * (v[7] + v[5]);","\t},","","\tgetBounds: function(v) {","\t\tvar min = v.slice(0, 2),","\t\t\tmax = min.slice(),","\t\t\troots = [0, 0];","\t\tfor (var i = 0; i < 2; i++)","\t\t\tCurve._addBounds(v[i], v[i + 2], v[i + 4], v[i + 6],","\t\t\t\t\ti, 0, min, max, roots);","\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);","\t},","","\t_addBounds: function(v0, v1, v2, v3, coord, padding, min, max, roots) {","\t\tfunction add(value, padding) {","\t\t\tvar left = value - padding,","\t\t\t\tright = value + padding;","\t\t\tif (left < min[coord])","\t\t\t\tmin[coord] = left;","\t\t\tif (right > max[coord])","\t\t\t\tmax[coord] = right;","\t\t}","\t\tvar a = 3 * (v1 - v2) - v0 + v3,","\t\t\tb = 2 * (v0 + v2) - 4 * v1,","\t\t\tc = v1 - v0,","\t\t\tcount = Numerical.solveQuadratic(a, b, c, roots),","\t\t\ttMin = 0.000001,","\t\t\ttMax = 1 - tMin;","\t\tadd(v3, 0);","\t\tfor (var i = 0; i < count; i++) {","\t\t\tvar t = roots[i],","\t\t\t\tu = 1 - t;","\t\t\tif (tMin < t && t < tMax)","\t\t\t\tadd(u * u * u * v0","\t\t\t\t\t+ 3 * u * u * t * v1","\t\t\t\t\t+ 3 * u * t * t * v2","\t\t\t\t\t+ t * t * t * v3,","\t\t\t\t\tpadding);","\t\t}","\t}","}}, Base.each(['getBounds', 'getStrokeBounds', 'getHandleBounds', 'getRoughBounds'],","\tfunction(name) {","\t\tthis[name] = function() {","\t\t\tif (!this._bounds)","\t\t\t\tthis._bounds = {};","\t\t\tvar bounds = this._bounds[name];","\t\t\tif (!bounds) {","\t\t\t\tbounds = this._bounds[name] = Path[name]([this._segment1,","\t\t\t\t\t\tthis._segment2], false, this._path.getStyle());","\t\t\t}","\t\t\treturn bounds.clone();","\t\t};","\t},","{","","}), Base.each(['getPoint', 'getTangent', 'getNormal', 'getCurvature'],","\tfunction(name, index) {","\t\tthis[name + 'At'] = function(offset, isParameter) {","\t\t\tvar values = this.getValues();","\t\t\treturn Curve.evaluate(values, isParameter","\t\t\t\t\t? offset : Curve.getParameterAt(values, offset, 0), index);","\t\t};","\t\tthis[name] = function(parameter) {","\t\t\treturn Curve.evaluate(this.getValues(), parameter, index);","\t\t};","\t},","{","\tbeans: false,","","\tgetParameterAt: function(offset, start) {","\t\treturn Curve.getParameterAt(this.getValues(), offset, start);","\t},","","\tgetParameterOf: function() {","\t\tvar point = Point.read(arguments);","\t\treturn Curve.getParameterOf(this.getValues(), point.x, point.y);","\t},","","\tgetLocationAt: function(offset, isParameter) {","\t\tif (!isParameter)","\t\t\toffset = this.getParameterAt(offset);","\t\treturn offset >= 0 && offset <= 1 && new CurveLocation(this, offset);","\t},","","\tgetLocationOf: function() {","\t\treturn this.getLocationAt(this.getParameterOf(Point.read(arguments)),","\t\t\t\ttrue);","\t},","","\tgetOffsetOf: function() {","\t\tvar loc = this.getLocationOf.apply(this, arguments);","\t\treturn loc ? loc.getOffset() : null;","\t},","","\tgetNearestLocation: function() {","\t\tvar point = Point.read(arguments),","\t\t\tvalues = this.getValues(),","\t\t\tcount = 100,","\t\t\tminDist = Infinity,","\t\t\tminT = 0;","","\t\tfunction refine(t) {","\t\t\tif (t >= 0 && t <= 1) {","\t\t\t\tvar dist = point.getDistance(","\t\t\t\t\t\tCurve.evaluate(values, t, 0), true);","\t\t\t\tif (dist < minDist) {","\t\t\t\t\tminDist = dist;","\t\t\t\t\tminT = t;","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfor (var i = 0; i <= count; i++)","\t\t\trefine(i / count);","","\t\tvar step = 1 / (count * 2);","\t\twhile (step > 0.000001) {","\t\t\tif (!refine(minT - step) && !refine(minT + step))","\t\t\t\tstep /= 2;","\t\t}","\t\tvar pt = Curve.evaluate(values, minT, 0);","\t\treturn new CurveLocation(this, minT, pt, null, null, null,","\t\t\t\tpoint.getDistance(pt));","\t},","","\tgetNearestPoint: function() {","\t\treturn this.getNearestLocation.apply(this, arguments).getPoint();","\t}","","}),","new function() {","","\tfunction getLengthIntegrand(v) {","\t\tvar p1x = v[0], p1y = v[1],","\t\t\tc1x = v[2], c1y = v[3],","\t\t\tc2x = v[4], c2y = v[5],","\t\t\tp2x = v[6], p2y = v[7],","","\t\t\tax = 9 * (c1x - c2x) + 3 * (p2x - p1x),","\t\t\tbx = 6 * (p1x + c2x) - 12 * c1x,","\t\t\tcx = 3 * (c1x - p1x),","","\t\t\tay = 9 * (c1y - c2y) + 3 * (p2y - p1y),","\t\t\tby = 6 * (p1y + c2y) - 12 * c1y,","\t\t\tcy = 3 * (c1y - p1y);","","\t\treturn function(t) {","\t\t\tvar dx = (ax * t + bx) * t + cx,","\t\t\t\tdy = (ay * t + by) * t + cy;","\t\t\treturn Math.sqrt(dx * dx + dy * dy);","\t\t};","\t}","","\tfunction getIterations(a, b) {","\t\treturn Math.max(2, Math.min(16, Math.ceil(Math.abs(b - a) * 32)));","\t}","","\treturn {","\t\tstatics: true,","","\t\tgetLength: function(v, a, b) {","\t\t\tif (a === undefined)","\t\t\t\ta = 0;","\t\t\tif (b === undefined)","\t\t\t\tb = 1;","\t\t\tvar isZero = Numerical.isZero;","\t\t\tif (a === 0 && b === 1","\t\t\t\t\t&& isZero(v[0] - v[2]) && isZero(v[1] - v[3])","\t\t\t\t\t&& isZero(v[6] - v[4]) && isZero(v[7] - v[5])) {","\t\t\t\tvar dx = v[6] - v[0],","\t\t\t\t\tdy = v[7] - v[1];","\t\t\t\treturn Math.sqrt(dx * dx + dy * dy);","\t\t\t}","\t\t\tvar ds = getLengthIntegrand(v);","\t\t\treturn Numerical.integrate(ds, a, b, getIterations(a, b));","\t\t},","","\t\tgetParameterAt: function(v, offset, start) {","\t\t\tif (start === undefined)","\t\t\t\tstart = offset < 0 ? 1 : 0","\t\t\tif (offset === 0)","\t\t\t\treturn start;","\t\t\tvar forward = offset > 0,","\t\t\t\ta = forward ? start : 0,","\t\t\t\tb = forward ? 1 : start,","\t\t\t\tds = getLengthIntegrand(v),","\t\t\t\trangeLength = Numerical.integrate(ds, a, b,","\t\t\t\t\t\tgetIterations(a, b));","\t\t\tif (Math.abs(offset) >= rangeLength)","\t\t\t\treturn forward ? b : a;","\t\t\tvar guess = offset / rangeLength,","\t\t\t\tlength = 0;","\t\t\tfunction f(t) {","\t\t\t\tlength += Numerical.integrate(ds, start, t,","\t\t\t\t\t\tgetIterations(start, t));","\t\t\t\tstart = t;","\t\t\t\treturn length - offset;","\t\t\t}","\t\t\treturn Numerical.findRoot(f, ds, start + guess, a, b, 16,","\t\t\t\t\t0.000001);","\t\t}","\t};","}, new function() {","\tfunction addLocation(locations, include, curve1, t1, point1, curve2, t2,","\t\t\tpoint2) {","\t\tvar loc = new CurveLocation(curve1, t1, point1, curve2, t2, point2);","\t\tif (!include || include(loc))","\t\t\tlocations.push(loc);","\t}","","\tfunction addCurveIntersections(v1, v2, curve1, curve2, locations, include,","\t\t\ttMin, tMax, uMin, uMax, oldTDiff, reverse, recursion) {","\t\tif (recursion > 32)","\t\t\treturn;","\t\tvar q0x = v2[0], q0y = v2[1], q3x = v2[6], q3y = v2[7],","\t\t\ttolerance = 0.000001,","\t\t\tgetSignedDistance = Line.getSignedDistance,","\t\t\td1 = getSignedDistance(q0x, q0y, q3x, q3y, v2[2], v2[3]) || 0,","\t\t\td2 = getSignedDistance(q0x, q0y, q3x, q3y, v2[4], v2[5]) || 0,","\t\t\tfactor = d1 * d2 > 0 ? 3 / 4 : 4 / 9,","\t\t\tdMin = factor * Math.min(0, d1, d2),","\t\t\tdMax = factor * Math.max(0, d1, d2),","\t\t\tdp0 = getSignedDistance(q0x, q0y, q3x, q3y, v1[0], v1[1]),","\t\t\tdp1 = getSignedDistance(q0x, q0y, q3x, q3y, v1[2], v1[3]),","\t\t\tdp2 = getSignedDistance(q0x, q0y, q3x, q3y, v1[4], v1[5]),","\t\t\tdp3 = getSignedDistance(q0x, q0y, q3x, q3y, v1[6], v1[7]),","\t\t\ttMinNew, tMaxNew, tDiff;","\t\tif (q0x === q3x && uMax - uMin <= tolerance && recursion > 3) {","\t\t\ttMaxNew = tMinNew = (tMax + tMin) / 2;","\t\t\ttDiff = 0;","\t\t} else {","\t\t\tvar hull = getConvexHull(dp0, dp1, dp2, dp3),","\t\t\t\ttop = hull[0],","\t\t\t\tbottom = hull[1],","\t\t\t\ttMinClip, tMaxClip;","\t\t\ttMinClip = clipConvexHull(top, bottom, dMin, dMax);","\t\t\ttop.reverse();","\t\t\tbottom.reverse();","\t\t\ttMaxClip = clipConvexHull(top, bottom, dMin, dMax);","\t\t\tif (tMinClip == null || tMaxClip == null)","\t\t\t\treturn;","\t\t\tv1 = Curve.getPart(v1, tMinClip, tMaxClip);","\t\t\ttDiff = tMaxClip - tMinClip;","\t\t\ttMinNew = tMax * tMinClip + tMin * (1 - tMinClip);","\t\t\ttMaxNew = tMax * tMaxClip + tMin * (1 - tMaxClip);","\t\t}","\t\tif (oldTDiff > 0.5 && tDiff > 0.5) {","\t\t\tif (tMaxNew - tMinNew > uMax - uMin) {","\t\t\t\tvar parts = Curve.subdivide(v1, 0.5),","\t\t\t\t\tt = tMinNew + (tMaxNew - tMinNew) / 2;","\t\t\t\taddCurveIntersections(","\t\t\t\t\tv2, parts[0], curve2, curve1, locations, include,","\t\t\t\t\tuMin, uMax, tMinNew, t, tDiff, !reverse, ++recursion);","\t\t\t\taddCurveIntersections(","\t\t\t\t\tv2, parts[1], curve2, curve1, locations, include,","\t\t\t\t\tuMin, uMax, t, tMaxNew, tDiff, !reverse, recursion);","\t\t\t} else {","\t\t\t\tvar parts = Curve.subdivide(v2, 0.5),","\t\t\t\t\tt = uMin + (uMax - uMin) / 2;","\t\t\t\taddCurveIntersections(","\t\t\t\t\tparts[0], v1, curve2, curve1, locations, include,","\t\t\t\t\tuMin, t, tMinNew, tMaxNew, tDiff, !reverse, ++recursion);","\t\t\t\taddCurveIntersections(","\t\t\t\t\tparts[1], v1, curve2, curve1, locations, include,","\t\t\t\t\tt, uMax, tMinNew, tMaxNew, tDiff, !reverse, recursion);","\t\t\t}","\t\t} else if (Math.max(uMax - uMin, tMaxNew - tMinNew) < tolerance) {","\t\t\tvar t1 = tMinNew + (tMaxNew - tMinNew) / 2,","\t\t\t\tt2 = uMin + (uMax - uMin) / 2;","\t\t\tif (reverse) {","\t\t\t\taddLocation(locations, include,","\t\t\t\t\t\tcurve2, t2, Curve.evaluate(v2, t2, 0),","\t\t\t\t\t\tcurve1, t1, Curve.evaluate(v1, t1, 0));","\t\t\t} else {","\t\t\t\taddLocation(locations, include,","\t\t\t\t\t\tcurve1, t1, Curve.evaluate(v1, t1, 0),","\t\t\t\t\t\tcurve2, t2, Curve.evaluate(v2, t2, 0));","\t\t\t}","\t\t} else if (tDiff > 0) {","\t\t\taddCurveIntersections(v2, v1, curve2, curve1, locations, include,","\t\t\t\t\tuMin, uMax, tMinNew, tMaxNew, tDiff, !reverse, ++recursion);","\t\t}","\t}","","\tfunction getConvexHull(dq0, dq1, dq2, dq3) {","\t\tvar p0 = [ 0, dq0 ],","\t\t\tp1 = [ 1 / 3, dq1 ],","\t\t\tp2 = [ 2 / 3, dq2 ],","\t\t\tp3 = [ 1, dq3 ],","\t\t\tgetSignedDistance = Line.getSignedDistance,","\t\t\tdist1 = getSignedDistance(0, dq0, 1, dq3, 1 / 3, dq1),","\t\t\tdist2 = getSignedDistance(0, dq0, 1, dq3, 2 / 3, dq2),","\t\t\tflip = false,","\t\t\thull;","\t\tif (dist1 * dist2 < 0) {","\t\t\thull = [[p0, p1, p3], [p0, p2, p3]];","\t\t\tflip = dist1 < 0;","\t\t} else {","\t\t\tvar pmax, cross = 0,","\t\t\t\tdistZero = dist1 === 0 || dist2 === 0;","\t\t\tif (Math.abs(dist1) > Math.abs(dist2)) {","\t\t\t\tpmax = p1;","\t\t\t\tcross = (dq3 - dq2 - (dq3 - dq0) / 3)","\t\t\t\t\t\t* (2 * (dq3 - dq2) - dq3 + dq1) / 3;","\t\t\t} else {","\t\t\t\tpmax = p2;","\t\t\t\tcross = (dq1 - dq0 + (dq0 - dq3) / 3)","\t\t\t\t\t\t* (-2 * (dq0 - dq1) + dq0 - dq2) / 3;","\t\t\t}","\t\t\thull = cross < 0 || distZero","\t\t\t\t\t? [[p0, pmax, p3], [p0, p3]]","\t\t\t\t\t: [[p0, p1, p2, p3], [p0, p3]];","\t\t\tflip = dist1 ? dist1 < 0 : dist2 < 0;","\t\t}","\t\treturn flip ? hull.reverse() : hull;","\t}","","\tfunction clipConvexHull(hullTop, hullBottom, dMin, dMax) {","\t\tif (hullTop[0][1] < dMin) {","\t\t\treturn clipConvexHullPart(hullTop, true, dMin);","\t\t} else if (hullBottom[0][1] > dMax) {","\t\t\treturn clipConvexHullPart(hullBottom, false, dMax);","\t\t} else {","\t\t\treturn hullTop[0][0];","\t\t}","\t}","","\tfunction clipConvexHullPart(part, top, threshold) {","\t\tvar px = part[0][0],","\t\t\tpy = part[0][1];","\t\tfor (var i = 1, l = part.length; i < l; i++) {","\t\t\tvar qx = part[i][0],","\t\t\t\tqy = part[i][1];","\t\t\tif (top ? qy >= threshold : qy <= threshold)","\t\t\t\treturn px + (threshold - py) * (qx - px) / (qy - py);","\t\t\tpx = qx;","\t\t\tpy = qy;","\t\t}","\t\treturn null;","\t}","","\tfunction addCurveLineIntersections(v1, v2, curve1, curve2, locations,","\t\t\tinclude) {","\t\tvar flip = Curve.isLinear(v1),","\t\t\tvc = flip ? v2 : v1,","\t\t\tvl = flip ? v1 : v2,","\t\t\tlx1 = vl[0], ly1 = vl[1],","\t\t\tlx2 = vl[6], ly2 = vl[7],","\t\t\tldx = lx2 - lx1,","\t\t\tldy = ly2 - ly1,","\t\t\tangle = Math.atan2(-ldy, ldx),","\t\t\tsin = Math.sin(angle),","\t\t\tcos = Math.cos(angle),","\t\t\trlx2 = ldx * cos - ldy * sin,","\t\t\trvl = [0, 0, 0, 0, rlx2, 0, rlx2, 0],","\t\t\trvc = [];","\t\tfor(var i = 0; i < 8; i += 2) {","\t\t\tvar x = vc[i] - lx1,","\t\t\t\ty = vc[i + 1] - ly1;","\t\t\trvc.push(","\t\t\t\tx * cos - y * sin,","\t\t\t\ty * cos + x * sin);","\t\t}","\t\tvar roots = [],","\t\t\tcount = Curve.solveCubic(rvc, 1, 0, roots, 0, 1);","\t\tfor (var i = 0; i < count; i++) {","\t\t\tvar tc = roots[i],","\t\t\t\tx = Curve.evaluate(rvc, tc, 0).x;","\t\t\tif (x >= 0 && x <= rlx2) {","\t\t\t\tvar tl = Curve.getParameterOf(rvl, x, 0),","\t\t\t\t\tt1 = flip ? tl : tc,","\t\t\t\t\tt2 = flip ? tc : tl;","\t\t\t\taddLocation(locations, include,","\t\t\t\t\t\tcurve1, t1, Curve.evaluate(v1, t1, 0),","\t\t\t\t\t\tcurve2, t2, Curve.evaluate(v2, t2, 0));","\t\t\t}","\t\t}","\t}","","\tfunction addLineIntersection(v1, v2, curve1, curve2, locations, include) {","\t\tvar point = Line.intersect(","\t\t\t\tv1[0], v1[1], v1[6], v1[7],","\t\t\t\tv2[0], v2[1], v2[6], v2[7]);","\t\tif (point) {","\t\t\tvar x = point.x,","\t\t\t\ty = point.y;","\t\t\taddLocation(locations, include,","\t\t\t\t\tcurve1, Curve.getParameterOf(v1, x, y), point,","\t\t\t\t\tcurve2, Curve.getParameterOf(v2, x, y), point);","\t\t}","\t}","","\treturn { statics: {","\t\tgetIntersections: function(v1, v2, c1, c2, locations, include) {","\t\t\tvar linear1 = Curve.isLinear(v1),","\t\t\t\tlinear2 = Curve.isLinear(v2),","\t\t\t\tc1p1 = c1.getPoint1(),","\t\t\t\tc1p2 = c1.getPoint2(),","\t\t\t\tc2p1 = c2.getPoint1(),","\t\t\t\tc2p2 = c2.getPoint2(),","\t\t\t\ttolerance = 0.000001;","\t\t\tif (c1p1.isClose(c2p1, tolerance))","\t\t\t\taddLocation(locations, include, c1, 0, c1p1, c2, 0, c1p1);","\t\t\tif (c1p1.isClose(c2p2, tolerance))","\t\t\t\taddLocation(locations, include, c1, 0, c1p1, c2, 1, c1p1);","\t\t\t(linear1 && linear2","\t\t\t\t? addLineIntersection","\t\t\t\t: linear1 || linear2","\t\t\t\t\t? addCurveLineIntersections","\t\t\t\t\t: addCurveIntersections)(","\t\t\t\t\t\tv1, v2, c1, c2, locations, include,","\t\t\t\t\t\t0, 1, 0, 1, 0, false, 0);","\t\t\tif (c1p2.isClose(c2p1, tolerance))","\t\t\t\taddLocation(locations, include, c1, 1, c1p2, c2, 0, c1p2);","\t\t\tif (c1p2.isClose(c2p2, tolerance))","\t\t\t\taddLocation(locations, include, c1, 1, c1p2, c2, 1, c1p2);","\t\t\treturn locations;","\t\t},","","\t\tfilterIntersections: function(locations, _expand) {","\t\t\tvar last = locations.length - 1,","\t\t\t\ttMax = 1 - 0.000001;","\t\t\tfor (var i = last; i >= 0; i--) {","\t\t\t\tvar loc = locations[i],","\t\t\t\t\tnext = loc._curve.getNext(),","\t\t\t\t\tnext2 = loc._curve2.getNext();","\t\t\t\tif (next && loc._parameter >= tMax) {","\t\t\t\t\tloc._parameter = 0;","\t\t\t\t\tloc._curve = next;","\t\t\t\t}","\t\t\t\tif (next2 && loc._parameter2 >= tMax) {","\t\t\t\t\tloc._parameter2 = 0;","\t\t\t\t\tloc._curve2 = next2;","\t\t\t\t}","\t\t\t}","","\t\t\tfunction compare(loc1, loc2) {","\t\t\t\tvar path1 = loc1.getPath(),","\t\t\t\t\tpath2 = loc2.getPath();","\t\t\t\treturn path1 === path2","\t\t\t\t\t\t? (loc1.getIndex() + loc1.getParameter())","\t\t\t\t\t\t\t\t- (loc2.getIndex() + loc2.getParameter())","\t\t\t\t\t\t: path1._id - path2._id;","\t\t\t}","","\t\t\tif (last > 0) {","\t\t\t\tlocations.sort(compare);","\t\t\t\tfor (var i = last; i > 0; i--) {","\t\t\t\t\tif (locations[i].equals(locations[i - 1])) {","\t\t\t\t\t\tlocations.splice(i, 1);","\t\t\t\t\t\tlast--;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif (_expand) {","\t\t\t\tfor (var i = last; i >= 0; i--)","\t\t\t\t\tlocations.push(locations[i].getIntersection());","\t\t\t\tlocations.sort(compare);","\t\t\t}","\t\t\treturn locations;","\t\t}","\t}};","});","","var CurveLocation = Base.extend({","\t_class: 'CurveLocation',","\tbeans: true,","","\tinitialize: function CurveLocation(curve, parameter, point, _curve2,","\t\t\t_parameter2, _point2, _distance) {","\t\tthis._id = CurveLocation._id = (CurveLocation._id || 0) + 1;","\t\tthis._curve = curve;","\t\tthis._segment1 = curve._segment1;","\t\tthis._segment2 = curve._segment2;","\t\tthis._parameter = parameter;","\t\tthis._point = point;","\t\tthis._curve2 = _curve2;","\t\tthis._parameter2 = _parameter2;","\t\tthis._point2 = _point2;","\t\tthis._distance = _distance;","\t},","","\tgetSegment: function(_preferFirst) {","\t\tif (!this._segment) {","\t\t\tvar curve = this.getCurve(),","\t\t\t\tparameter = this.getParameter();","\t\t\tif (parameter === 1) {","\t\t\t\tthis._segment = curve._segment2;","\t\t\t} else if (parameter === 0 || _preferFirst) {","\t\t\t\tthis._segment = curve._segment1;","\t\t\t} else if (parameter == null) {","\t\t\t\treturn null;","\t\t\t} else {","\t\t\t\tthis._segment = curve.getPartLength(0, parameter)","\t\t\t\t\t< curve.getPartLength(parameter, 1)","\t\t\t\t\t\t? curve._segment1","\t\t\t\t\t\t: curve._segment2;","\t\t\t}","\t\t}","\t\treturn this._segment;","\t},","","\tgetCurve: function(_uncached) {","\t\tif (!this._curve || _uncached) {","\t\t\tthis._curve = this._segment1.getCurve();","\t\t\tif (this._curve.getParameterOf(this._point) == null)","\t\t\t\tthis._curve = this._segment2.getPrevious().getCurve();","\t\t}","\t\treturn this._curve;","\t},","","\tgetIntersection: function() {","\t\tvar intersection = this._intersection;","\t\tif (!intersection && this._curve2) {","\t\t\tvar param = this._parameter2;","\t\t\tthis._intersection = intersection = new CurveLocation(","\t\t\t\t\tthis._curve2, param, this._point2 || this._point, this);","\t\t\tintersection._intersection = this;","\t\t}","\t\treturn intersection;","\t},","","\tgetPath: function() {","\t\tvar curve = this.getCurve();","\t\treturn curve && curve._path;","\t},","","\tgetIndex: function() {","\t\tvar curve = this.getCurve();","\t\treturn curve && curve.getIndex();","\t},","","\tgetOffset: function() {","\t\tvar path = this.getPath();","\t\treturn path ? path._getOffset(this) : this.getCurveOffset();","\t},","","\tgetCurveOffset: function() {","\t\tvar curve = this.getCurve(),","\t\t\tparameter = this.getParameter();","\t\treturn parameter != null && curve && curve.getPartLength(0, parameter);","\t},","","\tgetParameter: function(_uncached) {","\t\tif ((this._parameter == null || _uncached) && this._point) {","\t\t\tvar curve = this.getCurve(_uncached);","\t\t\tthis._parameter = curve && curve.getParameterOf(this._point);","\t\t}","\t\treturn this._parameter;","\t},","","\tgetPoint: function(_uncached) {","\t\tif ((!this._point || _uncached) && this._parameter != null) {","\t\t\tvar curve = this.getCurve(_uncached);","\t\t\tthis._point = curve && curve.getPointAt(this._parameter, true);","\t\t}","\t\treturn this._point;","\t},","","\tgetDistance: function() {","\t\treturn this._distance;","\t},","","\tdivide: function() {","\t\tvar curve = this.getCurve(true);","\t\treturn curve && curve.divide(this.getParameter(true), true);","\t},","","\tsplit: function() {","\t\tvar curve = this.getCurve(true);","\t\treturn curve && curve.split(this.getParameter(true), true);","\t},","","\tequals: function(loc) {","\t\tvar abs = Math.abs,","\t\t\ttolerance = 0.000001;","\t\treturn this === loc","\t\t\t\t|| loc","\t\t\t\t\t&& this._curve === loc._curve","\t\t\t\t\t&& this._curve2 === loc._curve2","\t\t\t\t\t&& abs(this._parameter - loc._parameter) <= tolerance","\t\t\t\t\t&& abs(this._parameter2 - loc._parameter2) <= tolerance","\t\t\t\t|| false;","\t},","","\ttoString: function() {","\t\tvar parts = [],","\t\t\tpoint = this.getPoint(),","\t\t\tf = Formatter.instance;","\t\tif (point)","\t\t\tparts.push('point: ' + point);","\t\tvar index = this.getIndex();","\t\tif (index != null)","\t\t\tparts.push('index: ' + index);","\t\tvar parameter = this.getParameter();","\t\tif (parameter != null)","\t\t\tparts.push('parameter: ' + f.number(parameter));","\t\tif (this._distance != null)","\t\t\tparts.push('distance: ' + f.number(this._distance));","\t\treturn '{ ' + parts.join(', ') + ' }';","\t}","}, Base.each(['getTangent', 'getNormal', 'getCurvature'], function(name) {","\tvar get = name + 'At';","\tthis[name] = function() {","\t\tvar parameter = this.getParameter(),","\t\t\tcurve = this.getCurve();","\t\treturn parameter != null && curve && curve[get](parameter, true);","\t};","}, {}));","","var PathItem = Item.extend({","\t_class: 'PathItem',","","\tinitialize: function PathItem() {","\t},","","\tgetIntersections: function(path, _matrix, _expand) {","\t\tif (this === path)","\t\t\tpath = null;","\t\tvar locations = [],","\t\t\tcurves1 = this.getCurves(),","\t\t\tcurves2 = path ? path.getCurves() : curves1,","\t\t\tmatrix1 = this._matrix.orNullIfIdentity(),","\t\t\tmatrix2 = path ? (_matrix || path._matrix).orNullIfIdentity()","\t\t\t\t: matrix1,","\t\t\tlength1 = curves1.length,","\t\t\tlength2 = path ? curves2.length : length1,","\t\t\tvalues2 = [],","\t\t\ttMin = 0.000001,","\t\t\ttMax = 1 - tMin;","\t\tif (path && !this.getBounds(matrix1).touches(path.getBounds(matrix2)))","\t\t\treturn [];","\t\tfor (var i = 0; i < length2; i++)","\t\t\tvalues2[i] = curves2[i].getValues(matrix2);","\t\tfor (var i = 0; i < length1; i++) {","\t\t\tvar curve1 = curves1[i],","\t\t\t\tvalues1 = path ? curve1.getValues(matrix1) : values2[i];","\t\t\tif (!path) {","\t\t\t\tvar seg1 = curve1.getSegment1(),","\t\t\t\t\tseg2 = curve1.getSegment2(),","\t\t\t\t\th1 = seg1._handleOut,","\t\t\t\t\th2 = seg2._handleIn;","\t\t\t\tif (new Line(seg1._point.subtract(h1), h1.multiply(2), true)","\t\t\t\t\t\t.intersect(new Line(seg2._point.subtract(h2),","\t\t\t\t\t\th2.multiply(2), true), false)) {","\t\t\t\t\tvar parts = Curve.subdivide(values1);","\t\t\t\t\tCurve.getIntersections(","\t\t\t\t\t\tparts[0], parts[1], curve1, curve1, locations,","\t\t\t\t\t\tfunction(loc) {","\t\t\t\t\t\t\tif (loc._parameter <= tMax) {","\t\t\t\t\t\t\t\tloc._parameter /= 2;","\t\t\t\t\t\t\t\tloc._parameter2 = 0.5 + loc._parameter2 / 2;","\t\t\t\t\t\t\t\treturn true;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t);","\t\t\t\t}","\t\t\t}","\t\t\tfor (var j = path ? 0 : i + 1; j < length2; j++) {","\t\t\t\tCurve.getIntersections(","\t\t\t\t\tvalues1, values2[j], curve1, curves2[j], locations,","\t\t\t\t\t!path && (j === i + 1 || j === length2 - 1 && i === 0)","\t\t\t\t\t\t&& function(loc) {","\t\t\t\t\t\t\tvar t = loc._parameter;","\t\t\t\t\t\t\treturn t >= tMin && t <= tMax;","\t\t\t\t\t\t}","\t\t\t\t);","\t\t\t}","\t\t}","\t\treturn Curve.filterIntersections(locations, _expand);","\t},","","\t_asPathItem: function() {","\t\treturn this;","\t},","","\tsetPathData: function(data) {","","\t\tvar parts = data.match(/[mlhvcsqtaz][^mlhvcsqtaz]*/ig),","\t\t\tcoords,","\t\t\trelative = false,","\t\t\tprevious,","\t\t\tcontrol,","\t\t\tcurrent = new Point(),","\t\t\tstart = new Point();","","\t\tfunction getCoord(index, coord) {","\t\t\tvar val = +coords[index];","\t\t\tif (relative)","\t\t\t\tval += current[coord];","\t\t\treturn val;","\t\t}","","\t\tfunction getPoint(index) {","\t\t\treturn new Point(","\t\t\t\tgetCoord(index, 'x'),","\t\t\t\tgetCoord(index + 1, 'y')","\t\t\t);","\t\t}","","\t\tthis.clear();","","\t\tfor (var i = 0, l = parts && parts.length; i < l; i++) {","\t\t\tvar part = parts[i],","\t\t\t\tcommand = part[0],","\t\t\t\tlower = command.toLowerCase();","\t\t\tcoords = part.match(/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g);","\t\t\tvar length = coords && coords.length;","\t\t\trelative = command === lower;","\t\t\tif (previous === 'z' && !/[mz]/.test(lower))","\t\t\t\tthis.moveTo(current = start);","\t\t\tswitch (lower) {","\t\t\tcase 'm':","\t\t\tcase 'l':","\t\t\t\tvar move = lower === 'm';","\t\t\t\tif (move && previous && previous !== 'z')","\t\t\t\t\tthis.closePath(true);","\t\t\t\tfor (var j = 0; j < length; j += 2)","\t\t\t\t\tthis[j === 0 && move ? 'moveTo' : 'lineTo'](","\t\t\t\t\t\t\tcurrent = getPoint(j));","\t\t\t\tcontrol = current;","\t\t\t\tif (move)","\t\t\t\t\tstart = current;","\t\t\t\tbreak;","\t\t\tcase 'h':","\t\t\tcase 'v':","\t\t\t\tvar coord = lower === 'h' ? 'x' : 'y';","\t\t\t\tfor (var j = 0; j < length; j++) {","\t\t\t\t\tcurrent[coord] = getCoord(j, coord);","\t\t\t\t\tthis.lineTo(current);","\t\t\t\t}","\t\t\t\tcontrol = current;","\t\t\t\tbreak;","\t\t\tcase 'c':","\t\t\t\tfor (var j = 0; j < length; j += 6) {","\t\t\t\t\tthis.cubicCurveTo(","\t\t\t\t\t\t\tgetPoint(j),","\t\t\t\t\t\t\tcontrol = getPoint(j + 2),","\t\t\t\t\t\t\tcurrent = getPoint(j + 4));","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 's':","\t\t\t\tfor (var j = 0; j < length; j += 4) {","\t\t\t\t\tthis.cubicCurveTo(","\t\t\t\t\t\t\t/[cs]/.test(previous)","\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)","\t\t\t\t\t\t\t\t\t: current,","\t\t\t\t\t\t\tcontrol = getPoint(j),","\t\t\t\t\t\t\tcurrent = getPoint(j + 2));","\t\t\t\t\tprevious = lower;","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'q':","\t\t\t\tfor (var j = 0; j < length; j += 4) {","\t\t\t\t\tthis.quadraticCurveTo(","\t\t\t\t\t\t\tcontrol = getPoint(j),","\t\t\t\t\t\t\tcurrent = getPoint(j + 2));","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 't':","\t\t\t\tfor (var j = 0; j < length; j += 2) {","\t\t\t\t\tthis.quadraticCurveTo(","\t\t\t\t\t\t\tcontrol = (/[qt]/.test(previous)","\t\t\t\t\t\t\t\t\t? current.multiply(2).subtract(control)","\t\t\t\t\t\t\t\t\t: current),","\t\t\t\t\t\t\tcurrent = getPoint(j));","\t\t\t\t\tprevious = lower;","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'a':","\t\t\t\tfor (var j = 0; j < length; j += 7) {","\t\t\t\t\tthis.arcTo(current = getPoint(j + 5),","\t\t\t\t\t\t\tnew Size(+coords[j], +coords[j + 1]),","\t\t\t\t\t\t\t+coords[j + 2], +coords[j + 4], +coords[j + 3]);","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'z':","\t\t\t\tthis.closePath(true);","\t\t\t\tbreak;","\t\t\t}","\t\t\tprevious = lower;","\t\t}","\t},","","\t_canComposite: function() {","\t\treturn !(this.hasFill() && this.hasStroke());","\t},","","\t_contains: function(point) {","\t\tvar winding = this._getWinding(point, false, true);","\t\treturn !!(this.getWindingRule() === 'evenodd' ? winding & 1 : winding);","\t}","","});","","var Path = PathItem.extend({","\t_class: 'Path',","\t_serializeFields: {","\t\tsegments: [],","\t\tclosed: false","\t},","","\tinitialize: function Path(arg) {","\t\tthis._closed = false;","\t\tthis._segments = [];","\t\tvar segments = Array.isArray(arg)","\t\t\t? typeof arg[0] === 'object'","\t\t\t\t? arg","\t\t\t\t: arguments","\t\t\t: arg && (arg.size === undefined && (arg.x !== undefined","\t\t\t\t\t|| arg.point !== undefined))","\t\t\t\t? arguments","\t\t\t\t: null;","\t\tif (segments && segments.length > 0) {","\t\t\tthis.setSegments(segments);","\t\t} else {","\t\t\tthis._curves = undefined;","\t\t\tthis._selectedSegmentState = 0;","\t\t\tif (!segments && typeof arg === 'string') {","\t\t\t\tthis.setPathData(arg);","\t\t\t\targ = null;","\t\t\t}","\t\t}","\t\tthis._initialize(!segments && arg);","\t},","","\t_equals: function(item) {","\t\treturn this._closed === item._closed","\t\t\t\t&& Base.equals(this._segments, item._segments);","\t},","","\tclone: function(insert) {","\t\tvar copy = new Path(Item.NO_INSERT);","\t\tcopy.setSegments(this._segments);","\t\tcopy._closed = this._closed;","\t\tif (this._clockwise !== undefined)","\t\t\tcopy._clockwise = this._clockwise;","\t\treturn this._clone(copy, insert);","\t},","","\t_changed: function _changed(flags) {","\t\t_changed.base.call(this, flags);","\t\tif (flags & 8) {","\t\t\tvar parent = this._parent;","\t\t\tif (parent)","\t\t\t\tparent._currentPath = undefined;","\t\t\tthis._length = this._clockwise = undefined;","\t\t\tif (this._curves && !(flags & 16)) {","\t\t\t\tfor (var i = 0, l = this._curves.length; i < l; i++)","\t\t\t\t\tthis._curves[i]._changed();","\t\t\t}","\t\t\tthis._monoCurves = undefined;","\t\t} else if (flags & 32) {","\t\t\tthis._bounds = undefined;","\t\t}","\t},","","\tgetStyle: function() {","\t\tvar parent = this._parent;","\t\treturn (parent instanceof CompoundPath ? parent : this)._style;","\t},","","\tgetSegments: function() {","\t\treturn this._segments;","\t},","","\tsetSegments: function(segments) {","\t\tvar fullySelected = this.isFullySelected();","\t\tthis._segments.length = 0;","\t\tthis._selectedSegmentState = 0;","\t\tthis._curves = undefined;","\t\tif (segments && segments.length > 0)","\t\t\tthis._add(Segment.readAll(segments));","\t\tif (fullySelected)","\t\t\tthis.setFullySelected(true);","\t},","","\tgetFirstSegment: function() {","\t\treturn this._segments[0];","\t},","","\tgetLastSegment: function() {","\t\treturn this._segments[this._segments.length - 1];","\t},","","\tgetCurves: function() {","\t\tvar curves = this._curves,","\t\t\tsegments = this._segments;","\t\tif (!curves) {","\t\t\tvar length = this._countCurves();","\t\t\tcurves = this._curves = new Array(length);","\t\t\tfor (var i = 0; i < length; i++)","\t\t\t\tcurves[i] = new Curve(this, segments[i],","\t\t\t\t\tsegments[i + 1] || segments[0]);","\t\t}","\t\treturn curves;","\t},","","\tgetFirstCurve: function() {","\t\treturn this.getCurves()[0];","\t},","","\tgetLastCurve: function() {","\t\tvar curves = this.getCurves();","\t\treturn curves[curves.length - 1];","\t},","","\tisClosed: function() {","\t\treturn this._closed;","\t},","","\tsetClosed: function(closed) {","\t\tif (this._closed != (closed = !!closed)) {","\t\t\tthis._closed = closed;","\t\t\tif (this._curves) {","\t\t\t\tvar length = this._curves.length = this._countCurves();","\t\t\t\tif (closed)","\t\t\t\t\tthis._curves[length - 1] = new Curve(this,","\t\t\t\t\t\tthis._segments[length - 1], this._segments[0]);","\t\t\t}","\t\t\tthis._changed(25);","\t\t}","\t}","}, {","\tbeans: true,","","\tgetPathData: function(_matrix, _precision) {","\t\tvar segments = this._segments,","\t\t\tlength = segments.length,","\t\t\tf = new Formatter(_precision),","\t\t\tcoords = new Array(6),","\t\t\tfirst = true,","\t\t\tcurX, curY,","\t\t\tprevX, prevY,","\t\t\tinX, inY,","\t\t\toutX, outY,","\t\t\tparts = [];","","\t\tfunction addSegment(segment, skipLine) {","\t\t\tsegment._transformCoordinates(_matrix, coords, false);","\t\t\tcurX = coords[0];","\t\t\tcurY = coords[1];","\t\t\tif (first) {","\t\t\t\tparts.push('M' + f.pair(curX, curY));","\t\t\t\tfirst = false;","\t\t\t} else {","\t\t\t\tinX = coords[2];","\t\t\t\tinY = coords[3];","\t\t\t\tif (inX === curX && inY === curY","\t\t\t\t\t\t&& outX === prevX && outY === prevY) {","\t\t\t\t\tif (!skipLine)","\t\t\t\t\t\tparts.push('l' + f.pair(curX - prevX, curY - prevY));","\t\t\t\t} else {","\t\t\t\t\tparts.push('c' + f.pair(outX - prevX, outY - prevY)","\t\t\t\t\t\t\t+ ' ' + f.pair(inX - prevX, inY - prevY)","\t\t\t\t\t\t\t+ ' ' + f.pair(curX - prevX, curY - prevY));","\t\t\t\t}","\t\t\t}","\t\t\tprevX = curX;","\t\t\tprevY = curY;","\t\t\toutX = coords[4];","\t\t\toutY = coords[5];","\t\t}","","\t\tif (length === 0)","\t\t\treturn '';","","\t\tfor (var i = 0; i < length; i++)","\t\t\taddSegment(segments[i]);","\t\tif (this._closed && length > 0) {","\t\t\taddSegment(segments[0], true);","\t\t\tparts.push('z');","\t\t}","\t\treturn parts.join('');","\t}","}, {","","\tisEmpty: function() {","\t\treturn this._segments.length === 0;","\t},","","\tisPolygon: function() {","\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {","\t\t\tif (!this._segments[i].isLinear())","\t\t\t\treturn false;","\t\t}","\t\treturn true;","\t},","","\t_transformContent: function(matrix) {","\t\tvar coords = new Array(6);","\t\tfor (var i = 0, l = this._segments.length; i < l; i++)","\t\t\tthis._segments[i]._transformCoordinates(matrix, coords, true);","\t\treturn true;","\t},","","\t_add: function(segs, index) {","\t\tvar segments = this._segments,","\t\t\tcurves = this._curves,","\t\t\tamount = segs.length,","\t\t\tappend = index == null,","\t\t\tindex = append ? segments.length : index;","\t\tfor (var i = 0; i < amount; i++) {","\t\t\tvar segment = segs[i];","\t\t\tif (segment._path)","\t\t\t\tsegment = segs[i] = segment.clone();","\t\t\tsegment._path = this;","\t\t\tsegment._index = index + i;","\t\t\tif (segment._selectionState)","\t\t\t\tthis._updateSelection(segment, 0, segment._selectionState);","\t\t}","\t\tif (append) {","\t\t\tsegments.push.apply(segments, segs);","\t\t} else {","\t\t\tsegments.splice.apply(segments, [index, 0].concat(segs));","\t\t\tfor (var i = index + amount, l = segments.length; i < l; i++)","\t\t\t\tsegments[i]._index = i;","\t\t}","\t\tif (curves || segs._curves) {","\t\t\tif (!curves)","\t\t\t\tcurves = this._curves = [];","\t\t\tvar from = index > 0 ? index - 1 : index,","\t\t\t\tstart = from,","\t\t\t\tto = Math.min(from + amount, this._countCurves());","\t\t\tif (segs._curves) {","\t\t\t\tcurves.splice.apply(curves, [from, 0].concat(segs._curves));","\t\t\t\tstart += segs._curves.length;","\t\t\t}","\t\t\tfor (var i = start; i < to; i++)","\t\t\t\tcurves.splice(i, 0, new Curve(this, null, null));","\t\t\tthis._adjustCurves(from, to);","\t\t}","\t\tthis._changed(25);","\t\treturn segs;","\t},","","\t_adjustCurves: function(from, to) {","\t\tvar segments = this._segments,","\t\t\tcurves = this._curves,","\t\t\tcurve;","\t\tfor (var i = from; i < to; i++) {","\t\t\tcurve = curves[i];","\t\t\tcurve._path = this;","\t\t\tcurve._segment1 = segments[i];","\t\t\tcurve._segment2 = segments[i + 1] || segments[0];","\t\t\tcurve._changed();","\t\t}","\t\tif (curve = curves[this._closed && from === 0 ? segments.length - 1","\t\t\t\t: from - 1]) {","\t\t\tcurve._segment2 = segments[from] || segments[0];","\t\t\tcurve._changed();","\t\t}","\t\tif (curve = curves[to]) {","\t\t\tcurve._segment1 = segments[to];","\t\t\tcurve._changed();","\t\t}","\t},","","\t_countCurves: function() {","\t\tvar length = this._segments.length;","\t\treturn !this._closed && length > 0 ? length - 1 : length;","\t},","","\tadd: function(segment1 ) {","\t\treturn arguments.length > 1 && typeof segment1 !== 'number'","\t\t\t? this._add(Segment.readAll(arguments))","\t\t\t: this._add([ Segment.read(arguments) ])[0];","\t},","","\tinsert: function(index, segment1 ) {","\t\treturn arguments.length > 2 && typeof segment1 !== 'number'","\t\t\t? this._add(Segment.readAll(arguments, 1), index)","\t\t\t: this._add([ Segment.read(arguments, 1) ], index)[0];","\t},","","\taddSegment: function() {","\t\treturn this._add([ Segment.read(arguments) ])[0];","\t},","","\tinsertSegment: function(index ) {","\t\treturn this._add([ Segment.read(arguments, 1) ], index)[0];","\t},","","\taddSegments: function(segments) {","\t\treturn this._add(Segment.readAll(segments));","\t},","","\tinsertSegments: function(index, segments) {","\t\treturn this._add(Segment.readAll(segments), index);","\t},","","\tremoveSegment: function(index) {","\t\treturn this.removeSegments(index, index + 1)[0] || null;","\t},","","\tremoveSegments: function(from, to, _includeCurves) {","\t\tfrom = from || 0;","\t\tto = Base.pick(to, this._segments.length);","\t\tvar segments = this._segments,","\t\t\tcurves = this._curves,","\t\t\tcount = segments.length,","\t\t\tremoved = segments.splice(from, to - from),","\t\t\tamount = removed.length;","\t\tif (!amount)","\t\t\treturn removed;","\t\tfor (var i = 0; i < amount; i++) {","\t\t\tvar segment = removed[i];","\t\t\tif (segment._selectionState)","\t\t\t\tthis._updateSelection(segment, segment._selectionState, 0);","\t\t\tsegment._index = segment._path = null;","\t\t}","\t\tfor (var i = from, l = segments.length; i < l; i++)","\t\t\tsegments[i]._index = i;","\t\tif (curves) {","\t\t\tvar index = from > 0 && to === count + (this._closed ? 1 : 0)","\t\t\t\t\t? from - 1","\t\t\t\t\t: from,","\t\t\t\tcurves = curves.splice(index, amount);","\t\t\tif (_includeCurves)","\t\t\t\tremoved._curves = curves.slice(1);","\t\t\tthis._adjustCurves(index, index);","\t\t}","\t\tthis._changed(25);","\t\treturn removed;","\t},","","\tclear: '#removeSegments',","","\tgetLength: function() {","\t\tif (this._length == null) {","\t\t\tvar curves = this.getCurves();","\t\t\tthis._length = 0;","\t\t\tfor (var i = 0, l = curves.length; i < l; i++)","\t\t\t\tthis._length += curves[i].getLength();","\t\t}","\t\treturn this._length;","\t},","","\tgetArea: function() {","\t\tvar curves = this.getCurves();","\t\tvar area = 0;","\t\tfor (var i = 0, l = curves.length; i < l; i++)","\t\t\tarea += curves[i].getArea();","\t\treturn area;","\t},","","\tisFullySelected: function() {","\t\tvar length = this._segments.length;","\t\treturn this._selected && length > 0 && this._selectedSegmentState","\t\t\t\t=== length * 7;","\t},","","\tsetFullySelected: function(selected) {","\t\tif (selected)","\t\t\tthis._selectSegments(true);","\t\tthis.setSelected(selected);","\t},","","\tsetSelected: function setSelected(selected) {","\t\tif (!selected)","\t\t\tthis._selectSegments(false);","\t\tsetSelected.base.call(this, selected);","\t},","","\t_selectSegments: function(selected) {","\t\tvar length = this._segments.length;","\t\tthis._selectedSegmentState = selected","\t\t\t\t? length * 7 : 0;","\t\tfor (var i = 0; i < length; i++)","\t\t\tthis._segments[i]._selectionState = selected","\t\t\t\t\t? 7 : 0;","\t},","","\t_updateSelection: function(segment, oldState, newState) {","\t\tsegment._selectionState = newState;","\t\tvar total = this._selectedSegmentState += newState - oldState;","\t\tif (total > 0)","\t\t\tthis.setSelected(true);","\t},","","\tflatten: function(maxDistance) {","\t\tvar iterator = new PathIterator(this, 64, 0.1),","\t\t\tpos = 0,","\t\t\tstep = iterator.length / Math.ceil(iterator.length / maxDistance),","\t\t\tend = iterator.length + (this._closed ? -step : step) / 2;","\t\tvar segments = [];","\t\twhile (pos <= end) {","\t\t\tsegments.push(new Segment(iterator.evaluate(pos, 0)));","\t\t\tpos += step;","\t\t}","\t\tthis.setSegments(segments);","\t},","","\treduce: function() {","\t\tvar curves = this.getCurves();","\t\tfor (var i = curves.length - 1; i >= 0; i--) {","\t\t\tvar curve = curves[i];","\t\t\tif (curve.isLinear() && curve.getLength() === 0)","\t\t\t\tcurve.remove();","\t\t}","\t\treturn this;","\t},","","\tsimplify: function(tolerance) {","\t\tif (this._segments.length > 2) {","\t\t\tvar fitter = new PathFitter(this, tolerance || 2.5);","\t\t\tthis.setSegments(fitter.fit());","\t\t}","\t},","","\tsplit: function(index, parameter) {","\t\tif (parameter === null)","\t\t\treturn null;","\t\tif (arguments.length === 1) {","\t\t\tvar arg = index;","\t\t\tif (typeof arg === 'number')","\t\t\t\targ = this.getLocationAt(arg);","\t\t\tif (!arg)","\t\t\t\treturn null","\t\t\tindex = arg.index;","\t\t\tparameter = arg.parameter;","\t\t}","\t\tvar tolerance = 0.000001;","\t\tif (parameter >= 1 - tolerance) {","\t\t\tindex++;","\t\t\tparameter--;","\t\t}","\t\tvar curves = this.getCurves();","\t\tif (index >= 0 && index < curves.length) {","\t\t\tif (parameter > tolerance) {","\t\t\t\tcurves[index++].divide(parameter, true);","\t\t\t}","\t\t\tvar segs = this.removeSegments(index, this._segments.length, true),","\t\t\t\tpath;","\t\t\tif (this._closed) {","\t\t\t\tthis.setClosed(false);","\t\t\t\tpath = this;","\t\t\t} else {","\t\t\t\tpath = this._clone(new Path().insertAbove(this, true));","\t\t\t}","\t\t\tpath._add(segs, 0);","\t\t\tthis.addSegment(segs[0]);","\t\t\treturn path;","\t\t}","\t\treturn null;","\t},","","\tisClockwise: function() {","\t\tif (this._clockwise !== undefined)","\t\t\treturn this._clockwise;","\t\treturn Path.isClockwise(this._segments);","\t},","","\tsetClockwise: function(clockwise) {","\t\tif (this.isClockwise() != (clockwise = !!clockwise))","\t\t\tthis.reverse();","\t\tthis._clockwise = clockwise;","\t},","","\treverse: function() {","\t\tthis._segments.reverse();","\t\tfor (var i = 0, l = this._segments.length; i < l; i++) {","\t\t\tvar segment = this._segments[i];","\t\t\tvar handleIn = segment._handleIn;","\t\t\tsegment._handleIn = segment._handleOut;","\t\t\tsegment._handleOut = handleIn;","\t\t\tsegment._index = i;","\t\t}","\t\tthis._curves = null;","\t\tif (this._clockwise !== undefined)","\t\t\tthis._clockwise = !this._clockwise;","\t\tthis._changed(9);","\t},","","\tjoin: function(path) {","\t\tif (path) {","\t\t\tvar segments = path._segments,","\t\t\t\tlast1 = this.getLastSegment(),","\t\t\t\tlast2 = path.getLastSegment();","\t\t\tif (!last2)","\t\t\t\treturn this;","\t\t\tif (last1 && last1._point.equals(last2._point))","\t\t\t\tpath.reverse();","\t\t\tvar first2 = path.getFirstSegment();","\t\t\tif (last1 && last1._point.equals(first2._point)) {","\t\t\t\tlast1.setHandleOut(first2._handleOut);","\t\t\t\tthis._add(segments.slice(1));","\t\t\t} else {","\t\t\t\tvar first1 = this.getFirstSegment();","\t\t\t\tif (first1 && first1._point.equals(first2._point))","\t\t\t\t\tpath.reverse();","\t\t\t\tlast2 = path.getLastSegment();","\t\t\t\tif (first1 && first1._point.equals(last2._point)) {","\t\t\t\t\tfirst1.setHandleIn(last2._handleIn);","\t\t\t\t\tthis._add(segments.slice(0, segments.length - 1), 0);","\t\t\t\t} else {","\t\t\t\t\tthis._add(segments.slice());","\t\t\t\t}","\t\t\t}","\t\t\tif (path.closed)","\t\t\t\tthis._add([segments[0]]);","\t\t\tpath.remove();","\t\t}","\t\tvar first = this.getFirstSegment(),","\t\t\tlast = this.getLastSegment();","\t\tif (first !== last && first._point.equals(last._point)) {","\t\t\tfirst.setHandleIn(last._handleIn);","\t\t\tlast.remove();","\t\t\tthis.setClosed(true);","\t\t}","\t\treturn this;","\t},","","\ttoShape: function(insert) {","\t\tif (!this._closed)","\t\t\treturn null;","","\t\tvar segments = this._segments,","\t\t\ttype,","\t\t\tsize,","\t\t\tradius,","\t\t\ttopCenter;","","\t\tfunction isColinear(i, j) {","\t\t\treturn segments[i].isColinear(segments[j]);","\t\t}","","\t\tfunction isOrthogonal(i) {","\t\t\treturn segments[i].isOrthogonal();","\t\t}","","\t\tfunction isArc(i) {","\t\t\treturn segments[i].isArc();","\t\t}","","\t\tfunction getDistance(i, j) {","\t\t\treturn segments[i]._point.getDistance(segments[j]._point);","\t\t}","","\t\tif (this.isPolygon() && segments.length === 4","\t\t\t\t&& isColinear(0, 2) && isColinear(1, 3) && isOrthogonal(1)) {","\t\t\ttype = Shape.Rectangle;","\t\t\tsize = new Size(getDistance(0, 3), getDistance(0, 1));","\t\t\ttopCenter = segments[1]._point.add(segments[2]._point).divide(2);","\t\t} else if (segments.length === 8 && isArc(0) && isArc(2) && isArc(4)","\t\t\t\t&& isArc(6) && isColinear(1, 5) && isColinear(3, 7)) {","\t\t\ttype = Shape.Rectangle;","\t\t\tsize = new Size(getDistance(1, 6), getDistance(0, 3));","\t\t\tradius = size.subtract(new Size(getDistance(0, 7),","\t\t\t\t\tgetDistance(1, 2))).divide(2);","\t\t\ttopCenter = segments[3]._point.add(segments[4]._point).divide(2);","\t\t} else if (segments.length === 4","\t\t\t\t&& isArc(0) && isArc(1) && isArc(2) && isArc(3)) {","\t\t\tif (Numerical.isZero(getDistance(0, 2) - getDistance(1, 3))) {","\t\t\t\ttype = Shape.Circle;","\t\t\t\tradius = getDistance(0, 2) / 2;","\t\t\t} else {","\t\t\t\ttype = Shape.Ellipse;","\t\t\t\tradius = new Size(getDistance(2, 0) / 2, getDistance(3, 1) / 2);","\t\t\t}","\t\t\ttopCenter = segments[1]._point;","\t\t}","","\t\tif (type) {","\t\t\tvar center = this.getPosition(true),","\t\t\t\tshape = new type({","\t\t\t\t\tcenter: center,","\t\t\t\t\tsize: size,","\t\t\t\t\tradius: radius,","\t\t\t\t\tinsert: false","\t\t\t\t});","\t\t\tshape.rotate(topCenter.subtract(center).getAngle() + 90);","\t\t\tshape.setStyle(this._style);","\t\t\tif (insert || insert === undefined)","\t\t\t\tshape.insertAbove(this);","\t\t\treturn shape;","\t\t}","\t\treturn null;","\t},","","\t_hitTestSelf: function(point, options) {","\t\tvar that = this,","\t\t\tstyle = this.getStyle(),","\t\t\tsegments = this._segments,","\t\t\tnumSegments = segments.length,","\t\t\tclosed = this._closed,","\t\t\ttolerancePadding = options._tolerancePadding,","\t\t\tstrokePadding = tolerancePadding,","\t\t\tjoin, cap, miterLimit,","\t\t\tarea, loc, res,","\t\t\thitStroke = options.stroke && style.hasStroke(),","\t\t\thitFill = options.fill && style.hasFill(),","\t\t\thitCurves = options.curves,","\t\t\tradius = hitStroke","\t\t\t\t\t? style.getStrokeWidth() / 2","\t\t\t\t\t: hitFill && options.tolerance > 0 || hitCurves","\t\t\t\t\t\t? 0 : null;","\t\tif (radius !== null) {","\t\t\tif (radius > 0) {","\t\t\t\tjoin = style.getStrokeJoin();","\t\t\t\tcap = style.getStrokeCap();","\t\t\t\tmiterLimit = radius * style.getMiterLimit();","\t\t\t\tstrokePadding = tolerancePadding.add(new Point(radius, radius));","\t\t\t} else {","\t\t\t\tjoin = cap = 'round';","\t\t\t}","\t\t}","","\t\tfunction isCloseEnough(pt, padding) {","\t\t\treturn point.subtract(pt).divide(padding).length <= 1;","\t\t}","","\t\tfunction checkSegmentPoint(seg, pt, name) {","\t\t\tif (!options.selected || pt.isSelected()) {","\t\t\t\tvar anchor = seg._point;","\t\t\t\tif (pt !== anchor)","\t\t\t\t\tpt = pt.add(anchor);","\t\t\t\tif (isCloseEnough(pt, strokePadding)) {","\t\t\t\t\treturn new HitResult(name, that, {","\t\t\t\t\t\tsegment: seg,","\t\t\t\t\t\tpoint: pt","\t\t\t\t\t});","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfunction checkSegmentPoints(seg, ends) {","\t\t\treturn (ends || options.segments)","\t\t\t\t&& checkSegmentPoint(seg, seg._point, 'segment')","\t\t\t\t|| (!ends && options.handles) && (","\t\t\t\t\tcheckSegmentPoint(seg, seg._handleIn, 'handle-in') ||","\t\t\t\t\tcheckSegmentPoint(seg, seg._handleOut, 'handle-out'));","\t\t}","","\t\tfunction addToArea(point) {","\t\t\tarea.add(point);","\t\t}","","\t\tfunction checkSegmentStroke(segment) {","\t\t\tif (join !== 'round' || cap !== 'round') {","\t\t\t\tarea = new Path({ internal: true, closed: true });","\t\t\t\tif (closed || segment._index > 0","\t\t\t\t\t\t&& segment._index < numSegments - 1) {","\t\t\t\t\tif (join !== 'round' && (segment._handleIn.isZero()","\t\t\t\t\t\t\t|| segment._handleOut.isZero()))","\t\t\t\t\t\tPath._addBevelJoin(segment, join, radius, miterLimit,","\t\t\t\t\t\t\t\taddToArea, true);","\t\t\t\t} else if (cap !== 'round') {","\t\t\t\t\tPath._addSquareCap(segment, cap, radius, addToArea, true);","\t\t\t\t}","\t\t\t\tif (!area.isEmpty()) {","\t\t\t\t\tvar loc;","\t\t\t\t\treturn area.contains(point)","\t\t\t\t\t\t|| (loc = area.getNearestLocation(point))","\t\t\t\t\t\t\t&& isCloseEnough(loc.getPoint(), tolerancePadding);","\t\t\t\t}","\t\t\t}","\t\t\treturn isCloseEnough(segment._point, strokePadding);","\t\t}","","\t\tif (options.ends && !options.segments && !closed) {","\t\t\tif (res = checkSegmentPoints(segments[0], true)","\t\t\t\t\t|| checkSegmentPoints(segments[numSegments - 1], true))","\t\t\t\treturn res;","\t\t} else if (options.segments || options.handles) {","\t\t\tfor (var i = 0; i < numSegments; i++)","\t\t\t\tif (res = checkSegmentPoints(segments[i]))","\t\t\t\t\treturn res;","\t\t}","\t\tif (radius !== null) {","\t\t\tloc = this.getNearestLocation(point);","\t\t\tif (loc) {","\t\t\t\tvar parameter = loc.getParameter();","\t\t\t\tif (parameter === 0 || parameter === 1 && numSegments > 1) {","\t\t\t\t\tif (!checkSegmentStroke(loc.getSegment()))","\t\t\t\t\t\tloc = null;","\t\t\t\t} else if (!isCloseEnough(loc.getPoint(), strokePadding)) {","\t\t\t\t\tloc = null;","\t\t\t\t}","\t\t\t}","\t\t\tif (!loc && join === 'miter' && numSegments > 1) {","\t\t\t\tfor (var i = 0; i < numSegments; i++) {","\t\t\t\t\tvar segment = segments[i];","\t\t\t\t\tif (point.getDistance(segment._point) <= miterLimit","\t\t\t\t\t\t\t&& checkSegmentStroke(segment)) {","\t\t\t\t\t\tloc = segment.getLocation();","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn !loc && hitFill && this._contains(point)","\t\t\t\t|| loc && !hitStroke && !hitCurves","\t\t\t\t\t? new HitResult('fill', this)","\t\t\t\t\t: loc","\t\t\t\t\t\t? new HitResult(hitStroke ? 'stroke' : 'curve', this, {","\t\t\t\t\t\t\tlocation: loc,","\t\t\t\t\t\t\tpoint: loc.getPoint()","\t\t\t\t\t\t})","\t\t\t\t\t\t: null;","\t}","","}, Base.each(['getPoint', 'getTangent', 'getNormal', 'getCurvature'],","\tfunction(name) {","\t\tthis[name + 'At'] = function(offset, isParameter) {","\t\t\tvar loc = this.getLocationAt(offset, isParameter);","\t\t\treturn loc && loc[name]();","\t\t};","\t},","{","\tbeans: false,","","\t_getOffset: function(location) {","\t\tvar index = location && location.getIndex();","\t\tif (index != null) {","\t\t\tvar curves = this.getCurves(),","\t\t\t\toffset = 0;","\t\t\tfor (var i = 0; i < index; i++)","\t\t\t\toffset += curves[i].getLength();","\t\t\tvar curve = curves[index],","\t\t\t\tparameter = location.getParameter();","\t\t\tif (parameter > 0)","\t\t\t\toffset += curve.getPartLength(0, parameter);","\t\t\treturn offset;","\t\t}","\t\treturn null;","\t},","","\tgetLocationOf: function() {","\t\tvar point = Point.read(arguments),","\t\t\tcurves = this.getCurves();","\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\tvar loc = curves[i].getLocationOf(point);","\t\t\tif (loc)","\t\t\t\treturn loc;","\t\t}","\t\treturn null;","\t},","","\tgetOffsetOf: function() {","\t\tvar loc = this.getLocationOf.apply(this, arguments);","\t\treturn loc ? loc.getOffset() : null;","\t},","","\tgetLocationAt: function(offset, isParameter) {","\t\tvar curves = this.getCurves(),","\t\t\tlength = 0;","\t\tif (isParameter) {","\t\t\tvar index = ~~offset;","\t\t\treturn curves[index].getLocationAt(offset - index, true);","\t\t}","\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\tvar start = length,","\t\t\t\tcurve = curves[i];","\t\t\tlength += curve.getLength();","\t\t\tif (length > offset) {","\t\t\t\treturn curve.getLocationAt(offset - start);","\t\t\t}","\t\t}","\t\tif (offset <= this.getLength())","\t\t\treturn new CurveLocation(curves[curves.length - 1], 1);","\t\treturn null;","\t},","","\tgetNearestLocation: function() {","\t\tvar point = Point.read(arguments),","\t\t\tcurves = this.getCurves(),","\t\t\tminDist = Infinity,","\t\t\tminLoc = null;","\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\tvar loc = curves[i].getNearestLocation(point);","\t\t\tif (loc._distance < minDist) {","\t\t\t\tminDist = loc._distance;","\t\t\t\tminLoc = loc;","\t\t\t}","\t\t}","\t\treturn minLoc;","\t},","","\tgetNearestPoint: function() {","\t\treturn this.getNearestLocation.apply(this, arguments).getPoint();","\t}","}), new function() {","","\tfunction drawHandles(ctx, segments, matrix, size) {","\t\tvar half = size / 2;","","\t\tfunction drawHandle(index) {","\t\t\tvar hX = coords[index],","\t\t\t\thY = coords[index + 1];","\t\t\tif (pX != hX || pY != hY) {","\t\t\t\tctx.beginPath();","\t\t\t\tctx.moveTo(pX, pY);","\t\t\t\tctx.lineTo(hX, hY);","\t\t\t\tctx.stroke();","\t\t\t\tctx.beginPath();","\t\t\t\tctx.arc(hX, hY, half, 0, Math.PI * 2, true);","\t\t\t\tctx.fill();","\t\t\t}","\t\t}","","\t\tvar coords = new Array(6);","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar segment = segments[i];","\t\t\tsegment._transformCoordinates(matrix, coords, false);","\t\t\tvar state = segment._selectionState,","\t\t\t\tpX = coords[0],","\t\t\t\tpY = coords[1];","\t\t\tif (state & 1)","\t\t\t\tdrawHandle(2);","\t\t\tif (state & 2)","\t\t\t\tdrawHandle(4);","\t\t\tctx.fillRect(pX - half, pY - half, size, size);","\t\t\tif (!(state & 4)) {","\t\t\t\tvar fillStyle = ctx.fillStyle;","\t\t\t\tctx.fillStyle = '#ffffff';","\t\t\t\tctx.fillRect(pX - half + 1, pY - half + 1, size - 2, size - 2);","\t\t\t\tctx.fillStyle = fillStyle;","\t\t\t}","\t\t}","\t}","","\tfunction drawSegments(ctx, path, matrix) {","\t\tvar segments = path._segments,","\t\t\tlength = segments.length,","\t\t\tcoords = new Array(6),","\t\t\tfirst = true,","\t\t\tcurX, curY,","\t\t\tprevX, prevY,","\t\t\tinX, inY,","\t\t\toutX, outY;","","\t\tfunction drawSegment(segment) {","\t\t\tif (matrix) {","\t\t\t\tsegment._transformCoordinates(matrix, coords, false);","\t\t\t\tcurX = coords[0];","\t\t\t\tcurY = coords[1];","\t\t\t} else {","\t\t\t\tvar point = segment._point;","\t\t\t\tcurX = point._x;","\t\t\t\tcurY = point._y;","\t\t\t}","\t\t\tif (first) {","\t\t\t\tctx.moveTo(curX, curY);","\t\t\t\tfirst = false;","\t\t\t} else {","\t\t\t\tif (matrix) {","\t\t\t\t\tinX = coords[2];","\t\t\t\t\tinY = coords[3];","\t\t\t\t} else {","\t\t\t\t\tvar handle = segment._handleIn;","\t\t\t\t\tinX = curX + handle._x;","\t\t\t\t\tinY = curY + handle._y;","\t\t\t\t}","\t\t\t\tif (inX === curX && inY === curY","\t\t\t\t\t\t&& outX === prevX && outY === prevY) {","\t\t\t\t\tctx.lineTo(curX, curY);","\t\t\t\t} else {","\t\t\t\t\tctx.bezierCurveTo(outX, outY, inX, inY, curX, curY);","\t\t\t\t}","\t\t\t}","\t\t\tprevX = curX;","\t\t\tprevY = curY;","\t\t\tif (matrix) {","\t\t\t\toutX = coords[4];","\t\t\t\toutY = coords[5];","\t\t\t} else {","\t\t\t\tvar handle = segment._handleOut;","\t\t\t\toutX = prevX + handle._x;","\t\t\t\toutY = prevY + handle._y;","\t\t\t}","\t\t}","","\t\tfor (var i = 0; i < length; i++)","\t\t\tdrawSegment(segments[i]);","\t\tif (path._closed && length > 0)","\t\t\tdrawSegment(segments[0]);","\t}","","\treturn {","\t\t_draw: function(ctx, param, strokeMatrix) {","\t\t\tvar dontStart = param.dontStart,","\t\t\t\tdontPaint = param.dontFinish || param.clip,","\t\t\t\tstyle = this.getStyle(),","\t\t\t\thasFill = style.hasFill(),","\t\t\t\thasStroke = style.hasStroke(),","\t\t\t\tdashArray = style.getDashArray(),","\t\t\t\tdashLength = !paper.support.nativeDash && hasStroke","\t\t\t\t\t\t&& dashArray && dashArray.length;","","\t\t\tif (!dontStart)","\t\t\t\tctx.beginPath();","","\t\t\tif (!dontStart && this._currentPath) {","\t\t\t\tctx.currentPath = this._currentPath;","\t\t\t} else if (hasFill || hasStroke && !dashLength || dontPaint) {","\t\t\t\tdrawSegments(ctx, this, strokeMatrix);","\t\t\t\tif (this._closed)","\t\t\t\t\tctx.closePath();","\t\t\t\tif (!dontStart)","\t\t\t\t\tthis._currentPath = ctx.currentPath;","\t\t\t}","","\t\t\tfunction getOffset(i) {","\t\t\t\treturn dashArray[((i % dashLength) + dashLength) % dashLength];","\t\t\t}","","\t\t\tif (!dontPaint && (hasFill || hasStroke)) {","\t\t\t\tthis._setStyles(ctx);","\t\t\t\tif (hasFill) {","\t\t\t\t\tctx.fill(style.getWindingRule());","\t\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t\t}","\t\t\t\tif (hasStroke) {","\t\t\t\t\tif (dashLength) {","\t\t\t\t\t\tif (!dontStart)","\t\t\t\t\t\t\tctx.beginPath();","\t\t\t\t\t\tvar iterator = new PathIterator(this, 32, 0.25,","\t\t\t\t\t\t\t\tstrokeMatrix),","\t\t\t\t\t\t\tlength = iterator.length,","\t\t\t\t\t\t\tfrom = -style.getDashOffset(), to,","\t\t\t\t\t\t\ti = 0;","\t\t\t\t\t\tfrom = from % length;","\t\t\t\t\t\twhile (from > 0) {","\t\t\t\t\t\t\tfrom -= getOffset(i--) + getOffset(i--);","\t\t\t\t\t\t}","\t\t\t\t\t\twhile (from < length) {","\t\t\t\t\t\t\tto = from + getOffset(i++);","\t\t\t\t\t\t\tif (from > 0 || to > 0)","\t\t\t\t\t\t\t\titerator.drawPart(ctx,","\t\t\t\t\t\t\t\t\t\tMath.max(from, 0), Math.max(to, 0));","\t\t\t\t\t\t\tfrom = to + getOffset(i++);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tctx.stroke();","\t\t\t\t}","\t\t\t}","\t\t},","","\t\t_drawSelected: function(ctx, matrix) {","\t\t\tctx.beginPath();","\t\t\tdrawSegments(ctx, this, matrix);","\t\t\tctx.stroke();","\t\t\tdrawHandles(ctx, this._segments, matrix, paper.settings.handleSize);","\t\t}","\t};","}, new function() {","","\tfunction getFirstControlPoints(rhs) {","\t\tvar n = rhs.length,","\t\t\tx = [],","\t\t\ttmp = [],","\t\t\tb = 2;","\t\tx[0] = rhs[0] / b;","\t\tfor (var i = 1; i < n; i++) {","\t\t\ttmp[i] = 1 / b;","\t\t\tb = (i < n - 1 ? 4 : 2) - tmp[i];","\t\t\tx[i] = (rhs[i] - x[i - 1]) / b;","\t\t}","\t\tfor (var i = 1; i < n; i++) {","\t\t\tx[n - i - 1] -= tmp[n - i] * x[n - i];","\t\t}","\t\treturn x;","\t}","","\treturn {","\t\tsmooth: function() {","\t\t\tvar segments = this._segments,","\t\t\t\tsize = segments.length,","\t\t\t\tclosed = this._closed,","\t\t\t\tn = size,","\t\t\t\toverlap = 0;","\t\t\tif (size <= 2)","\t\t\t\treturn;","\t\t\tif (closed) {","\t\t\t\toverlap = Math.min(size, 4);","\t\t\t\tn += Math.min(size, overlap) * 2;","\t\t\t}","\t\t\tvar knots = [];","\t\t\tfor (var i = 0; i < size; i++)","\t\t\t\tknots[i + overlap] = segments[i]._point;","\t\t\tif (closed) {","\t\t\t\tfor (var i = 0; i < overlap; i++) {","\t\t\t\t\tknots[i] = segments[i + size - overlap]._point;","\t\t\t\t\tknots[i + size + overlap] = segments[i]._point;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tn--;","\t\t\t}","\t\t\tvar rhs = [];","","\t\t\tfor (var i = 1; i < n - 1; i++)","\t\t\t\trhs[i] = 4 * knots[i]._x + 2 * knots[i + 1]._x;","\t\t\trhs[0] = knots[0]._x + 2 * knots[1]._x;","\t\t\trhs[n - 1] = 3 * knots[n - 1]._x;","\t\t\tvar x = getFirstControlPoints(rhs);","","\t\t\tfor (var i = 1; i < n - 1; i++)","\t\t\t\trhs[i] = 4 * knots[i]._y + 2 * knots[i + 1]._y;","\t\t\trhs[0] = knots[0]._y + 2 * knots[1]._y;","\t\t\trhs[n - 1] = 3 * knots[n - 1]._y;","\t\t\tvar y = getFirstControlPoints(rhs);","","\t\t\tif (closed) {","\t\t\t\tfor (var i = 0, j = size; i < overlap; i++, j++) {","\t\t\t\t\tvar f1 = i / overlap,","\t\t\t\t\t\tf2 = 1 - f1,","\t\t\t\t\t\tie = i + overlap,","\t\t\t\t\t\tje = j + overlap;","\t\t\t\t\tx[j] = x[i] * f1 + x[j] * f2;","\t\t\t\t\ty[j] = y[i] * f1 + y[j] * f2;","\t\t\t\t\tx[je] = x[ie] * f2 + x[je] * f1;","\t\t\t\t\ty[je] = y[ie] * f2 + y[je] * f1;","\t\t\t\t}","\t\t\t\tn--;","\t\t\t}","\t\t\tvar handleIn = null;","\t\t\tfor (var i = overlap; i <= n - overlap; i++) {","\t\t\t\tvar segment = segments[i - overlap];","\t\t\t\tif (handleIn)","\t\t\t\t\tsegment.setHandleIn(handleIn.subtract(segment._point));","\t\t\t\tif (i < n) {","\t\t\t\t\tsegment.setHandleOut(","\t\t\t\t\t\t\tnew Point(x[i], y[i]).subtract(segment._point));","\t\t\t\t\thandleIn = i < n - 1","\t\t\t\t\t\t\t? new Point(","\t\t\t\t\t\t\t\t2 * knots[i + 1]._x - x[i + 1],","\t\t\t\t\t\t\t\t2 * knots[i + 1]._y - y[i + 1])","\t\t\t\t\t\t\t: new Point(","\t\t\t\t\t\t\t\t(knots[n]._x + x[n - 1]) / 2,","\t\t\t\t\t\t\t\t(knots[n]._y + y[n - 1]) / 2);","\t\t\t\t}","\t\t\t}","\t\t\tif (closed && handleIn) {","\t\t\t\tvar segment = this._segments[0];","\t\t\t\tsegment.setHandleIn(handleIn.subtract(segment._point));","\t\t\t}","\t\t}","\t};","}, new function() {","\tfunction getCurrentSegment(that) {","\t\tvar segments = that._segments;","\t\tif (segments.length === 0)","\t\t\tthrow new Error('Use a moveTo() command first');","\t\treturn segments[segments.length - 1];","\t}","","\treturn {","\t\tmoveTo: function() {","\t\t\tvar segments = this._segments;","\t\t\tif (segments.length === 1)","\t\t\t\tthis.removeSegment(0);","\t\t\tif (!segments.length)","\t\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);","\t\t},","","\t\tmoveBy: function() {","\t\t\tthrow new Error('moveBy() is unsupported on Path items.');","\t\t},","","\t\tlineTo: function() {","\t\t\tthis._add([ new Segment(Point.read(arguments)) ]);","\t\t},","","\t\tcubicCurveTo: function() {","\t\t\tvar handle1 = Point.read(arguments),","\t\t\t\thandle2 = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this);","\t\t\tcurrent.setHandleOut(handle1.subtract(current._point));","\t\t\tthis._add([ new Segment(to, handle2.subtract(to)) ]);","\t\t},","","\t\tquadraticCurveTo: function() {","\t\t\tvar handle = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.cubicCurveTo(","\t\t\t\thandle.add(current.subtract(handle).multiply(1 / 3)),","\t\t\t\thandle.add(to.subtract(handle).multiply(1 / 3)),","\t\t\t\tto","\t\t\t);","\t\t},","","\t\tcurveTo: function() {","\t\t\tvar through = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tt = Base.pick(Base.read(arguments), 0.5),","\t\t\t\tt1 = 1 - t,","\t\t\t\tcurrent = getCurrentSegment(this)._point,","\t\t\t\thandle = through.subtract(current.multiply(t1 * t1))","\t\t\t\t\t.subtract(to.multiply(t * t)).divide(2 * t * t1);","\t\t\tif (handle.isNaN())","\t\t\t\tthrow new Error(","\t\t\t\t\t'Cannot put a curve through points with parameter = ' + t);","\t\t\tthis.quadraticCurveTo(handle, to);","\t\t},","","\t\tarcTo: function() {","\t\t\tvar current = getCurrentSegment(this),","\t\t\t\tfrom = current._point,","\t\t\t\tto = Point.read(arguments),","\t\t\t\tthrough,","\t\t\t\tpeek = Base.peek(arguments),","\t\t\t\tclockwise = Base.pick(peek, true),","\t\t\t\tcenter, extent, vector, matrix;","\t\t\tif (typeof clockwise === 'boolean') {","\t\t\t\tvar middle = from.add(to).divide(2),","\t\t\t\tthrough = middle.add(middle.subtract(from).rotate(","\t\t\t\t\t\tclockwise ? -90 : 90));","\t\t\t} else if (Base.remain(arguments) <= 2) {","\t\t\t\tthrough = to;","\t\t\t\tto = Point.read(arguments);","\t\t\t} else {","\t\t\t\tvar radius = Size.read(arguments);","\t\t\t\tif (radius.isZero())","\t\t\t\t\treturn this.lineTo(to);","\t\t\t\tvar rotation = Base.read(arguments),","\t\t\t\t\tclockwise = !!Base.read(arguments),","\t\t\t\t\tlarge = !!Base.read(arguments),","\t\t\t\t\tmiddle = from.add(to).divide(2),","\t\t\t\t\tpt = from.subtract(middle).rotate(-rotation),","\t\t\t\t\tx = pt.x,","\t\t\t\t\ty = pt.y,","\t\t\t\t\tabs = Math.abs,","\t\t\t\t\tepsilon = 1e-12,","\t\t\t\t\trx = abs(radius.width),","\t\t\t\t\try = abs(radius.height),","\t\t\t\t\trxSq = rx * rx,","\t\t\t\t\trySq = ry * ry,","\t\t\t\t\txSq =  x * x,","\t\t\t\t\tySq =  y * y;","\t\t\t\tvar factor = Math.sqrt(xSq / rxSq + ySq / rySq);","\t\t\t\tif (factor > 1) {","\t\t\t\t\trx *= factor;","\t\t\t\t\try *= factor;","\t\t\t\t\trxSq = rx * rx;","\t\t\t\t\trySq = ry * ry;","\t\t\t\t}","\t\t\t\tfactor = (rxSq * rySq - rxSq * ySq - rySq * xSq) /","\t\t\t\t\t\t(rxSq * ySq + rySq * xSq);","\t\t\t\tif (abs(factor) < epsilon)","\t\t\t\t\tfactor = 0;","\t\t\t\tif (factor < 0)","\t\t\t\t\tthrow new Error(","\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');","\t\t\t\tcenter = new Point(rx * y / ry, -ry * x / rx)","\t\t\t\t\t\t.multiply((large === clockwise ? -1 : 1)","\t\t\t\t\t\t\t* Math.sqrt(factor))","\t\t\t\t\t\t.rotate(rotation).add(middle);","\t\t\t\tmatrix = new Matrix().translate(center).rotate(rotation)","\t\t\t\t\t\t.scale(rx, ry);","\t\t\t\tvector = matrix._inverseTransform(from);","\t\t\t\textent = vector.getDirectedAngle(matrix._inverseTransform(to));","\t\t\t\tif (!clockwise && extent > 0)","\t\t\t\t\textent -= 360;","\t\t\t\telse if (clockwise && extent < 0)","\t\t\t\t\textent += 360;","\t\t\t}","\t\t\tif (through) {","\t\t\t\tvar l1 = new Line(from.add(through).divide(2),","\t\t\t\t\t\t\tthrough.subtract(from).rotate(90), true),","\t\t\t\t\tl2 = new Line(through.add(to).divide(2),","\t\t\t\t\t\t\tto.subtract(through).rotate(90), true),","\t\t\t\t\tline = new Line(from, to),","\t\t\t\t\tthroughSide = line.getSide(through);","\t\t\t\tcenter = l1.intersect(l2, true);","\t\t\t\tif (!center) {","\t\t\t\t\tif (!throughSide)","\t\t\t\t\t\treturn this.lineTo(to);","\t\t\t\t\tthrow new Error(","\t\t\t\t\t\t\t'Cannot create an arc with the given arguments');","\t\t\t\t}","\t\t\t\tvector = from.subtract(center);","\t\t\t\textent = vector.getDirectedAngle(to.subtract(center));","\t\t\t\tvar centerSide = line.getSide(center);","\t\t\t\tif (centerSide === 0) {","\t\t\t\t\textent = throughSide * Math.abs(extent);","\t\t\t\t} else if (throughSide === centerSide) {","\t\t\t\t\textent += extent < 0 ? 360 : -360;","\t\t\t\t}","\t\t\t}","\t\t\tvar ext = Math.abs(extent),","\t\t\t\tcount = ext >= 360 ? 4 : Math.ceil(ext / 90),","\t\t\t\tinc = extent / count,","\t\t\t\thalf = inc * Math.PI / 360,","\t\t\t\tz = 4 / 3 * Math.sin(half) / (1 + Math.cos(half)),","\t\t\t\tsegments = [];","\t\t\tfor (var i = 0; i <= count; i++) {","\t\t\t\tvar pt = to,","\t\t\t\t\tout = null;","\t\t\t\tif (i < count) {","\t\t\t\t\tout = vector.rotate(90).multiply(z);","\t\t\t\t\tif (matrix) {","\t\t\t\t\t\tpt = matrix._transformPoint(vector);","\t\t\t\t\t\tout = matrix._transformPoint(vector.add(out))","\t\t\t\t\t\t\t\t.subtract(pt);","\t\t\t\t\t} else {","\t\t\t\t\t\tpt = center.add(vector);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (i === 0) {","\t\t\t\t\tcurrent.setHandleOut(out);","\t\t\t\t} else {","\t\t\t\t\tvar _in = vector.rotate(-90).multiply(z);","\t\t\t\t\tif (matrix) {","\t\t\t\t\t\t_in = matrix._transformPoint(vector.add(_in))","\t\t\t\t\t\t\t\t.subtract(pt);","\t\t\t\t\t}","\t\t\t\t\tsegments.push(new Segment(pt, _in, out));","\t\t\t\t}","\t\t\t\tvector = vector.rotate(inc);","\t\t\t}","\t\t\tthis._add(segments);","\t\t},","","\t\tlineBy: function() {","\t\t\tvar to = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.lineTo(current.add(to));","\t\t},","","\t\tcurveBy: function() {","\t\t\tvar through = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tparameter = Base.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.curveTo(current.add(through), current.add(to), parameter);","\t\t},","","\t\tcubicCurveBy: function() {","\t\t\tvar handle1 = Point.read(arguments),","\t\t\t\thandle2 = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.cubicCurveTo(current.add(handle1), current.add(handle2),","\t\t\t\t\tcurrent.add(to));","\t\t},","","\t\tquadraticCurveBy: function() {","\t\t\tvar handle = Point.read(arguments),","\t\t\t\tto = Point.read(arguments),","\t\t\t\tcurrent = getCurrentSegment(this)._point;","\t\t\tthis.quadraticCurveTo(current.add(handle), current.add(to));","\t\t},","","\t\tarcBy: function() {","\t\t\tvar current = getCurrentSegment(this)._point,","\t\t\t\tpoint = current.add(Point.read(arguments)),","\t\t\t\tclockwise = Base.pick(Base.peek(arguments), true);","\t\t\tif (typeof clockwise === 'boolean') {","\t\t\t\tthis.arcTo(point, clockwise);","\t\t\t} else {","\t\t\t\tthis.arcTo(point, current.add(Point.read(arguments)));","\t\t\t}","\t\t},","","\t\tclosePath: function(join) {","\t\t\tthis.setClosed(true);","\t\t\tif (join)","\t\t\t\tthis.join();","\t\t}","\t};","}, {","","\t_getBounds: function(getter, matrix) {","\t\treturn Path[getter](this._segments, this._closed, this.getStyle(),","\t\t\t\tmatrix);","\t},","","statics: {","\tisClockwise: function(segments) {","\t\tvar sum = 0;","\t\tfor (var i = 0, l = segments.length; i < l; i++)","\t\t\tsum += Curve.getEdgeSum(Curve.getValues(","\t\t\t\t\tsegments[i], segments[i + 1 < l ? i + 1 : 0]));","\t\treturn sum > 0;","\t},","","\tgetBounds: function(segments, closed, style, matrix, strokePadding) {","\t\tvar first = segments[0];","\t\tif (!first)","\t\t\treturn new Rectangle();","\t\tvar coords = new Array(6),","\t\t\tprevCoords = first._transformCoordinates(matrix, new Array(6), false),","\t\t\tmin = prevCoords.slice(0, 2),","\t\t\tmax = min.slice(),","\t\t\troots = new Array(2);","","\t\tfunction processSegment(segment) {","\t\t\tsegment._transformCoordinates(matrix, coords, false);","\t\t\tfor (var i = 0; i < 2; i++) {","\t\t\t\tCurve._addBounds(","\t\t\t\t\tprevCoords[i],","\t\t\t\t\tprevCoords[i + 4],","\t\t\t\t\tcoords[i + 2],","\t\t\t\t\tcoords[i],","\t\t\t\t\ti, strokePadding ? strokePadding[i] : 0, min, max, roots);","\t\t\t}","\t\t\tvar tmp = prevCoords;","\t\t\tprevCoords = coords;","\t\t\tcoords = tmp;","\t\t}","","\t\tfor (var i = 1, l = segments.length; i < l; i++)","\t\t\tprocessSegment(segments[i]);","\t\tif (closed)","\t\t\tprocessSegment(first);","\t\treturn new Rectangle(min[0], min[1], max[0] - min[0], max[1] - min[1]);","\t},","","\tgetStrokeBounds: function(segments, closed, style, matrix) {","\t\tif (!style.hasStroke())","\t\t\treturn Path.getBounds(segments, closed, style, matrix);","\t\tvar length = segments.length - (closed ? 0 : 1),","\t\t\tradius = style.getStrokeWidth() / 2,","\t\t\tpadding = Path._getPenPadding(radius, matrix),","\t\t\tbounds = Path.getBounds(segments, closed, style, matrix, padding),","\t\t\tjoin = style.getStrokeJoin(),","\t\t\tcap = style.getStrokeCap(),","\t\t\tmiterLimit = radius * style.getMiterLimit();","\t\tvar joinBounds = new Rectangle(new Size(padding).multiply(2));","","\t\tfunction add(point) {","\t\t\tbounds = bounds.include(matrix","\t\t\t\t? matrix._transformPoint(point, point) : point);","\t\t}","","\t\tfunction addRound(segment) {","\t\t\tbounds = bounds.unite(joinBounds.setCenter(matrix","\t\t\t\t? matrix._transformPoint(segment._point) : segment._point));","\t\t}","","\t\tfunction addJoin(segment, join) {","\t\t\tvar handleIn = segment._handleIn,","\t\t\t\thandleOut = segment._handleOut;","\t\t\tif (join === 'round' || !handleIn.isZero() && !handleOut.isZero()","\t\t\t\t\t&& handleIn.isColinear(handleOut)) {","\t\t\t\taddRound(segment);","\t\t\t} else {","\t\t\t\tPath._addBevelJoin(segment, join, radius, miterLimit, add);","\t\t\t}","\t\t}","","\t\tfunction addCap(segment, cap) {","\t\t\tif (cap === 'round') {","\t\t\t\taddRound(segment);","\t\t\t} else {","\t\t\t\tPath._addSquareCap(segment, cap, radius, add);","\t\t\t}","\t\t}","","\t\tfor (var i = 1; i < length; i++)","\t\t\taddJoin(segments[i], join);","\t\tif (closed) {","\t\t\taddJoin(segments[0], join);","\t\t} else if (length > 0) {","\t\t\taddCap(segments[0], cap);","\t\t\taddCap(segments[segments.length - 1], cap);","\t\t}","\t\treturn bounds;","\t},","","\t_getPenPadding: function(radius, matrix) {","\t\tif (!matrix)","\t\t\treturn [radius, radius];","\t\tvar mx = matrix.shiftless(),","\t\t\thor = mx.transform(new Point(radius, 0)),","\t\t\tver = mx.transform(new Point(0, radius)),","\t\t\tphi = hor.getAngleInRadians(),","\t\t\ta = hor.getLength(),","\t\t\tb = ver.getLength();","\t\tvar sin = Math.sin(phi),","\t\t\tcos = Math.cos(phi),","\t\t\ttan = Math.tan(phi),","\t\t\ttx = -Math.atan(b * tan / a),","\t\t\tty = Math.atan(b / (tan * a));","\t\treturn [Math.abs(a * Math.cos(tx) * cos - b * Math.sin(tx) * sin),","\t\t\t\tMath.abs(b * Math.sin(ty) * cos + a * Math.cos(ty) * sin)];","\t},","","\t_addBevelJoin: function(segment, join, radius, miterLimit, addPoint, area) {","\t\tvar curve2 = segment.getCurve(),","\t\t\tcurve1 = curve2.getPrevious(),","\t\t\tpoint = curve2.getPointAt(0, true),","\t\t\tnormal1 = curve1.getNormalAt(1, true),","\t\t\tnormal2 = curve2.getNormalAt(0, true),","\t\t\tstep = normal1.getDirectedAngle(normal2) < 0 ? -radius : radius;","\t\tnormal1.setLength(step);","\t\tnormal2.setLength(step);","\t\tif (area) {","\t\t\taddPoint(point);","\t\t\taddPoint(point.add(normal1));","\t\t}","\t\tif (join === 'miter') {","\t\t\tvar corner = new Line(","\t\t\t\t\tpoint.add(normal1),","\t\t\t\t\tnew Point(-normal1.y, normal1.x), true","\t\t\t\t).intersect(new Line(","\t\t\t\t\tpoint.add(normal2),","\t\t\t\t\tnew Point(-normal2.y, normal2.x), true","\t\t\t\t), true);","\t\t\tif (corner && point.getDistance(corner) <= miterLimit) {","\t\t\t\taddPoint(corner);","\t\t\t\tif (!area)","\t\t\t\t\treturn;","\t\t\t}","\t\t}","\t\tif (!area)","\t\t\taddPoint(point.add(normal1));","\t\taddPoint(point.add(normal2));","\t},","","\t_addSquareCap: function(segment, cap, radius, addPoint, area) {","\t\tvar point = segment._point,","\t\t\tloc = segment.getLocation(),","\t\t\tnormal = loc.getNormal().normalize(radius);","\t\tif (area) {","\t\t\taddPoint(point.subtract(normal));","\t\t\taddPoint(point.add(normal));","\t\t}","\t\tif (cap === 'square')","\t\t\tpoint = point.add(normal.rotate(loc.getParameter() === 0 ? -90 : 90));","\t\taddPoint(point.add(normal));","\t\taddPoint(point.subtract(normal));","\t},","","\tgetHandleBounds: function(segments, closed, style, matrix, strokePadding,","\t\t\tjoinPadding) {","\t\tvar coords = new Array(6),","\t\t\tx1 = Infinity,","\t\t\tx2 = -x1,","\t\t\ty1 = x1,","\t\t\ty2 = x2;","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar segment = segments[i];","\t\t\tsegment._transformCoordinates(matrix, coords, false);","\t\t\tfor (var j = 0; j < 6; j += 2) {","\t\t\t\tvar padding = j === 0 ? joinPadding : strokePadding,","\t\t\t\t\tpaddingX = padding ? padding[0] : 0,","\t\t\t\t\tpaddingY = padding ? padding[1] : 0,","\t\t\t\t\tx = coords[j],","\t\t\t\t\ty = coords[j + 1],","\t\t\t\t\txn = x - paddingX,","\t\t\t\t\txx = x + paddingX,","\t\t\t\t\tyn = y - paddingY,","\t\t\t\t\tyx = y + paddingY;","\t\t\t\tif (xn < x1) x1 = xn;","\t\t\t\tif (xx > x2) x2 = xx;","\t\t\t\tif (yn < y1) y1 = yn;","\t\t\t\tif (yx > y2) y2 = yx;","\t\t\t}","\t\t}","\t\treturn new Rectangle(x1, y1, x2 - x1, y2 - y1);","\t},","","\tgetRoughBounds: function(segments, closed, style, matrix) {","\t\tvar strokeRadius = style.hasStroke() ? style.getStrokeWidth() / 2 : 0,","\t\t\tjoinRadius = strokeRadius;","\t\tif (strokeRadius > 0) {","\t\t\tif (style.getStrokeJoin() === 'miter')","\t\t\t\tjoinRadius = strokeRadius * style.getMiterLimit();","\t\t\tif (style.getStrokeCap() === 'square')","\t\t\t\tjoinRadius = Math.max(joinRadius, strokeRadius * Math.sqrt(2));","\t\t}","\t\treturn Path.getHandleBounds(segments, closed, style, matrix,","\t\t\t\tPath._getPenPadding(strokeRadius, matrix),","\t\t\t\tPath._getPenPadding(joinRadius, matrix));","\t}","}});","","Path.inject({ statics: new function() {","","\tvar kappa = 0.5522847498307936,","\t\tellipseSegments = [","\t\t\tnew Segment([-1, 0], [0, kappa ], [0, -kappa]),","\t\t\tnew Segment([0, -1], [-kappa, 0], [kappa, 0 ]),","\t\t\tnew Segment([1, 0], [0, -kappa], [0, kappa ]),","\t\t\tnew Segment([0, 1], [kappa, 0 ], [-kappa, 0])","\t\t];","","\tfunction createPath(segments, closed, args) {","\t\tvar props = Base.getNamed(args),","\t\t\tpath = new Path(props && props.insert === false && Item.NO_INSERT);","\t\tpath._add(segments);","\t\tpath._closed = closed;","\t\treturn path.set(props);","\t}","","\tfunction createEllipse(center, radius, args) {","\t\tvar segments = new Array(4);","\t\tfor (var i = 0; i < 4; i++) {","\t\t\tvar segment = ellipseSegments[i];","\t\t\tsegments[i] = new Segment(","\t\t\t\tsegment._point.multiply(radius).add(center),","\t\t\t\tsegment._handleIn.multiply(radius),","\t\t\t\tsegment._handleOut.multiply(radius)","\t\t\t);","\t\t}","\t\treturn createPath(segments, true, args);","\t}","","\treturn {","\t\tLine: function() {","\t\t\treturn createPath([","\t\t\t\tnew Segment(Point.readNamed(arguments, 'from')),","\t\t\t\tnew Segment(Point.readNamed(arguments, 'to'))","\t\t\t], false, arguments);","\t\t},","","\t\tCircle: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tradius = Base.readNamed(arguments, 'radius');","\t\t\treturn createEllipse(center, new Size(radius), arguments);","\t\t},","","\t\tRectangle: function() {","\t\t\tvar rect = Rectangle.readNamed(arguments, 'rectangle'),","\t\t\t\tradius = Size.readNamed(arguments, 'radius', 0,","\t\t\t\t\t\t{ readNull: true }),","\t\t\t\tbl = rect.getBottomLeft(true),","\t\t\t\ttl = rect.getTopLeft(true),","\t\t\t\ttr = rect.getTopRight(true),","\t\t\t\tbr = rect.getBottomRight(true),","\t\t\t\tsegments;","\t\t\tif (!radius || radius.isZero()) {","\t\t\t\tsegments = [","\t\t\t\t\tnew Segment(bl),","\t\t\t\t\tnew Segment(tl),","\t\t\t\t\tnew Segment(tr),","\t\t\t\t\tnew Segment(br)","\t\t\t\t];","\t\t\t} else {","\t\t\t\tradius = Size.min(radius, rect.getSize(true).divide(2));","\t\t\t\tvar rx = radius.width,","\t\t\t\t\try = radius.height,","\t\t\t\t\thx = rx * kappa,","\t\t\t\t\thy = ry * kappa;","\t\t\t\tsegments = [","\t\t\t\t\tnew Segment(bl.add(rx, 0), null, [-hx, 0]),","\t\t\t\t\tnew Segment(bl.subtract(0, ry), [0, hy]),","\t\t\t\t\tnew Segment(tl.add(0, ry), null, [0, -hy]),","\t\t\t\t\tnew Segment(tl.add(rx, 0), [-hx, 0], null),","\t\t\t\t\tnew Segment(tr.subtract(rx, 0), null, [hx, 0]),","\t\t\t\t\tnew Segment(tr.add(0, ry), [0, -hy], null),","\t\t\t\t\tnew Segment(br.subtract(0, ry), null, [0, hy]),","\t\t\t\t\tnew Segment(br.subtract(rx, 0), [hx, 0])","\t\t\t\t];","\t\t\t}","\t\t\treturn createPath(segments, true, arguments);","\t\t},","","\t\tRoundRectangle: '#Rectangle',","","\t\tEllipse: function() {","\t\t\tvar ellipse = Shape._readEllipse(arguments);","\t\t\treturn createEllipse(ellipse.center, ellipse.radius, arguments);","\t\t},","","\t\tOval: '#Ellipse',","","\t\tArc: function() {","\t\t\tvar from = Point.readNamed(arguments, 'from'),","\t\t\t\tthrough = Point.readNamed(arguments, 'through'),","\t\t\t\tto = Point.readNamed(arguments, 'to'),","\t\t\t\tprops = Base.getNamed(arguments),","\t\t\t\tpath = new Path(props && props.insert === false","\t\t\t\t\t\t&& Item.NO_INSERT);","\t\t\tpath.moveTo(from);","\t\t\tpath.arcTo(through, to);","\t\t\treturn path.set(props);","\t\t},","","\t\tRegularPolygon: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tsides = Base.readNamed(arguments, 'sides'),","\t\t\t\tradius = Base.readNamed(arguments, 'radius'),","\t\t\t\tstep = 360 / sides,","\t\t\t\tthree = !(sides % 3),","\t\t\t\tvector = new Point(0, three ? -radius : radius),","\t\t\t\toffset = three ? -1 : 0.5,","\t\t\t\tsegments = new Array(sides);","\t\t\tfor (var i = 0; i < sides; i++)","\t\t\t\tsegments[i] = new Segment(center.add(","\t\t\t\t\tvector.rotate((i + offset) * step)));","\t\t\treturn createPath(segments, true, arguments);","\t\t},","","\t\tStar: function() {","\t\t\tvar center = Point.readNamed(arguments, 'center'),","\t\t\t\tpoints = Base.readNamed(arguments, 'points') * 2,","\t\t\t\tradius1 = Base.readNamed(arguments, 'radius1'),","\t\t\t\tradius2 = Base.readNamed(arguments, 'radius2'),","\t\t\t\tstep = 360 / points,","\t\t\t\tvector = new Point(0, -1),","\t\t\t\tsegments = new Array(points);","\t\t\tfor (var i = 0; i < points; i++)","\t\t\t\tsegments[i] = new Segment(center.add(vector.rotate(step * i)","\t\t\t\t\t\t.multiply(i % 2 ? radius2 : radius1)));","\t\t\treturn createPath(segments, true, arguments);","\t\t}","\t};","}});","","var CompoundPath = PathItem.extend({","\t_class: 'CompoundPath',","\t_serializeFields: {","\t\tchildren: []","\t},","","\tinitialize: function CompoundPath(arg) {","\t\tthis._children = [];","\t\tthis._namedChildren = {};","\t\tif (!this._initialize(arg)) {","\t\t\tif (typeof arg === 'string') {","\t\t\t\tthis.setPathData(arg);","\t\t\t} else {","\t\t\t\tthis.addChildren(Array.isArray(arg) ? arg : arguments);","\t\t\t}","\t\t}","\t},","","\tinsertChildren: function insertChildren(index, items, _preserve) {","\t\titems = insertChildren.base.call(this, index, items, _preserve, Path);","\t\tfor (var i = 0, l = !_preserve && items && items.length; i < l; i++) {","\t\t\tvar item = items[i];","\t\t\tif (item._clockwise === undefined)","\t\t\t\titem.setClockwise(item._index === 0);","\t\t}","\t\treturn items;","\t},","","\treverse: function() {","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tchildren[i].reverse();","\t},","","\tsmooth: function() {","\t\tfor (var i = 0, l = this._children.length; i < l; i++)","\t\t\tthis._children[i].smooth();","\t},","","\treduce: function reduce() {","\t\tif (this._children.length === 0) {","\t\t\tvar path = new Path(Item.NO_INSERT);","\t\t\tpath.insertAbove(this);","\t\t\tpath.setStyle(this._style);","\t\t\tthis.remove();","\t\t\treturn path;","\t\t} else {","\t\t\treturn reduce.base.call(this);","\t\t}","\t},","","\tisClockwise: function() {","\t\tvar child = this.getFirstChild();","\t\treturn child && child.isClockwise();","\t},","","\tsetClockwise: function(clockwise) {","\t\tif (this.isClockwise() !== !!clockwise)","\t\t\tthis.reverse();","\t},","","\tgetFirstSegment: function() {","\t\tvar first = this.getFirstChild();","\t\treturn first && first.getFirstSegment();","\t},","","\tgetLastSegment: function() {","\t\tvar last = this.getLastChild();","\t\treturn last && last.getLastSegment();","\t},","","\tgetCurves: function() {","\t\tvar children = this._children,","\t\t\tcurves = [];","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tcurves.push.apply(curves, children[i].getCurves());","\t\treturn curves;","\t},","","\tgetFirstCurve: function() {","\t\tvar first = this.getFirstChild();","\t\treturn first && first.getFirstCurve();","\t},","","\tgetLastCurve: function() {","\t\tvar last = this.getLastChild();","\t\treturn last && last.getFirstCurve();","\t},","","\tgetArea: function() {","\t\tvar children = this._children,","\t\t\tarea = 0;","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tarea += children[i].getArea();","\t\treturn area;","\t}","}, {","\tbeans: true,","","\tgetPathData: function(_matrix, _precision) {","\t\tvar children = this._children,","\t\t\tpaths = [];","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i],","\t\t\t\tmx = child._matrix;","\t\t\tpaths.push(child.getPathData(_matrix && !mx.isIdentity()","\t\t\t\t\t? _matrix.chain(mx) : mx, _precision));","\t\t}","\t\treturn paths.join(' ');","\t}","}, {","\t_getChildHitTestOptions: function(options) {","\t\treturn options.class === Path || options.type === 'path'","\t\t\t\t? options","\t\t\t\t: new Base(options, { fill: false });","\t},","","\t_draw: function(ctx, param, strokeMatrix) {","\t\tvar children = this._children;","\t\tif (children.length === 0)","\t\t\treturn;","","\t\tif (this._currentPath) {","\t\t\tctx.currentPath = this._currentPath;","\t\t} else {","\t\t\tparam = param.extend({ dontStart: true, dontFinish: true });","\t\t\tctx.beginPath();","\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\tchildren[i].draw(ctx, param, strokeMatrix);","\t\t\tthis._currentPath = ctx.currentPath;","\t\t}","","\t\tif (!param.clip) {","\t\t\tthis._setStyles(ctx);","\t\t\tvar style = this._style;","\t\t\tif (style.hasFill()) {","\t\t\t\tctx.fill(style.getWindingRule());","\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t}","\t\t\tif (style.hasStroke())","\t\t\t\tctx.stroke();","\t\t}","\t},","","\t_drawSelected: function(ctx, matrix, selectedItems) {","\t\tvar children = this._children;","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i],","\t\t\t\tmx = child._matrix;","\t\t\tif (!selectedItems[child._id])","\t\t\t\tchild._drawSelected(ctx, mx.isIdentity() ? matrix","\t\t\t\t\t\t: matrix.chain(mx));","\t\t}","\t}","}, new function() {","\tfunction getCurrentPath(that, check) {","\t\tvar children = that._children;","\t\tif (check && children.length === 0)","\t\t\tthrow new Error('Use a moveTo() command first');","\t\treturn children[children.length - 1];","\t}","","\tvar fields = {","\t\tmoveTo: function() {","\t\t\tvar current = getCurrentPath(this),","\t\t\t\tpath = current && current.isEmpty() ? current : new Path();","\t\t\tif (path !== current)","\t\t\t\tthis.addChild(path);","\t\t\tpath.moveTo.apply(path, arguments);","\t\t},","","\t\tmoveBy: function() {","\t\t\tvar current = getCurrentPath(this, true),","\t\t\t\tlast = current && current.getLastSegment(),","\t\t\t\tpoint = Point.read(arguments);","\t\t\tthis.moveTo(last ? point.add(last._point) : point);","\t\t},","","\t\tclosePath: function(join) {","\t\t\tgetCurrentPath(this, true).closePath(join);","\t\t}","\t};","","\tBase.each(['lineTo', 'cubicCurveTo', 'quadraticCurveTo', 'curveTo', 'arcTo',","\t\t\t'lineBy', 'cubicCurveBy', 'quadraticCurveBy', 'curveBy', 'arcBy'],","\t\t\tfunction(key) {","\t\t\t\tfields[key] = function() {","\t\t\t\t\tvar path = getCurrentPath(this, true);","\t\t\t\t\tpath[key].apply(path, arguments);","\t\t\t\t};","\t\t\t}","\t);","","\treturn fields;","});","","PathItem.inject(new function() {","\tvar operators = {","\t\tunite: function(w) {","\t\t\treturn w === 1 || w === 0;","\t\t},","","\t\tintersect: function(w) {","\t\t\treturn w === 2;","\t\t},","","\t\tsubtract: function(w) {","\t\t\treturn w === 1;","\t\t},","","\t\texclude: function(w) {","\t\t\treturn w === 1;","\t\t}","\t};","","\tfunction computeBoolean(path1, path2, operation) {","\t\tvar operator = operators[operation];","\t\tfunction preparePath(path) {","\t\t\treturn path.clone(false).reduce().reorient().transform(null, true,","\t\t\t\t\ttrue);","\t\t}","","\t\tvar _path1 = preparePath(path1),","\t\t\t_path2 = path2 && path1 !== path2 && preparePath(path2);","\t\tif (_path2 && /^(subtract|exclude)$/.test(operation)","\t\t\t\t^ (_path2.isClockwise() !== _path1.isClockwise()))","\t\t\t_path2.reverse();","\t\tsplitPath(_path1.getIntersections(_path2, null, true));","","\t\tvar chain = [],","\t\t\tsegments = [],","\t\t\tmonoCurves = [],","\t\t\ttolerance = 0.000001;","","\t\tfunction collect(paths) {","\t\t\tfor (var i = 0, l = paths.length; i < l; i++) {","\t\t\t\tvar path = paths[i];","\t\t\t\tsegments.push.apply(segments, path._segments);","\t\t\t\tmonoCurves.push.apply(monoCurves, path._getMonoCurves());","\t\t\t}","\t\t}","","\t\tcollect(_path1._children || [_path1]);","\t\tif (_path2)","\t\t\tcollect(_path2._children || [_path2]);","\t\tsegments.sort(function(a, b) {","\t\t\tvar _a = a._intersection,","\t\t\t\t_b = b._intersection;","\t\t\treturn !_a && !_b || _a && _b ? 0 : _a ? -1 : 1;","\t\t});","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar segment = segments[i];","\t\t\tif (segment._winding != null)","\t\t\t\tcontinue;","\t\t\tchain.length = 0;","\t\t\tvar startSeg = segment,","\t\t\t\ttotalLength = 0,","\t\t\t\twindingSum = 0;","\t\t\tdo {","\t\t\t\tvar length = segment.getCurve().getLength();","\t\t\t\tchain.push({ segment: segment, length: length });","\t\t\t\ttotalLength += length;","\t\t\t\tsegment = segment.getNext();","\t\t\t} while (segment && !segment._intersection && segment !== startSeg);","\t\t\tfor (var j = 0; j < 3; j++) {","\t\t\t\tvar length = totalLength * (j + 1) / 4;","\t\t\t\tfor (k = 0, m = chain.length; k < m; k++) {","\t\t\t\t\tvar node = chain[k],","\t\t\t\t\t\tcurveLength = node.length;","\t\t\t\t\tif (length <= curveLength) {","\t\t\t\t\t\tif (length <= tolerance","\t\t\t\t\t\t\t\t|| curveLength - length <= tolerance)","\t\t\t\t\t\t\tlength = curveLength / 2;","\t\t\t\t\t\tvar curve = node.segment.getCurve(),","\t\t\t\t\t\t\tpt = curve.getPointAt(length),","\t\t\t\t\t\t\thor = curve.isLinear() && Math.abs(curve","\t\t\t\t\t\t\t\t\t.getTangentAt(0.5, true).y) <= tolerance,","\t\t\t\t\t\t\tpath = curve._path;","\t\t\t\t\t\tif (path._parent instanceof CompoundPath)","\t\t\t\t\t\t\tpath = path._parent;","\t\t\t\t\t\twindingSum += operation === 'subtract' && _path2","\t\t\t\t\t\t\t&& (path === _path1 && _path2._getWinding(pt, hor)","\t\t\t\t\t\t\t|| path === _path2 && !_path1._getWinding(pt, hor))","\t\t\t\t\t\t\t? 0","\t\t\t\t\t\t\t: getWinding(pt, monoCurves, hor);","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t\tlength -= curveLength;","\t\t\t\t}","\t\t\t}","\t\t\tvar winding = Math.round(windingSum / 3);","\t\t\tfor (var j = chain.length - 1; j >= 0; j--)","\t\t\t\tchain[j].segment._winding = winding;","\t\t}","\t\tvar result = new CompoundPath(Item.NO_INSERT);","\t\tresult.insertAbove(path1);","\t\tresult.addChildren(tracePaths(segments, operator), true);","\t\tresult = result.reduce();","\t\tresult.setStyle(path1._style);","\t\treturn result;","\t}","","\tfunction splitPath(intersections) {","\t\tvar tMin = 0.000001,","\t\t\ttMax = 1 - tMin,","\t\t\tlinearHandles;","","\t\tfunction resetLinear() {","\t\t\tfor (var i = 0, l = linearHandles.length; i < l; i++)","\t\t\t\tlinearHandles[i].set(0, 0);","\t\t}","","\t\tfor (var i = intersections.length - 1, curve, prev; i >= 0; i--) {","\t\t\tvar loc = intersections[i],","\t\t\t\tt = loc._parameter;","\t\t\tif (prev && prev._curve === loc._curve && prev._parameter > 0) {","\t\t\t\tt /= prev._parameter;","\t\t\t} else {","\t\t\t\tcurve = loc._curve;","\t\t\t\tif (linearHandles)","\t\t\t\t\tresetLinear();","\t\t\t\tlinearHandles = curve.isLinear() ? [","\t\t\t\t\t\tcurve._segment1._handleOut,","\t\t\t\t\t\tcurve._segment2._handleIn","\t\t\t\t\t] : null;","\t\t\t}","\t\t\tvar newCurve,","\t\t\t\tsegment;","\t\t\tif (newCurve = curve.divide(t, true, true)) {","\t\t\t\tsegment = newCurve._segment1;","\t\t\t\tcurve = newCurve.getPrevious();","\t\t\t\tif (linearHandles)","\t\t\t\t\tlinearHandles.push(segment._handleOut, segment._handleIn);","\t\t\t} else {","\t\t\t\tsegment = t < tMin","\t\t\t\t\t? curve._segment1","\t\t\t\t\t: t > tMax","\t\t\t\t\t\t? curve._segment2","\t\t\t\t\t\t: curve.getPartLength(0, t) < curve.getPartLength(t, 1)","\t\t\t\t\t\t\t? curve._segment1","\t\t\t\t\t\t\t: curve._segment2;","\t\t\t}","\t\t\tsegment._intersection = loc.getIntersection();","\t\t\tloc._segment = segment;","\t\t\tprev = loc;","\t\t}","\t\tif (linearHandles)","\t\t\tresetLinear();","\t}","","\tfunction getWinding(point, curves, horizontal, testContains) {","\t\tvar tolerance = 0.000001,","\t\t\ttMin = tolerance,","\t\t\ttMax = 1 - tMin,","\t\t\tpx = point.x,","\t\t\tpy = point.y,","\t\t\twindLeft = 0,","\t\t\twindRight = 0,","\t\t\troots = [],","\t\t\tabs = Math.abs;","\t\tif (horizontal) {","\t\t\tvar yTop = -Infinity,","\t\t\t\tyBottom = Infinity,","\t\t\t\tyBefore = py - tolerance,","\t\t\t\tyAfter = py + tolerance;","\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\t\tvar values = curves[i].values;","\t\t\t\tif (Curve.solveCubic(values, 0, px, roots, 0, 1) > 0) {","\t\t\t\t\tfor (var j = roots.length - 1; j >= 0; j--) {","\t\t\t\t\t\tvar y = Curve.evaluate(values, roots[j], 0).y;","\t\t\t\t\t\tif (y < yBefore && y > yTop) {","\t\t\t\t\t\t\tyTop = y;","\t\t\t\t\t\t} else if (y > yAfter && y < yBottom) {","\t\t\t\t\t\t\tyBottom = y;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tyTop = (yTop + py) / 2;","\t\t\tyBottom = (yBottom + py) / 2;","\t\t\tif (yTop > -Infinity)","\t\t\t\twindLeft = getWinding(new Point(px, yTop), curves);","\t\t\tif (yBottom < Infinity)","\t\t\t\twindRight = getWinding(new Point(px, yBottom), curves);","\t\t} else {","\t\t\tvar xBefore = px - tolerance,","\t\t\t\txAfter = px + tolerance;","\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\t\tvar curve = curves[i],","\t\t\t\t\tvalues = curve.values,","\t\t\t\t\twinding = curve.winding,","\t\t\t\t\tprevT,","\t\t\t\t\tprevX;","\t\t\t\tif (winding && (winding === 1","\t\t\t\t\t\t&& py >= values[1] && py <= values[7]","\t\t\t\t\t\t|| py >= values[7] && py <= values[1])","\t\t\t\t\t&& Curve.solveCubic(values, 1, py, roots, 0, 1) === 1) {","\t\t\t\t\tvar t = roots[0],","\t\t\t\t\t\tx = Curve.evaluate(values, t, 0).x,","\t\t\t\t\t\tslope = Curve.evaluate(values, t, 1).y;","\t\t\t\t\tif (!(t > tMax","\t\t\t\t\t\t\t&& (i === l - 1 || curve.next !== curves[i + 1])","\t\t\t\t\t\t\t&& abs(Curve.evaluate(curve.next.values, 0, 0).x -x)","\t\t\t\t\t\t\t\t<= tolerance","\t\t\t\t\t\t|| i > 0 && curve.previous === curves[i - 1]","\t\t\t\t\t\t\t&& abs(prevX - x) < tolerance","\t\t\t\t\t\t\t&& prevT > tMax && t < tMin)) {","\t\t\t\t\t\tif (Numerical.isZero(slope) && !Curve.isLinear(values)","\t\t\t\t\t\t\t\t|| t < tMin && slope * Curve.evaluate(","\t\t\t\t\t\t\t\t\tcurve.previous.values, 1, 1).y < 0","\t\t\t\t\t\t\t\t|| t > tMax && slope * Curve.evaluate(","\t\t\t\t\t\t\t\t\tcurve.next.values, 0, 1).y < 0) {","\t\t\t\t\t\t\tif (testContains && x >= xBefore && x <= xAfter) {","\t\t\t\t\t\t\t\t++windLeft;","\t\t\t\t\t\t\t\t++windRight;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t} else if (x <= xBefore) {","\t\t\t\t\t\t\twindLeft += winding;","\t\t\t\t\t\t} else if (x >= xAfter) {","\t\t\t\t\t\t\twindRight += winding;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tprevT = t;","\t\t\t\t\tprevX = x;","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn Math.max(abs(windLeft), abs(windRight));","\t}","","\tfunction tracePaths(segments, operator, selfOp) {","\t\tvar paths = [],","\t\t\ttMin = 0.000001,","\t\t\ttMax = 1 - tMin;","\t\tfor (var i = 0, seg, startSeg, l = segments.length; i < l; i++) {","\t\t\tseg = startSeg = segments[i];","\t\t\tif (seg._visited || !operator(seg._winding))","\t\t\t\tcontinue;","\t\t\tvar path = new Path(Item.NO_INSERT),","\t\t\t\tinter = seg._intersection,","\t\t\t\tstartInterSeg = inter && inter._segment,","\t\t\t\tadded = false,","\t\t\t\tdir = 1;","\t\t\tdo {","\t\t\t\tvar handleIn = dir > 0 ? seg._handleIn : seg._handleOut,","\t\t\t\t\thandleOut = dir > 0 ? seg._handleOut : seg._handleIn,","\t\t\t\t\tinterSeg;","\t\t\t\tif (added && (!operator(seg._winding) || selfOp)","\t\t\t\t\t\t&& (inter = seg._intersection)","\t\t\t\t\t\t&& (interSeg = inter._segment)","\t\t\t\t\t\t&& interSeg !== startSeg) {","\t\t\t\t\tif (selfOp) {","\t\t\t\t\t\tseg._visited = interSeg._visited;","\t\t\t\t\t\tseg = interSeg;","\t\t\t\t\t\tdir = 1;","\t\t\t\t\t} else {","\t\t\t\t\t\tvar c1 = seg.getCurve();","\t\t\t\t\t\tif (dir > 0)","\t\t\t\t\t\t\tc1 = c1.getPrevious();","\t\t\t\t\t\tvar t1 = c1.getTangentAt(dir < 1 ? tMin : tMax, true),","\t\t\t\t\t\t\tc4 = interSeg.getCurve(),","\t\t\t\t\t\t\tc3 = c4.getPrevious(),","\t\t\t\t\t\t\tt3 = c3.getTangentAt(tMax, true),","\t\t\t\t\t\t\tt4 = c4.getTangentAt(tMin, true),","\t\t\t\t\t\t\tw3 = t1.cross(t3),","\t\t\t\t\t\t\tw4 = t1.cross(t4);","\t\t\t\t\t\tif (w3 * w4 !== 0) {","\t\t\t\t\t\t\tvar curve = w3 < w4 ? c3 : c4,","\t\t\t\t\t\t\t\tnextCurve = operator(curve._segment1._winding)","\t\t\t\t\t\t\t\t\t? curve","\t\t\t\t\t\t\t\t\t: w3 < w4 ? c4 : c3,","\t\t\t\t\t\t\t\tnextSeg = nextCurve._segment1;","\t\t\t\t\t\t\tdir = nextCurve === c3 ? -1 : 1;","\t\t\t\t\t\t\tif (nextSeg._visited && seg._path !== nextSeg._path","\t\t\t\t\t\t\t\t\t\t|| !operator(nextSeg._winding)) {","\t\t\t\t\t\t\t\tdir = 1;","\t\t\t\t\t\t\t} else {","\t\t\t\t\t\t\t\tseg._visited = interSeg._visited;","\t\t\t\t\t\t\t\tseg = interSeg;","\t\t\t\t\t\t\t\tif (nextSeg._visited)","\t\t\t\t\t\t\t\t\tdir = 1;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t} else {","\t\t\t\t\t\t\tdir = 1;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\thandleOut = dir > 0 ? seg._handleOut : seg._handleIn;","\t\t\t\t}","\t\t\t\tpath.add(new Segment(seg._point, added && handleIn, handleOut));","\t\t\t\tadded = true;","\t\t\t\tseg._visited = true;","\t\t\t\tseg = dir > 0 ? seg.getNext() : seg. getPrevious();","\t\t\t} while (seg && !seg._visited","\t\t\t\t\t&& seg !== startSeg && seg !== startInterSeg","\t\t\t\t\t&& (seg._intersection || operator(seg._winding)));","\t\t\tif (seg && (seg === startSeg || seg === startInterSeg)) {","\t\t\t\tpath.firstSegment.setHandleIn((seg === startInterSeg","\t\t\t\t\t\t? startInterSeg : seg)._handleIn);","\t\t\t\tpath.setClosed(true);","\t\t\t} else {","\t\t\t\tpath.lastSegment._handleOut.set(0, 0);","\t\t\t}","\t\t\tif (path._segments.length >","\t\t\t\t\t(path._closed ? path.isPolygon() ? 2 : 0 : 1))","\t\t\t\tpaths.push(path);","\t\t}","\t\treturn paths;","\t}","","\treturn {","\t\t_getWinding: function(point, horizontal, testContains) {","\t\t\treturn getWinding(point, this._getMonoCurves(),","\t\t\t\t\thorizontal, testContains);","\t\t},","","\t\tunite: function(path) {","\t\t\treturn computeBoolean(this, path, 'unite');","\t\t},","","\t\tintersect: function(path) {","\t\t\treturn computeBoolean(this, path, 'intersect');","\t\t},","","\t\tsubtract: function(path) {","\t\t\treturn computeBoolean(this, path, 'subtract');","\t\t},","","\t\texclude: function(path) {","\t\t\treturn computeBoolean(this, path, 'exclude');","\t\t},","","\t\tdivide: function(path) {","\t\t\treturn new Group([this.subtract(path), this.intersect(path)]);","\t\t}","\t};","});","","Path.inject({","\t_getMonoCurves: function() {","\t\tvar monoCurves = this._monoCurves,","\t\t\tprevCurve;","","\t\tfunction insertCurve(v) {","\t\t\tvar y0 = v[1],","\t\t\t\ty1 = v[7],","\t\t\t\tcurve = {","\t\t\t\t\tvalues: v,","\t\t\t\t\twinding: y0 === y1","\t\t\t\t\t\t? 0","\t\t\t\t\t\t: y0 > y1","\t\t\t\t\t\t\t? -1","\t\t\t\t\t\t\t: 1,","\t\t\t\t\tprevious: prevCurve,","\t\t\t\t\tnext: null","\t\t\t\t};","\t\t\tif (prevCurve)","\t\t\t\tprevCurve.next = curve;","\t\t\tmonoCurves.push(curve);","\t\t\tprevCurve = curve;","\t\t}","","\t\tfunction handleCurve(v) {","\t\t\tif (Curve.getLength(v) === 0)","\t\t\t\treturn;","\t\t\tvar y0 = v[1],","\t\t\t\ty1 = v[3],","\t\t\t\ty2 = v[5],","\t\t\t\ty3 = v[7];","\t\t\tif (Curve.isLinear(v)) {","\t\t\t\tinsertCurve(v);","\t\t\t} else {","\t\t\t\tvar a = 3 * (y1 - y2) - y0 + y3,","\t\t\t\t\tb = 2 * (y0 + y2) - 4 * y1,","\t\t\t\t\tc = y1 - y0,","\t\t\t\t\ttolerance = 0.000001,","\t\t\t\t\troots = [];","\t\t\t\tvar count = Numerical.solveQuadratic(a, b, c, roots, tolerance,","\t\t\t\t\t\t1 - tolerance);","\t\t\t\tif (count === 0) {","\t\t\t\t\tinsertCurve(v);","\t\t\t\t} else {","\t\t\t\t\troots.sort();","\t\t\t\t\tvar t = roots[0],","\t\t\t\t\t\tparts = Curve.subdivide(v, t);","\t\t\t\t\tinsertCurve(parts[0]);","\t\t\t\t\tif (count > 1) {","\t\t\t\t\t\tt = (roots[1] - t) / (1 - t);","\t\t\t\t\t\tparts = Curve.subdivide(parts[1], t);","\t\t\t\t\t\tinsertCurve(parts[0]);","\t\t\t\t\t}","\t\t\t\t\tinsertCurve(parts[1]);","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tif (!monoCurves) {","\t\t\tmonoCurves = this._monoCurves = [];","\t\t\tvar curves = this.getCurves(),","\t\t\t\tsegments = this._segments;","\t\t\tfor (var i = 0, l = curves.length; i < l; i++)","\t\t\t\thandleCurve(curves[i].getValues());","\t\t\tif (!this._closed && segments.length > 1) {","\t\t\t\tvar p1 = segments[segments.length - 1]._point,","\t\t\t\t\tp2 = segments[0]._point,","\t\t\t\t\tp1x = p1._x, p1y = p1._y,","\t\t\t\t\tp2x = p2._x, p2y = p2._y;","\t\t\t\thandleCurve([p1x, p1y, p1x, p1y, p2x, p2y, p2x, p2y]);","\t\t\t}","\t\t\tif (monoCurves.length > 0) {","\t\t\t\tvar first = monoCurves[0],","\t\t\t\t\tlast = monoCurves[monoCurves.length - 1];","\t\t\t\tfirst.previous = last;","\t\t\t\tlast.next = first;","\t\t\t}","\t\t}","\t\treturn monoCurves;","\t},","","\tgetInteriorPoint: function() {","\t\tvar bounds = this.getBounds(),","\t\t\tpoint = bounds.getCenter(true);","\t\tif (!this.contains(point)) {","\t\t\tvar curves = this._getMonoCurves(),","\t\t\t\troots = [],","\t\t\t\ty = point.y,","\t\t\t\txIntercepts = [];","\t\t\tfor (var i = 0, l = curves.length; i < l; i++) {","\t\t\t\tvar values = curves[i].values;","\t\t\t\tif ((curves[i].winding === 1","\t\t\t\t\t\t&& y >= values[1] && y <= values[7]","\t\t\t\t\t\t|| y >= values[7] && y <= values[1])","\t\t\t\t\t\t&& Curve.solveCubic(values, 1, y, roots, 0, 1) > 0) {","\t\t\t\t\tfor (var j = roots.length - 1; j >= 0; j--)","\t\t\t\t\t\txIntercepts.push(Curve.evaluate(values, roots[j], 0).x);","\t\t\t\t}","\t\t\t\tif (xIntercepts.length > 1)","\t\t\t\t\tbreak;","\t\t\t}","\t\t\tpoint.x = (xIntercepts[0] + xIntercepts[1]) / 2;","\t\t}","\t\treturn point;","\t},","","\treorient: function() {","\t\tthis.setClockwise(true);","\t\treturn this;","\t}","});","","CompoundPath.inject({","\t_getMonoCurves: function() {","\t\tvar children = this._children,","\t\t\tmonoCurves = [];","\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\tmonoCurves.push.apply(monoCurves, children[i]._getMonoCurves());","\t\treturn monoCurves;","\t},","","\treorient: function() {","\t\tvar children = this.removeChildren().sort(function(a, b) {","\t\t\treturn b.getBounds().getArea() - a.getBounds().getArea();","\t\t});","\t\tif (children.length > 0) {","\t\t\tthis.addChildren(children);","\t\t\tvar clockwise = children[0].isClockwise();","\t\t\tfor (var i = 1, l = children.length; i < l; i++) {","\t\t\t\tvar point = children[i].getInteriorPoint(),","\t\t\t\t\tcounters = 0;","\t\t\t\tfor (var j = i - 1; j >= 0; j--) {","\t\t\t\t\tif (children[j].contains(point))","\t\t\t\t\t\tcounters++;","\t\t\t\t}","\t\t\t\tchildren[i].setClockwise(counters % 2 === 0 && clockwise);","\t\t\t}","\t\t}","\t\treturn this;","\t}","});","","var PathIterator = Base.extend({","\t_class: 'PathIterator',","","\tinitialize: function(path, maxRecursion, tolerance, matrix) {","\t\tvar curves = [],","\t\t\tparts = [],","\t\t\tlength = 0,","\t\t\tminDifference = 1 / (maxRecursion || 32),","\t\t\tsegments = path._segments,","\t\t\tsegment1 = segments[0],","\t\t\tsegment2;","","\t\tfunction addCurve(segment1, segment2) {","\t\t\tvar curve = Curve.getValues(segment1, segment2, matrix);","\t\t\tcurves.push(curve);","\t\t\tcomputeParts(curve, segment1._index, 0, 1);","\t\t}","","\t\tfunction computeParts(curve, index, minT, maxT) {","\t\t\tif ((maxT - minT) > minDifference","\t\t\t\t\t&& !Curve.isFlatEnough(curve, tolerance || 0.25)) {","\t\t\t\tvar split = Curve.subdivide(curve),","\t\t\t\t\thalfT = (minT + maxT) / 2;","\t\t\t\tcomputeParts(split[0], index, minT, halfT);","\t\t\t\tcomputeParts(split[1], index, halfT, maxT);","\t\t\t} else {","\t\t\t\tvar x = curve[6] - curve[0],","\t\t\t\t\ty = curve[7] - curve[1],","\t\t\t\t\tdist = Math.sqrt(x * x + y * y);","\t\t\t\tif (dist > 0.000001) {","\t\t\t\t\tlength += dist;","\t\t\t\t\tparts.push({","\t\t\t\t\t\toffset: length,","\t\t\t\t\t\tvalue: maxT,","\t\t\t\t\t\tindex: index","\t\t\t\t\t});","\t\t\t\t}","\t\t\t}","\t\t}","","\t\tfor (var i = 1, l = segments.length; i < l; i++) {","\t\t\tsegment2 = segments[i];","\t\t\taddCurve(segment1, segment2);","\t\t\tsegment1 = segment2;","\t\t}","\t\tif (path._closed)","\t\t\taddCurve(segment2, segments[0]);","","\t\tthis.curves = curves;","\t\tthis.parts = parts;","\t\tthis.length = length;","\t\tthis.index = 0;","\t},","","\tgetParameterAt: function(offset) {","\t\tvar i, j = this.index;","\t\tfor (;;) {","\t\t\ti = j;","\t\t\tif (j == 0 || this.parts[--j].offset < offset)","\t\t\t\tbreak;","\t\t}","\t\tfor (var l = this.parts.length; i < l; i++) {","\t\t\tvar part = this.parts[i];","\t\t\tif (part.offset >= offset) {","\t\t\t\tthis.index = i;","\t\t\t\tvar prev = this.parts[i - 1];","\t\t\t\tvar prevVal = prev && prev.index == part.index ? prev.value : 0,","\t\t\t\t\tprevLen = prev ? prev.offset : 0;","\t\t\t\treturn {","\t\t\t\t\tvalue: prevVal + (part.value - prevVal)","\t\t\t\t\t\t* (offset - prevLen) / (part.offset - prevLen),","\t\t\t\t\tindex: part.index","\t\t\t\t};","\t\t\t}","\t\t}","\t\tvar part = this.parts[this.parts.length - 1];","\t\treturn {","\t\t\tvalue: 1,","\t\t\tindex: part.index","\t\t};","\t},","","\tevaluate: function(offset, type) {","\t\tvar param = this.getParameterAt(offset);","\t\treturn Curve.evaluate(this.curves[param.index], param.value, type);","\t},","","\tdrawPart: function(ctx, from, to) {","\t\tfrom = this.getParameterAt(from);","\t\tto = this.getParameterAt(to);","\t\tfor (var i = from.index; i <= to.index; i++) {","\t\t\tvar curve = Curve.getPart(this.curves[i],","\t\t\t\t\ti == from.index ? from.value : 0,","\t\t\t\t\ti == to.index ? to.value : 1);","\t\t\tif (i == from.index)","\t\t\t\tctx.moveTo(curve[0], curve[1]);","\t\t\tctx.bezierCurveTo.apply(ctx, curve.slice(2));","\t\t}","\t}","}, Base.each(['getPoint', 'getTangent', 'getNormal', 'getCurvature'],","\tfunction(name, index) {","\t\tthis[name + 'At'] = function(offset) {","\t\t\treturn this.evaluate(offset, index);","\t\t};","\t}, {})",");","","var PathFitter = Base.extend({","\tinitialize: function(path, error) {","\t\tvar points = this.points = [],","\t\t\tsegments = path._segments,","\t\t\tprev;","\t\tfor (var i = 0, l = segments.length; i < l; i++) {","\t\t\tvar point = segments[i].point.clone();","\t\t\tif (!prev || !prev.equals(point)) {","\t\t\t\tpoints.push(point);","\t\t\t\tprev = point;","\t\t\t}","\t\t}","","\t\tif (path._closed) {","\t\t\tthis.closed = true;","\t\t\tpoints.unshift(points[points.length - 1]);","\t\t\tpoints.push(points[1]);","\t\t}","","\t\tthis.error = error;","\t},","","\tfit: function() {","\t\tvar points = this.points,","\t\t\tlength = points.length,","\t\t\tsegments = this.segments = length > 0","\t\t\t\t\t? [new Segment(points[0])] : [];","\t\tif (length > 1)","\t\t\tthis.fitCubic(0, length - 1,","\t\t\t\tpoints[1].subtract(points[0]).normalize(),","\t\t\t\tpoints[length - 2].subtract(points[length - 1]).normalize());","","\t\tif (this.closed) {","\t\t\tsegments.shift();","\t\t\tsegments.pop();","\t\t}","","\t\treturn segments;","\t},","","\tfitCubic: function(first, last, tan1, tan2) {","\t\tif (last - first == 1) {","\t\t\tvar pt1 = this.points[first],","\t\t\t\tpt2 = this.points[last],","\t\t\t\tdist = pt1.getDistance(pt2) / 3;","\t\t\tthis.addCurve([pt1, pt1.add(tan1.normalize(dist)),","\t\t\t\t\tpt2.add(tan2.normalize(dist)), pt2]);","\t\t\treturn;","\t\t}","\t\tvar uPrime = this.chordLengthParameterize(first, last),","\t\t\tmaxError = Math.max(this.error, this.error * this.error),","\t\t\tsplit;","\t\tfor (var i = 0; i <= 4; i++) {","\t\t\tvar curve = this.generateBezier(first, last, uPrime, tan1, tan2);","\t\t\tvar max = this.findMaxError(first, last, curve, uPrime);","\t\t\tif (max.error < this.error) {","\t\t\t\tthis.addCurve(curve);","\t\t\t\treturn;","\t\t\t}","\t\t\tsplit = max.index;","\t\t\tif (max.error >= maxError)","\t\t\t\tbreak;","\t\t\tthis.reparameterize(first, last, uPrime, curve);","\t\t\tmaxError = max.error;","\t\t}","\t\tvar V1 = this.points[split - 1].subtract(this.points[split]),","\t\t\tV2 = this.points[split].subtract(this.points[split + 1]),","\t\t\ttanCenter = V1.add(V2).divide(2).normalize();","\t\tthis.fitCubic(first, split, tan1, tanCenter);","\t\tthis.fitCubic(split, last, tanCenter.negate(), tan2);","\t},","","\taddCurve: function(curve) {","\t\tvar prev = this.segments[this.segments.length - 1];","\t\tprev.setHandleOut(curve[1].subtract(curve[0]));","\t\tthis.segments.push(","\t\t\t\tnew Segment(curve[3], curve[2].subtract(curve[3])));","\t},","","\tgenerateBezier: function(first, last, uPrime, tan1, tan2) {","\t\tvar epsilon = 1e-12,","\t\t\tpt1 = this.points[first],","\t\t\tpt2 = this.points[last],","\t\t\tC = [[0, 0], [0, 0]],","\t\t\tX = [0, 0];","","\t\tfor (var i = 0, l = last - first + 1; i < l; i++) {","\t\t\tvar u = uPrime[i],","\t\t\t\tt = 1 - u,","\t\t\t\tb = 3 * u * t,","\t\t\t\tb0 = t * t * t,","\t\t\t\tb1 = b * t,","\t\t\t\tb2 = b * u,","\t\t\t\tb3 = u * u * u,","\t\t\t\ta1 = tan1.normalize(b1),","\t\t\t\ta2 = tan2.normalize(b2),","\t\t\t\ttmp = this.points[first + i]","\t\t\t\t\t.subtract(pt1.multiply(b0 + b1))","\t\t\t\t\t.subtract(pt2.multiply(b2 + b3));","\t\t\tC[0][0] += a1.dot(a1);","\t\t\tC[0][1] += a1.dot(a2);","\t\t\tC[1][0] = C[0][1];","\t\t\tC[1][1] += a2.dot(a2);","\t\t\tX[0] += a1.dot(tmp);","\t\t\tX[1] += a2.dot(tmp);","\t\t}","","\t\tvar detC0C1 = C[0][0] * C[1][1] - C[1][0] * C[0][1],","\t\t\talpha1, alpha2;","\t\tif (Math.abs(detC0C1) > epsilon) {","\t\t\tvar detC0X\t= C[0][0] * X[1]\t- C[1][0] * X[0],","\t\t\t\tdetXC1\t= X[0]\t  * C[1][1] - X[1]\t  * C[0][1];","\t\t\talpha1 = detXC1 / detC0C1;","\t\t\talpha2 = detC0X / detC0C1;","\t\t} else {","\t\t\tvar c0 = C[0][0] + C[0][1],","\t\t\t\tc1 = C[1][0] + C[1][1];","\t\t\tif (Math.abs(c0) > epsilon) {","\t\t\t\talpha1 = alpha2 = X[0] / c0;","\t\t\t} else if (Math.abs(c1) > epsilon) {","\t\t\t\talpha1 = alpha2 = X[1] / c1;","\t\t\t} else {","\t\t\t\talpha1 = alpha2 = 0;","\t\t\t}","\t\t}","","\t\tvar segLength = pt2.getDistance(pt1);","\t\tepsilon *= segLength;","\t\tif (alpha1 < epsilon || alpha2 < epsilon) {","\t\t\talpha1 = alpha2 = segLength / 3;","\t\t}","","\t\treturn [pt1, pt1.add(tan1.normalize(alpha1)),","\t\t\t\tpt2.add(tan2.normalize(alpha2)), pt2];","\t},","","\treparameterize: function(first, last, u, curve) {","\t\tfor (var i = first; i <= last; i++) {","\t\t\tu[i - first] = this.findRoot(curve, this.points[i], u[i - first]);","\t\t}","\t},","","\tfindRoot: function(curve, point, u) {","\t\tvar curve1 = [],","\t\t\tcurve2 = [];","\t\tfor (var i = 0; i <= 2; i++) {","\t\t\tcurve1[i] = curve[i + 1].subtract(curve[i]).multiply(3);","\t\t}","\t\tfor (var i = 0; i <= 1; i++) {","\t\t\tcurve2[i] = curve1[i + 1].subtract(curve1[i]).multiply(2);","\t\t}","\t\tvar pt = this.evaluate(3, curve, u),","\t\t\tpt1 = this.evaluate(2, curve1, u),","\t\t\tpt2 = this.evaluate(1, curve2, u),","\t\t\tdiff = pt.subtract(point),","\t\t\tdf = pt1.dot(pt1) + diff.dot(pt2);","\t\tif (Math.abs(df) < 0.000001)","\t\t\treturn u;","\t\treturn u - diff.dot(pt1) / df;","\t},","","\tevaluate: function(degree, curve, t) {","\t\tvar tmp = curve.slice();","\t\tfor (var i = 1; i <= degree; i++) {","\t\t\tfor (var j = 0; j <= degree - i; j++) {","\t\t\t\ttmp[j] = tmp[j].multiply(1 - t).add(tmp[j + 1].multiply(t));","\t\t\t}","\t\t}","\t\treturn tmp[0];","\t},","","\tchordLengthParameterize: function(first, last) {","\t\tvar u = [0];","\t\tfor (var i = first + 1; i <= last; i++) {","\t\t\tu[i - first] = u[i - first - 1]","\t\t\t\t\t+ this.points[i].getDistance(this.points[i - 1]);","\t\t}","\t\tfor (var i = 1, m = last - first; i <= m; i++) {","\t\t\tu[i] /= u[m];","\t\t}","\t\treturn u;","\t},","","\tfindMaxError: function(first, last, curve, u) {","\t\tvar index = Math.floor((last - first + 1) / 2),","\t\t\tmaxDist = 0;","\t\tfor (var i = first + 1; i < last; i++) {","\t\t\tvar P = this.evaluate(3, curve, u[i - first]);","\t\t\tvar v = P.subtract(this.points[i]);","\t\t\tvar dist = v.x * v.x + v.y * v.y;","\t\t\tif (dist >= maxDist) {","\t\t\t\tmaxDist = dist;","\t\t\t\tindex = i;","\t\t\t}","\t\t}","\t\treturn {","\t\t\terror: maxDist,","\t\t\tindex: index","\t\t};","\t}","});","","var TextItem = Item.extend({","\t_class: 'TextItem',","\t_boundsSelected: true,","\t_applyMatrix: false,","\t_canApplyMatrix: false,","\t_serializeFields: {","\t\tcontent: null","\t},","\t_boundsGetter: 'getBounds',","","\tinitialize: function TextItem(arg) {","\t\tthis._content = '';","\t\tthis._lines = [];","\t\tvar hasProps = arg && Base.isPlainObject(arg)","\t\t\t\t&& arg.x === undefined && arg.y === undefined;","\t\tthis._initialize(hasProps && arg, !hasProps && Point.read(arguments));","\t},","","\t_equals: function(item) {","\t\treturn this._content === item._content;","\t},","","\t_clone: function _clone(copy, insert) {","\t\tcopy.setContent(this._content);","\t\treturn _clone.base.call(this, copy, insert);","\t},","","\tgetContent: function() {","\t\treturn this._content;","\t},","","\tsetContent: function(content) {","\t\tthis._content = '' + content;","\t\tthis._lines = this._content.split(/\\r\\n|\\n|\\r/mg);","\t\tthis._changed(265);","\t},","","\tisEmpty: function() {","\t\treturn !this._content;","\t},","","\tgetCharacterStyle: '#getStyle',","\tsetCharacterStyle: '#setStyle',","","\tgetParagraphStyle: '#getStyle',","\tsetParagraphStyle: '#setStyle'","});","","var PointText = TextItem.extend({","\t_class: 'PointText',","","\tinitialize: function PointText() {","\t\tTextItem.apply(this, arguments);","\t},","","\tclone: function(insert) {","\t\treturn this._clone(new PointText(Item.NO_INSERT), insert);","\t},","","\tgetPoint: function() {","\t\tvar point = this._matrix.getTranslation();","\t\treturn new LinkedPoint(point.x, point.y, this, 'setPoint');","\t},","","\tsetPoint: function() {","\t\tvar point = Point.read(arguments);","\t\tthis.translate(point.subtract(this._matrix.getTranslation()));","\t},","","\t_draw: function(ctx) {","\t\tif (!this._content)","\t\t\treturn;","\t\tthis._setStyles(ctx);","\t\tvar style = this._style,","\t\t\tlines = this._lines,","\t\t\tleading = style.getLeading(),","\t\t\tshadowColor = ctx.shadowColor;","\t\tctx.font = style.getFontStyle();","\t\tctx.textAlign = style.getJustification();","\t\tfor (var i = 0, l = lines.length; i < l; i++) {","\t\t\tctx.shadowColor = shadowColor;","\t\t\tvar line = lines[i];","\t\t\tif (style.hasFill()) {","\t\t\t\tctx.fillText(line, 0, 0);","\t\t\t\tctx.shadowColor = 'rgba(0,0,0,0)';","\t\t\t}","\t\t\tif (style.hasStroke())","\t\t\t\tctx.strokeText(line, 0, 0);","\t\t\tctx.translate(0, leading);","\t\t}","\t},","","\t_getBounds: function(getter, matrix) {","\t\tvar style = this._style,","\t\t\tlines = this._lines,","\t\t\tnumLines = lines.length,","\t\t\tjustification = style.getJustification(),","\t\t\tleading = style.getLeading(),","\t\t\twidth = this.getView().getTextWidth(style.getFontStyle(), lines),","\t\t\tx = 0;","\t\tif (justification !== 'left')","\t\t\tx -= width / (justification === 'center' ? 2: 1);","\t\tvar bounds = new Rectangle(x,","\t\t\t\t\tnumLines ? - 0.75 * leading : 0,","\t\t\t\t\twidth, numLines * leading);","\t\treturn matrix ? matrix._transformBounds(bounds, bounds) : bounds;","\t}","});","","var Color = Base.extend(new function() {","\tvar types = {","\t\tgray: ['gray'],","\t\trgb: ['red', 'green', 'blue'],","\t\thsb: ['hue', 'saturation', 'brightness'],","\t\thsl: ['hue', 'saturation', 'lightness'],","\t\tgradient: ['gradient', 'origin', 'destination', 'highlight']","\t};","","\tvar componentParsers = {},","\t\tcolorCache = {},","\t\tcolorCtx;","","\tfunction fromCSS(string) {","\t\tvar match = string.match(/^#(\\w{1,2})(\\w{1,2})(\\w{1,2})$/),","\t\t\tcomponents;","\t\tif (match) {","\t\t\tcomponents = [0, 0, 0];","\t\t\tfor (var i = 0; i < 3; i++) {","\t\t\t\tvar value = match[i + 1];","\t\t\t\tcomponents[i] = parseInt(value.length == 1","\t\t\t\t\t\t? value + value : value, 16) / 255;","\t\t\t}","\t\t} else if (match = string.match(/^rgba?\\((.*)\\)$/)) {","\t\t\tcomponents = match[1].split(',');","\t\t\tfor (var i = 0, l = components.length; i < l; i++) {","\t\t\t\tvar value = +components[i];","\t\t\t\tcomponents[i] = i < 3 ? value / 255 : value;","\t\t\t}","\t\t} else {","\t\t\tvar cached = colorCache[string];","\t\t\tif (!cached) {","\t\t\t\tif (!colorCtx) {","\t\t\t\t\tcolorCtx = CanvasProvider.getContext(1, 1);","\t\t\t\t\tcolorCtx.globalCompositeOperation = 'copy';","\t\t\t\t}","\t\t\t\tcolorCtx.fillStyle = 'rgba(0,0,0,0)';","\t\t\t\tcolorCtx.fillStyle = string;","\t\t\t\tcolorCtx.fillRect(0, 0, 1, 1);","\t\t\t\tvar data = colorCtx.getImageData(0, 0, 1, 1).data;","\t\t\t\tcached = colorCache[string] = [","\t\t\t\t\tdata[0] / 255,","\t\t\t\t\tdata[1] / 255,","\t\t\t\t\tdata[2] / 255","\t\t\t\t];","\t\t\t}","\t\t\tcomponents = cached.slice();","\t\t}","\t\treturn components;","\t}","","\tvar hsbIndices = [","\t\t[0, 3, 1],","\t\t[2, 0, 1],","\t\t[1, 0, 3],","\t\t[1, 2, 0],","\t\t[3, 1, 0],","\t\t[0, 1, 2]","\t];","","\tvar converters = {","\t\t'rgb-hsb': function(r, g, b) {","\t\t\tvar max = Math.max(r, g, b),","\t\t\t\tmin = Math.min(r, g, b),","\t\t\t\tdelta = max - min,","\t\t\t\th = delta === 0 ? 0","\t\t\t\t\t:\t( max == r ? (g - b) / delta + (g < b ? 6 : 0)","\t\t\t\t\t\t: max == g ? (b - r) / delta + 2","\t\t\t\t\t\t:\t\t\t (r - g) / delta + 4) * 60;","\t\t\treturn [h, max === 0 ? 0 : delta / max, max];","\t\t},","","\t\t'hsb-rgb': function(h, s, b) {","\t\t\th = (((h / 60) % 6) + 6) % 6;","\t\t\tvar i = Math.floor(h),","\t\t\t\tf = h - i,","\t\t\t\ti = hsbIndices[i],","\t\t\t\tv = [","\t\t\t\t\tb,","\t\t\t\t\tb * (1 - s),","\t\t\t\t\tb * (1 - s * f),","\t\t\t\t\tb * (1 - s * (1 - f))","\t\t\t\t];","\t\t\treturn [v[i[0]], v[i[1]], v[i[2]]];","\t\t},","","\t\t'rgb-hsl': function(r, g, b) {","\t\t\tvar max = Math.max(r, g, b),","\t\t\t\tmin = Math.min(r, g, b),","\t\t\t\tdelta = max - min,","\t\t\t\tachromatic = delta === 0,","\t\t\t\th = achromatic ? 0","\t\t\t\t\t:\t( max == r ? (g - b) / delta + (g < b ? 6 : 0)","\t\t\t\t\t\t: max == g ? (b - r) / delta + 2","\t\t\t\t\t\t:\t\t\t (r - g) / delta + 4) * 60,","\t\t\t\tl = (max + min) / 2,","\t\t\t\ts = achromatic ? 0 : l < 0.5","\t\t\t\t\t\t? delta / (max + min)","\t\t\t\t\t\t: delta / (2 - max - min);","\t\t\treturn [h, s, l];","\t\t},","","\t\t'hsl-rgb': function(h, s, l) {","\t\t\th = (((h / 360) % 1) + 1) % 1;","\t\t\tif (s === 0)","\t\t\t\treturn [l, l, l];","\t\t\tvar t3s = [ h + 1 / 3, h, h - 1 / 3 ],","\t\t\t\tt2 = l < 0.5 ? l * (1 + s) : l + s - l * s,","\t\t\t\tt1 = 2 * l - t2,","\t\t\t\tc = [];","\t\t\tfor (var i = 0; i < 3; i++) {","\t\t\t\tvar t3 = t3s[i];","\t\t\t\tif (t3 < 0) t3 += 1;","\t\t\t\tif (t3 > 1) t3 -= 1;","\t\t\t\tc[i] = 6 * t3 < 1","\t\t\t\t\t? t1 + (t2 - t1) * 6 * t3","\t\t\t\t\t: 2 * t3 < 1","\t\t\t\t\t\t? t2","\t\t\t\t\t\t: 3 * t3 < 2","\t\t\t\t\t\t\t? t1 + (t2 - t1) * ((2 / 3) - t3) * 6","\t\t\t\t\t\t\t: t1;","\t\t\t}","\t\t\treturn c;","\t\t},","","\t\t'rgb-gray': function(r, g, b) {","\t\t\treturn [r * 0.2989 + g * 0.587 + b * 0.114];","\t\t},","","\t\t'gray-rgb': function(g) {","\t\t\treturn [g, g, g];","\t\t},","","\t\t'gray-hsb': function(g) {","\t\t\treturn [0, 0, g];","\t\t},","","\t\t'gray-hsl': function(g) {","\t\t\treturn [0, 0, g];","\t\t},","","\t\t'gradient-rgb': function() {","\t\t\treturn [];","\t\t},","","\t\t'rgb-gradient': function() {","\t\t\treturn [];","\t\t}","","\t};","","\treturn Base.each(types, function(properties, type) {","\t\tcomponentParsers[type] = [];","\t\tBase.each(properties, function(name, index) {","\t\t\tvar part = Base.capitalize(name),","\t\t\t\thasOverlap = /^(hue|saturation)$/.test(name),","\t\t\t\tparser = componentParsers[type][index] = name === 'gradient'","\t\t\t\t\t? function(value) {","\t\t\t\t\t\tvar current = this._components[0];","\t\t\t\t\t\tvalue = Gradient.read(Array.isArray(value) ? value","\t\t\t\t\t\t\t\t: arguments, 0, { readNull: true });","\t\t\t\t\t\tif (current !== value) {","\t\t\t\t\t\t\tif (current)","\t\t\t\t\t\t\t\tcurrent._removeOwner(this);","\t\t\t\t\t\t\tif (value)","\t\t\t\t\t\t\t\tvalue._addOwner(this);","\t\t\t\t\t\t}","\t\t\t\t\t\treturn value;","\t\t\t\t\t}","\t\t\t\t\t: type === 'gradient'","\t\t\t\t\t\t? function() {","\t\t\t\t\t\t\treturn Point.read(arguments, 0, {","\t\t\t\t\t\t\t\t\treadNull: name === 'highlight',","\t\t\t\t\t\t\t\t\tclone: true","\t\t\t\t\t\t\t});","\t\t\t\t\t\t}","\t\t\t\t\t\t: function(value) {","\t\t\t\t\t\t\treturn value == null || isNaN(value) ? 0 : value;","\t\t\t\t\t\t};","","\t\t\tthis['get' + part] = function() {","\t\t\t\treturn this._type === type","\t\t\t\t\t|| hasOverlap && /^hs[bl]$/.test(this._type)","\t\t\t\t\t\t? this._components[index]","\t\t\t\t\t\t: this._convert(type)[index];","\t\t\t};","","\t\t\tthis['set' + part] = function(value) {","\t\t\t\tif (this._type !== type","\t\t\t\t\t\t&& !(hasOverlap && /^hs[bl]$/.test(this._type))) {","\t\t\t\t\tthis._components = this._convert(type);","\t\t\t\t\tthis._properties = types[type];","\t\t\t\t\tthis._type = type;","\t\t\t\t}","\t\t\t\tvalue = parser.call(this, value);","\t\t\t\tif (value != null) {","\t\t\t\t\tthis._components[index] = value;","\t\t\t\t\tthis._changed();","\t\t\t\t}","\t\t\t};","\t\t}, this);","\t}, {","\t\t_class: 'Color',","\t\t_readIndex: true,","","\t\tinitialize: function Color(arg) {","\t\t\tvar slice = Array.prototype.slice,","\t\t\t\targs = arguments,","\t\t\t\tread = 0,","\t\t\t\ttype,","\t\t\t\tcomponents,","\t\t\t\talpha,","\t\t\t\tvalues;","\t\t\tif (Array.isArray(arg)) {","\t\t\t\targs = arg;","\t\t\t\targ = args[0];","\t\t\t}","\t\t\tvar argType = arg != null && typeof arg;","\t\t\tif (argType === 'string' && arg in types) {","\t\t\t\ttype = arg;","\t\t\t\targ = args[1];","\t\t\t\tif (Array.isArray(arg)) {","\t\t\t\t\tcomponents = arg;","\t\t\t\t\talpha = args[2];","\t\t\t\t} else {","\t\t\t\t\tif (this.__read)","\t\t\t\t\t\tread = 1;","\t\t\t\t\targs = slice.call(args, 1);","\t\t\t\t\targType = typeof arg;","\t\t\t\t}","\t\t\t}","\t\t\tif (!components) {","\t\t\t\tvalues = argType === 'number'","\t\t\t\t\t\t? args","\t\t\t\t\t\t: argType === 'object' && arg.length != null","\t\t\t\t\t\t\t? arg","\t\t\t\t\t\t\t: null;","\t\t\t\tif (values) {","\t\t\t\t\tif (!type)","\t\t\t\t\t\ttype = values.length >= 3","\t\t\t\t\t\t\t\t? 'rgb'","\t\t\t\t\t\t\t\t: 'gray';","\t\t\t\t\tvar length = types[type].length;","\t\t\t\t\talpha = values[length];","\t\t\t\t\tif (this.__read)","\t\t\t\t\t\tread += values === arguments","\t\t\t\t\t\t\t? length + (alpha != null ? 1 : 0)","\t\t\t\t\t\t\t: 1;","\t\t\t\t\tif (values.length > length)","\t\t\t\t\t\tvalues = slice.call(values, 0, length);","\t\t\t\t} else if (argType === 'string') {","\t\t\t\t\ttype = 'rgb';","\t\t\t\t\tcomponents = fromCSS(arg);","\t\t\t\t\tif (components.length === 4) {","\t\t\t\t\t\talpha = components[3];","\t\t\t\t\t\tcomponents.length--;","\t\t\t\t\t}","\t\t\t\t} else if (argType === 'object') {","\t\t\t\t\tif (arg.constructor === Color) {","\t\t\t\t\t\ttype = arg._type;","\t\t\t\t\t\tcomponents = arg._components.slice();","\t\t\t\t\t\talpha = arg._alpha;","\t\t\t\t\t\tif (type === 'gradient') {","\t\t\t\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {","\t\t\t\t\t\t\t\tvar point = components[i];","\t\t\t\t\t\t\t\tif (point)","\t\t\t\t\t\t\t\t\tcomponents[i] = point.clone();","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t} else if (arg.constructor === Gradient) {","\t\t\t\t\t\ttype = 'gradient';","\t\t\t\t\t\tvalues = args;","\t\t\t\t\t} else {","\t\t\t\t\t\ttype = 'hue' in arg","\t\t\t\t\t\t\t? 'lightness' in arg","\t\t\t\t\t\t\t\t? 'hsl'","\t\t\t\t\t\t\t\t: 'hsb'","\t\t\t\t\t\t\t: 'gradient' in arg || 'stops' in arg","\t\t\t\t\t\t\t\t\t|| 'radial' in arg","\t\t\t\t\t\t\t\t? 'gradient'","\t\t\t\t\t\t\t\t: 'gray' in arg","\t\t\t\t\t\t\t\t\t? 'gray'","\t\t\t\t\t\t\t\t\t: 'rgb';","\t\t\t\t\t\tvar properties = types[type];","\t\t\t\t\t\t\tparsers = componentParsers[type];","\t\t\t\t\t\tthis._components = components = [];","\t\t\t\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {","\t\t\t\t\t\t\tvar value = arg[properties[i]];","\t\t\t\t\t\t\tif (value == null && i === 0 && type === 'gradient'","\t\t\t\t\t\t\t\t\t&& 'stops' in arg) {","\t\t\t\t\t\t\t\tvalue = {","\t\t\t\t\t\t\t\t\tstops: arg.stops,","\t\t\t\t\t\t\t\t\tradial: arg.radial","\t\t\t\t\t\t\t\t};","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tvalue = parsers[i].call(this, value);","\t\t\t\t\t\t\tif (value != null)","\t\t\t\t\t\t\t\tcomponents[i] = value;","\t\t\t\t\t\t}","\t\t\t\t\t\talpha = arg.alpha;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (this.__read && type)","\t\t\t\t\tread = 1;","\t\t\t}","\t\t\tthis._type = type || 'rgb';","\t\t\tif (type === 'gradient')","\t\t\t\tthis._id = Color._id = (Color._id || 0) + 1;","\t\t\tif (!components) {","\t\t\t\tthis._components = components = [];","\t\t\t\tvar parsers = componentParsers[this._type];","\t\t\t\tfor (var i = 0, l = parsers.length; i < l; i++) {","\t\t\t\t\tvar value = parsers[i].call(this, values && values[i]);","\t\t\t\t\tif (value != null)","\t\t\t\t\t\tcomponents[i] = value;","\t\t\t\t}","\t\t\t}","\t\t\tthis._components = components;","\t\t\tthis._properties = types[this._type];","\t\t\tthis._alpha = alpha;","\t\t\tif (this.__read)","\t\t\t\tthis.__read = read;","\t\t},","","\t\t_serialize: function(options, dictionary) {","\t\t\tvar components = this.getComponents();","\t\t\treturn Base.serialize(","\t\t\t\t\t/^(gray|rgb)$/.test(this._type)","\t\t\t\t\t\t? components","\t\t\t\t\t\t: [this._type].concat(components),","\t\t\t\t\toptions, true, dictionary);","\t\t},","","\t\t_changed: function() {","\t\t\tthis._canvasStyle = null;","\t\t\tif (this._owner)","\t\t\t\tthis._owner._changed(65);","\t\t},","","\t\t_convert: function(type) {","\t\t\tvar converter;","\t\t\treturn this._type === type","\t\t\t\t\t? this._components.slice()","\t\t\t\t\t: (converter = converters[this._type + '-' + type])","\t\t\t\t\t\t? converter.apply(this, this._components)","\t\t\t\t\t\t: converters['rgb-' + type].apply(this,","\t\t\t\t\t\t\tconverters[this._type + '-rgb'].apply(this,","\t\t\t\t\t\t\t\tthis._components));","\t\t},","","\t\tconvert: function(type) {","\t\t\treturn new Color(type, this._convert(type), this._alpha);","\t\t},","","\t\tgetType: function() {","\t\t\treturn this._type;","\t\t},","","\t\tsetType: function(type) {","\t\t\tthis._components = this._convert(type);","\t\t\tthis._properties = types[type];","\t\t\tthis._type = type;","\t\t},","","\t\tgetComponents: function() {","\t\t\tvar components = this._components.slice();","\t\t\tif (this._alpha != null)","\t\t\t\tcomponents.push(this._alpha);","\t\t\treturn components;","\t\t},","","\t\tgetAlpha: function() {","\t\t\treturn this._alpha != null ? this._alpha : 1;","\t\t},","","\t\tsetAlpha: function(alpha) {","\t\t\tthis._alpha = alpha == null ? null : Math.min(Math.max(alpha, 0), 1);","\t\t\tthis._changed();","\t\t},","","\t\thasAlpha: function() {","\t\t\treturn this._alpha != null;","\t\t},","","\t\tequals: function(color) {","\t\t\tvar col = Base.isPlainValue(color, true)","\t\t\t\t\t? Color.read(arguments)","\t\t\t\t\t: color;","\t\t\treturn col === this || col && this._class === col._class","\t\t\t\t\t&& this._type === col._type","\t\t\t\t\t&& this._alpha === col._alpha","\t\t\t\t\t&& Base.equals(this._components, col._components)","\t\t\t\t\t|| false;","\t\t},","","\t\ttoString: function() {","\t\t\tvar properties = this._properties,","\t\t\t\tparts = [],","\t\t\t\tisGradient = this._type === 'gradient',","\t\t\t\tf = Formatter.instance;","\t\t\tfor (var i = 0, l = properties.length; i < l; i++) {","\t\t\t\tvar value = this._components[i];","\t\t\t\tif (value != null)","\t\t\t\t\tparts.push(properties[i] + ': '","\t\t\t\t\t\t\t+ (isGradient ? value : f.number(value)));","\t\t\t}","\t\t\tif (this._alpha != null)","\t\t\t\tparts.push('alpha: ' + f.number(this._alpha));","\t\t\treturn '{ ' + parts.join(', ') + ' }';","\t\t},","","\t\ttoCSS: function(hex) {","\t\t\tvar components = this._convert('rgb'),","\t\t\t\talpha = hex || this._alpha == null ? 1 : this._alpha;","\t\t\tfunction convert(val) {","\t\t\t\treturn Math.round((val < 0 ? 0 : val > 1 ? 1 : val) * 255);","\t\t\t}","\t\t\tcomponents = [","\t\t\t\tconvert(components[0]),","\t\t\t\tconvert(components[1]),","\t\t\t\tconvert(components[2])","\t\t\t];","\t\t\tif (alpha < 1)","\t\t\t\tcomponents.push(alpha < 0 ? 0 : alpha);","\t\t\treturn hex","\t\t\t\t\t? '#' + ((1 << 24) + (components[0] << 16)","\t\t\t\t\t\t+ (components[1] << 8)","\t\t\t\t\t\t+ components[2]).toString(16).slice(1)","\t\t\t\t\t: (components.length == 4 ? 'rgba(' : 'rgb(')","\t\t\t\t\t\t+ components.join(',') + ')';","\t\t},","","\t\ttoCanvasStyle: function(ctx) {","\t\t\tif (this._canvasStyle)","\t\t\t\treturn this._canvasStyle;","\t\t\tif (this._type !== 'gradient')","\t\t\t\treturn this._canvasStyle = this.toCSS();","\t\t\tvar components = this._components,","\t\t\t\tgradient = components[0],","\t\t\t\tstops = gradient._stops,","\t\t\t\torigin = components[1],","\t\t\t\tdestination = components[2],","\t\t\t\tcanvasGradient;","\t\t\tif (gradient._radial) {","\t\t\t\tvar radius = destination.getDistance(origin),","\t\t\t\t\thighlight = components[3];","\t\t\t\tif (highlight) {","\t\t\t\t\tvar vector = highlight.subtract(origin);","\t\t\t\t\tif (vector.getLength() > radius)","\t\t\t\t\t\thighlight = origin.add(vector.normalize(radius - 0.1));","\t\t\t\t}","\t\t\t\tvar start = highlight || origin;","\t\t\t\tcanvasGradient = ctx.createRadialGradient(start.x, start.y,","\t\t\t\t\t\t0, origin.x, origin.y, radius);","\t\t\t} else {","\t\t\t\tcanvasGradient = ctx.createLinearGradient(origin.x, origin.y,","\t\t\t\t\t\tdestination.x, destination.y);","\t\t\t}","\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {","\t\t\t\tvar stop = stops[i];","\t\t\t\tcanvasGradient.addColorStop(stop._rampPoint,","\t\t\t\t\t\tstop._color.toCanvasStyle());","\t\t\t}","\t\t\treturn this._canvasStyle = canvasGradient;","\t\t},","","\t\ttransform: function(matrix) {","\t\t\tif (this._type === 'gradient') {","\t\t\t\tvar components = this._components;","\t\t\t\tfor (var i = 1, l = components.length; i < l; i++) {","\t\t\t\t\tvar point = components[i];","\t\t\t\t\tmatrix._transformPoint(point, point, true);","\t\t\t\t}","\t\t\t\tthis._changed();","\t\t\t}","\t\t},","","\t\tstatics: {","\t\t\t_types: types,","","\t\t\trandom: function() {","\t\t\t\tvar random = Math.random;","\t\t\t\treturn new Color(random(), random(), random());","\t\t\t}","\t\t}","\t});","}, new function() {","\tvar operators = {","\t\tadd: function(a, b) {","\t\t\treturn a + b;","\t\t},","","\t\tsubtract: function(a, b) {","\t\t\treturn a - b;","\t\t},","","\t\tmultiply: function(a, b) {","\t\t\treturn a * b;","\t\t},","","\t\tdivide: function(a, b) {","\t\t\treturn a / b;","\t\t}","\t};","","\treturn Base.each(operators, function(operator, name) {","\t\tthis[name] = function(color) {","\t\t\tcolor = Color.read(arguments);","\t\t\tvar type = this._type,","\t\t\t\tcomponents1 = this._components,","\t\t\t\tcomponents2 = color._convert(type);","\t\t\tfor (var i = 0, l = components1.length; i < l; i++)","\t\t\t\tcomponents2[i] = operator(components1[i], components2[i]);","\t\t\treturn new Color(type, components2,","\t\t\t\t\tthis._alpha != null","\t\t\t\t\t\t\t? operator(this._alpha, color.getAlpha())","\t\t\t\t\t\t\t: null);","\t\t};","\t}, {","\t});","});","","Base.each(Color._types, function(properties, type) {","\tvar ctor = this[Base.capitalize(type) + 'Color'] = function(arg) {","\t\t\tvar argType = arg != null && typeof arg,","\t\t\t\tcomponents = argType === 'object' && arg.length != null","\t\t\t\t\t? arg","\t\t\t\t\t: argType === 'string'","\t\t\t\t\t\t? null","\t\t\t\t\t\t: arguments;","\t\t\treturn components","\t\t\t\t\t? new Color(type, components)","\t\t\t\t\t: new Color(arg);","\t\t};","\tif (type.length == 3) {","\t\tvar acronym = type.toUpperCase();","\t\tColor[acronym] = this[acronym + 'Color'] = ctor;","\t}","}, Base.exports);","","var Gradient = Base.extend({","\t_class: 'Gradient',","","\tinitialize: function Gradient(stops, radial) {","\t\tthis._id = Gradient._id = (Gradient._id || 0) + 1;","\t\tif (stops && this._set(stops))","\t\t\tstops = radial = null;","\t\tif (!this._stops)","\t\t\tthis.setStops(stops || ['white', 'black']);","\t\tif (this._radial == null)","\t\t\tthis.setRadial(typeof radial === 'string' && radial === 'radial'","\t\t\t\t\t|| radial || false);","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn dictionary.add(this, function() {","\t\t\treturn Base.serialize([this._stops, this._radial],","\t\t\t\t\toptions, true, dictionary);","\t\t});","\t},","","\t_changed: function() {","\t\tfor (var i = 0, l = this._owners && this._owners.length; i < l; i++)","\t\t\tthis._owners[i]._changed();","\t},","","\t_addOwner: function(color) {","\t\tif (!this._owners)","\t\t\tthis._owners = [];","\t\tthis._owners.push(color);","\t},","","\t_removeOwner: function(color) {","\t\tvar index = this._owners ? this._owners.indexOf(color) : -1;","\t\tif (index != -1) {","\t\t\tthis._owners.splice(index, 1);","\t\t\tif (this._owners.length === 0)","\t\t\t\tthis._owners = undefined;","\t\t}","\t},","","\tclone: function() {","\t\tvar stops = [];","\t\tfor (var i = 0, l = this._stops.length; i < l; i++)","\t\t\tstops[i] = this._stops[i].clone();","\t\treturn new Gradient(stops);","\t},","","\tgetStops: function() {","\t\treturn this._stops;","\t},","","\tsetStops: function(stops) {","\t\tif (this.stops) {","\t\t\tfor (var i = 0, l = this._stops.length; i < l; i++)","\t\t\t\tthis._stops[i]._owner = undefined;","\t\t}","\t\tif (stops.length < 2)","\t\t\tthrow new Error(","\t\t\t\t\t'Gradient stop list needs to contain at least two stops.');","\t\tthis._stops = GradientStop.readAll(stops, 0, { clone: true });","\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {","\t\t\tvar stop = this._stops[i];","\t\t\tstop._owner = this;","\t\t\tif (stop._defaultRamp)","\t\t\t\tstop.setRampPoint(i / (l - 1));","\t\t}","\t\tthis._changed();","\t},","","\tgetRadial: function() {","\t\treturn this._radial;","\t},","","\tsetRadial: function(radial) {","\t\tthis._radial = radial;","\t\tthis._changed();","\t},","","\tequals: function(gradient) {","\t\tif (gradient === this)","\t\t\treturn true;","\t\tif (gradient && this._class === gradient._class","\t\t\t\t&& this._stops.length === gradient._stops.length) {","\t\t\tfor (var i = 0, l = this._stops.length; i < l; i++) {","\t\t\t\tif (!this._stops[i].equals(gradient._stops[i]))","\t\t\t\t\treturn false;","\t\t\t}","\t\t\treturn true;","\t\t}","\t\treturn false;","\t}","});","","var GradientStop = Base.extend({","\t_class: 'GradientStop',","","\tinitialize: function GradientStop(arg0, arg1) {","\t\tif (arg0) {","\t\t\tvar color, rampPoint;","\t\t\tif (arg1 === undefined && Array.isArray(arg0)) {","\t\t\t\tcolor = arg0[0];","\t\t\t\trampPoint = arg0[1];","\t\t\t} else if (arg0.color) {","\t\t\t\tcolor = arg0.color;","\t\t\t\trampPoint = arg0.rampPoint;","\t\t\t} else {","\t\t\t\tcolor = arg0;","\t\t\t\trampPoint = arg1;","\t\t\t}","\t\t\tthis.setColor(color);","\t\t\tthis.setRampPoint(rampPoint);","\t\t}","\t},","","\tclone: function() {","\t\treturn new GradientStop(this._color.clone(), this._rampPoint);","\t},","","\t_serialize: function(options, dictionary) {","\t\treturn Base.serialize([this._color, this._rampPoint], options, true,","\t\t\t\tdictionary);","\t},","","\t_changed: function() {","\t\tif (this._owner)","\t\t\tthis._owner._changed(65);","\t},","","\tgetRampPoint: function() {","\t\treturn this._rampPoint;","\t},","","\tsetRampPoint: function(rampPoint) {","\t\tthis._defaultRamp = rampPoint == null;","\t\tthis._rampPoint = rampPoint || 0;","\t\tthis._changed();","\t},","","\tgetColor: function() {","\t\treturn this._color;","\t},","","\tsetColor: function(color) {","\t\tthis._color = Color.read(arguments);","\t\tif (this._color === color)","\t\t\tthis._color = color.clone();","\t\tthis._color._owner = this;","\t\tthis._changed();","\t},","","\tequals: function(stop) {","\t\treturn stop === this || stop && this._class === stop._class","\t\t\t\t&& this._color.equals(stop._color)","\t\t\t\t&& this._rampPoint == stop._rampPoint","\t\t\t\t|| false;","\t}","});","","var Style = Base.extend(new function() {","\tvar defaults = {","\t\tfillColor: undefined,","\t\tstrokeColor: undefined,","\t\tstrokeWidth: 1,","\t\tstrokeCap: 'butt',","\t\tstrokeJoin: 'miter',","\t\tstrokeScaling: true,","\t\tmiterLimit: 10,","\t\tdashOffset: 0,","\t\tdashArray: [],","\t\twindingRule: 'nonzero',","\t\tshadowColor: undefined,","\t\tshadowBlur: 0,","\t\tshadowOffset: new Point(),","\t\tselectedColor: undefined,","\t\tfontFamily: 'sans-serif',","\t\tfontWeight: 'normal',","\t\tfontSize: 12,","\t\tfont: 'sans-serif',","\t\tleading: null,","\t\tjustification: 'left'","\t};","","\tvar flags = {","\t\tstrokeWidth: 97,","\t\tstrokeCap: 97,","\t\tstrokeJoin: 97,","\t\tstrokeScaling: 105,","\t\tmiterLimit: 97,","\t\tfontFamily: 9,","\t\tfontWeight: 9,","\t\tfontSize: 9,","\t\tfont: 9,","\t\tleading: 9,","\t\tjustification: 9","\t};","","\tvar item = { beans: true },","\t\tfields = {","\t\t\t_defaults: defaults,","\t\t\t_textDefaults: new Base(defaults, {","\t\t\t\tfillColor: new Color()","\t\t\t}),","\t\t\tbeans: true","\t\t};","","\tBase.each(defaults, function(value, key) {","\t\tvar isColor = /Color$/.test(key),","\t\t\tisPoint = key === 'shadowOffset',","\t\t\tpart = Base.capitalize(key),","\t\t\tflag = flags[key],","\t\t\tset = 'set' + part,","\t\t\tget = 'get' + part;","","\t\tfields[set] = function(value) {","\t\t\tvar owner = this._owner,","\t\t\t\tchildren = owner && owner._children;","\t\t\tif (children && children.length > 0","\t\t\t\t\t&& !(owner instanceof CompoundPath)) {","\t\t\t\tfor (var i = 0, l = children.length; i < l; i++)","\t\t\t\t\tchildren[i]._style[set](value);","\t\t\t} else {","\t\t\t\tvar old = this._values[key];","\t\t\t\tif (old !== value) {","\t\t\t\t\tif (isColor) {","\t\t\t\t\t\tif (old)","\t\t\t\t\t\t\told._owner = undefined;","\t\t\t\t\t\tif (value && value.constructor === Color) {","\t\t\t\t\t\t\tif (value._owner)","\t\t\t\t\t\t\t\tvalue = value.clone();","\t\t\t\t\t\t\tvalue._owner = owner;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\tthis._values[key] = value;","\t\t\t\t\tif (owner)","\t\t\t\t\t\towner._changed(flag || 65);","\t\t\t\t}","\t\t\t}","\t\t};","","\t\tfields[get] = function(_dontMerge) {","\t\t\tvar owner = this._owner,","\t\t\t\tchildren = owner && owner._children,","\t\t\t\tvalue;","\t\t\tif (!children || children.length === 0 || _dontMerge","\t\t\t\t\t|| owner instanceof CompoundPath) {","\t\t\t\tvar value = this._values[key];","\t\t\t\tif (value === undefined) {","\t\t\t\t\tvalue = this._defaults[key];","\t\t\t\t\tif (value && value.clone)","\t\t\t\t\t\tvalue = value.clone();","\t\t\t\t} else {","\t\t\t\t\tvar ctor = isColor ? Color : isPoint ? Point : null;","\t\t\t\t\tif (ctor && !(value && value.constructor === ctor)) {","\t\t\t\t\t\tthis._values[key] = value = ctor.read([value], 0,","\t\t\t\t\t\t\t\t{ readNull: true, clone: true });","\t\t\t\t\t\tif (value && isColor)","\t\t\t\t\t\t\tvalue._owner = owner;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\treturn value;","\t\t\t}","\t\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\t\tvar childValue = children[i]._style[get]();","\t\t\t\tif (i === 0) {","\t\t\t\t\tvalue = childValue;","\t\t\t\t} else if (!Base.equals(value, childValue)) {","\t\t\t\t\treturn undefined;","\t\t\t\t}","\t\t\t}","\t\t\treturn value;","\t\t};","","\t\titem[get] = function(_dontMerge) {","\t\t\treturn this._style[get](_dontMerge);","\t\t};","","\t\titem[set] = function(value) {","\t\t\tthis._style[set](value);","\t\t};","\t});","","\tItem.inject(item);","\treturn fields;","}, {","\t_class: 'Style',","","\tinitialize: function Style(style, _owner, _project) {","\t\tthis._values = {};","\t\tthis._owner = _owner;","\t\tthis._project = _owner && _owner._project || _project || paper.project;","\t\tif (_owner instanceof TextItem)","\t\t\tthis._defaults = this._textDefaults;","\t\tif (style)","\t\t\tthis.set(style);","\t},","","\tset: function(style) {","\t\tvar isStyle = style instanceof Style,","\t\t\tvalues = isStyle ? style._values : style;","\t\tif (values) {","\t\t\tfor (var key in values) {","\t\t\t\tif (key in this._defaults) {","\t\t\t\t\tvar value = values[key];","\t\t\t\t\tthis[key] = value && isStyle && value.clone","\t\t\t\t\t\t\t? value.clone() : value;","\t\t\t\t}","\t\t\t}","\t\t}","\t},","","\tequals: function(style) {","\t\treturn style === this || style && this._class === style._class","\t\t\t\t&& Base.equals(this._values, style._values)","\t\t\t\t|| false;","\t},","","\thasFill: function() {","\t\treturn !!this.getFillColor();","\t},","","\thasStroke: function() {","\t\treturn !!this.getStrokeColor() && this.getStrokeWidth() > 0;","\t},","","\thasShadow: function() {","\t\treturn !!this.getShadowColor() && this.getShadowBlur() > 0;","\t},","","\tgetView: function() {","\t\treturn this._project.getView();","\t},","","\tgetFontStyle: function() {","\t\tvar fontSize = this.getFontSize();","\t\treturn this.getFontWeight()","\t\t\t\t+ ' ' + fontSize + (/[a-z]/i.test(fontSize + '') ? ' ' : 'px ')","\t\t\t\t+ this.getFontFamily();","\t},","","\tgetFont: '#getFontFamily',","\tsetFont: '#setFontFamily',","","\tgetLeading: function getLeading() {","\t\tvar leading = getLeading.base.call(this),","\t\t\tfontSize = this.getFontSize();","\t\tif (/pt|em|%|px/.test(fontSize))","\t\t\tfontSize = this.getView().getPixelSize(fontSize);","\t\treturn leading != null ? leading : fontSize * 1.2;","\t}","","});","","var DomElement = new function() {","\tfunction handlePrefix(el, name, set, value) {","\t\tvar prefixes = ['', 'webkit', 'moz', 'Moz', 'ms', 'o'],","\t\t\tsuffix = name[0].toUpperCase() + name.substring(1);","\t\tfor (var i = 0; i < 6; i++) {","\t\t\tvar prefix = prefixes[i],","\t\t\t\tkey = prefix ? prefix + suffix : name;","\t\t\tif (key in el) {","\t\t\t\tif (set) {","\t\t\t\t\tel[key] = value;","\t\t\t\t} else {","\t\t\t\t\treturn el[key];","\t\t\t\t}","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t}","","\treturn {","\t\tgetStyles: function(el) {","\t\t\tvar doc = el && el.nodeType !== 9 ? el.ownerDocument : el,","\t\t\t\tview = doc && doc.defaultView;","\t\t\treturn view && view.getComputedStyle(el, '');","\t\t},","","\t\tgetBounds: function(el, viewport) {","\t\t\tvar doc = el.ownerDocument,","\t\t\t\tbody = doc.body,","\t\t\t\thtml = doc.documentElement,","\t\t\t\trect;","\t\t\ttry {","\t\t\t\trect = el.getBoundingClientRect();","\t\t\t} catch (e) {","\t\t\t\trect = { left: 0, top: 0, width: 0, height: 0 };","\t\t\t}","\t\t\tvar x = rect.left - (html.clientLeft || body.clientLeft || 0),","\t\t\t\ty = rect.top - (html.clientTop || body.clientTop || 0);","\t\t\tif (!viewport) {","\t\t\t\tvar view = doc.defaultView;","\t\t\t\tx += view.pageXOffset || html.scrollLeft || body.scrollLeft;","\t\t\t\ty += view.pageYOffset || html.scrollTop || body.scrollTop;","\t\t\t}","\t\t\treturn new Rectangle(x, y, rect.width, rect.height);","\t\t},","","\t\tgetViewportBounds: function(el) {","\t\t\tvar doc = el.ownerDocument,","\t\t\t\tview = doc.defaultView,","\t\t\t\thtml = doc.documentElement;","\t\t\treturn new Rectangle(0, 0,","\t\t\t\tview.innerWidth || html.clientWidth,","\t\t\t\tview.innerHeight || html.clientHeight","\t\t\t);","\t\t},","","\t\tgetOffset: function(el, viewport) {","\t\t\treturn DomElement.getBounds(el, viewport).getPoint();","\t\t},","","\t\tgetSize: function(el) {","\t\t\treturn DomElement.getBounds(el, true).getSize();","\t\t},","","\t\tisInvisible: function(el) {","\t\t\treturn DomElement.getSize(el).equals(new Size(0, 0));","\t\t},","","\t\tisInView: function(el) {","\t\t\treturn !DomElement.isInvisible(el)","\t\t\t\t\t&& DomElement.getViewportBounds(el).intersects(","\t\t\t\t\t\tDomElement.getBounds(el, true));","\t\t},","","\t\tgetPrefixed: function(el, name) {","\t\t\treturn handlePrefix(el, name);","\t\t},","","\t\tsetPrefixed: function(el, name, value) {","\t\t\tif (typeof name === 'object') {","\t\t\t\tfor (var key in name)","\t\t\t\t\thandlePrefix(el, key, true, name[key]);","\t\t\t} else {","\t\t\t\thandlePrefix(el, name, true, value);","\t\t\t}","\t\t}","\t};","};","","var DomEvent = {","\tadd: function(el, events) {","\t\tfor (var type in events) {","\t\t\tvar func = events[type],","\t\t\t\tparts = type.split(/[\\s,]+/g);","\t\t\tfor (var i = 0, l = parts.length; i < l; i++)","\t\t\t\tel.addEventListener(parts[i], func, false);","\t\t}","\t},","","\tremove: function(el, events) {","\t\tfor (var type in events) {","\t\t\tvar func = events[type],","\t\t\t\tparts = type.split(/[\\s,]+/g);","\t\t\tfor (var i = 0, l = parts.length; i < l; i++)","\t\t\t\tel.removeEventListener(parts[i], func, false);","\t\t}","\t},","","\tgetPoint: function(event) {","\t\tvar pos = event.targetTouches","\t\t\t\t? event.targetTouches.length","\t\t\t\t\t? event.targetTouches[0]","\t\t\t\t\t: event.changedTouches[0]","\t\t\t\t: event;","\t\treturn new Point(","\t\t\tpos.pageX || pos.clientX + document.documentElement.scrollLeft,","\t\t\tpos.pageY || pos.clientY + document.documentElement.scrollTop","\t\t);","\t},","","\tgetTarget: function(event) {","\t\treturn event.target || event.srcElement;","\t},","","\tgetRelatedTarget: function(event) {","\t\treturn event.relatedTarget || event.toElement;","\t},","","\tgetOffset: function(event, target) {","\t\treturn DomEvent.getPoint(event).subtract(DomElement.getOffset(","\t\t\t\ttarget || DomEvent.getTarget(event)));","\t},","","\tstop: function(event) {","\t\tevent.stopPropagation();","\t\tevent.preventDefault();","\t}","};","","DomEvent.requestAnimationFrame = new function() {","\tvar nativeRequest = DomElement.getPrefixed(window, 'requestAnimationFrame'),","\t\trequested = false,","\t\tcallbacks = [],","\t\tfocused = true,","\t\ttimer;","","\tDomEvent.add(window, {","\t\tfocus: function() {","\t\t\tfocused = true;","\t\t},","\t\tblur: function() {","\t\t\tfocused = false;","\t\t}","\t});","","\tfunction handleCallbacks() {","\t\tfor (var i = callbacks.length - 1; i >= 0; i--) {","\t\t\tvar entry = callbacks[i],","\t\t\t\tfunc = entry[0],","\t\t\t\tel = entry[1];","\t\t\tif (!el || (PaperScope.getAttribute(el, 'keepalive') == 'true'","\t\t\t\t\t|| focused) && DomElement.isInView(el)) {","\t\t\t\tcallbacks.splice(i, 1);","\t\t\t\tfunc();","\t\t\t}","\t\t}","\t\tif (nativeRequest) {","\t\t\tif (callbacks.length) {","\t\t\t\tnativeRequest(handleCallbacks);","\t\t\t} else {","\t\t\t\trequested = false;","\t\t\t}","\t\t}","\t}","","\treturn function(callback, element) {","\t\tcallbacks.push([callback, element]);","\t\tif (nativeRequest) {","\t\t\tif (!requested) {","\t\t\t\tnativeRequest(handleCallbacks);","\t\t\t\trequested = true;","\t\t\t}","\t\t} else if (!timer) {","\t\t\ttimer = setInterval(handleCallbacks, 1000 / 60);","\t\t}","\t};","};","","var View = Base.extend(Emitter, {","\t_class: 'View',","","\tinitialize: function View(project, element) {","\t\tthis._project = project;","\t\tthis._scope = project._scope;","\t\tthis._element = element;","\t\tvar size;","\t\tif (!this._pixelRatio)","\t\t\tthis._pixelRatio = window.devicePixelRatio || 1;","\t\tthis._id = element.getAttribute('id');","\t\tif (this._id == null)","\t\t\telement.setAttribute('id', this._id = 'view-' + View._id++);","\t\tDomEvent.add(element, this._viewEvents);","\t\tvar none = 'none';","\t\tDomElement.setPrefixed(element.style, {","\t\t\tuserSelect: none,","\t\t\ttouchAction: none,","\t\t\ttouchCallout: none,","\t\t\tcontentZooming: none,","\t\t\tuserDrag: none,","\t\t\ttapHighlightColor: 'rgba(0,0,0,0)'","\t\t});","","\t\tfunction getSize(name) {","\t\t\treturn element[name] || parseInt(element.getAttribute(name), 10);","\t\t};","","\t\tfunction getCanvasSize() {","\t\t\tvar size = DomElement.getSize(element);","\t\t\treturn size.isNaN() || size.isZero()","\t\t\t\t\t? new Size(getSize('width'), getSize('height'))","\t\t\t\t\t: size;","\t\t};","","\t\tif (PaperScope.hasAttribute(element, 'resize')) {","\t\t\tvar that = this;","\t\t\tDomEvent.add(window, this._windowEvents = {","\t\t\t\tresize: function() {","\t\t\t\t\tthat.setViewSize(getCanvasSize());","\t\t\t\t}","\t\t\t});","\t\t}","\t\tthis._setViewSize(size = getCanvasSize());","\t\tif (PaperScope.hasAttribute(element, 'stats')","\t\t\t\t&& typeof Stats !== 'undefined') {","\t\t\tthis._stats = new Stats();","\t\t\tvar stats = this._stats.domElement,","\t\t\t\tstyle = stats.style,","\t\t\t\toffset = DomElement.getOffset(element);","\t\t\tstyle.position = 'absolute';","\t\t\tstyle.left = offset.x + 'px';","\t\t\tstyle.top = offset.y + 'px';","\t\t\tdocument.body.appendChild(stats);","\t\t}","\t\tView._views.push(this);","\t\tView._viewsById[this._id] = this;","\t\tthis._viewSize = size;","\t\t(this._matrix = new Matrix())._owner = this;","\t\tthis._zoom = 1;","\t\tif (!View._focused)","\t\t\tView._focused = this;","\t\tthis._frameItems = {};","\t\tthis._frameItemCount = 0;","\t},","","\tremove: function() {","\t\tif (!this._project)","\t\t\treturn false;","\t\tif (View._focused === this)","\t\t\tView._focused = null;","\t\tView._views.splice(View._views.indexOf(this), 1);","\t\tdelete View._viewsById[this._id];","\t\tif (this._project._view === this)","\t\t\tthis._project._view = null;","\t\tDomEvent.remove(this._element, this._viewEvents);","\t\tDomEvent.remove(window, this._windowEvents);","\t\tthis._element = this._project = null;","\t\tthis.off('frame');","\t\tthis._animate = false;","\t\tthis._frameItems = {};","\t\treturn true;","\t},","","\t_events: {","\t\tonFrame: {","\t\t\tinstall: function() {","\t\t\t\tthis.play();","\t\t\t},","","\t\t\tuninstall: function() {","\t\t\t\tthis.pause();","\t\t\t}","\t\t},","","\t\tonResize: {}","\t},","","\t_animate: false,","\t_time: 0,","\t_count: 0,","","\t_requestFrame: function() {","\t\tvar that = this;","\t\tDomEvent.requestAnimationFrame(function() {","\t\t\tthat._requested = false;","\t\t\tif (!that._animate)","\t\t\t\treturn;","\t\t\tthat._requestFrame();","\t\t\tthat._handleFrame();","\t\t}, this._element);","\t\tthis._requested = true;","\t},","","\t_handleFrame: function() {","\t\tpaper = this._scope;","\t\tvar now = Date.now() / 1000,","\t\t\tdelta = this._before ? now - this._before : 0;","\t\tthis._before = now;","\t\tthis._handlingFrame = true;","\t\tthis.emit('frame', new Base({","\t\t\tdelta: delta,","\t\t\ttime: this._time += delta,","\t\t\tcount: this._count++","\t\t}));","\t\tif (this._stats)","\t\t\tthis._stats.update();","\t\tthis._handlingFrame = false;","\t\tthis.update();","\t},","","\t_animateItem: function(item, animate) {","\t\tvar items = this._frameItems;","\t\tif (animate) {","\t\t\titems[item._id] = {","\t\t\t\titem: item,","\t\t\t\ttime: 0,","\t\t\t\tcount: 0","\t\t\t};","\t\t\tif (++this._frameItemCount === 1)","\t\t\t\tthis.on('frame', this._handleFrameItems);","\t\t} else {","\t\t\tdelete items[item._id];","\t\t\tif (--this._frameItemCount === 0) {","\t\t\t\tthis.off('frame', this._handleFrameItems);","\t\t\t}","\t\t}","\t},","","\t_handleFrameItems: function(event) {","\t\tfor (var i in this._frameItems) {","\t\t\tvar entry = this._frameItems[i];","\t\t\tentry.item.emit('frame', new Base(event, {","\t\t\t\ttime: entry.time += event.delta,","\t\t\t\tcount: entry.count++","\t\t\t}));","\t\t}","\t},","","\t_update: function() {","\t\tthis._project._needsUpdate = true;","\t\tif (this._handlingFrame)","\t\t\treturn;","\t\tif (this._animate) {","\t\t\tthis._handleFrame();","\t\t} else {","\t\t\tthis.update();","\t\t}","\t},","","\t_changed: function(flags) {","\t\tif (flags & 1)","\t\t\tthis._project._needsUpdate = true;","\t},","","\t_transform: function(matrix) {","\t\tthis._matrix.concatenate(matrix);","\t\tthis._bounds = null;","\t\tthis._update();","\t},","","\tgetElement: function() {","\t\treturn this._element;","\t},","","\tgetPixelRatio: function() {","\t\treturn this._pixelRatio;","\t},","","\tgetResolution: function() {","\t\treturn this._pixelRatio * 72;","\t},","","\tgetViewSize: function() {","\t\tvar size = this._viewSize;","\t\treturn new LinkedSize(size.width, size.height, this, 'setViewSize');","\t},","","\tsetViewSize: function() {","\t\tvar size = Size.read(arguments),","\t\t\tdelta = size.subtract(this._viewSize);","\t\tif (delta.isZero())","\t\t\treturn;","\t\tthis._viewSize.set(size.width, size.height);","\t\tthis._setViewSize(size);","\t\tthis._bounds = null;","\t\tthis.emit('resize', {","\t\t\tsize: size,","\t\t\tdelta: delta","\t\t});","\t\tthis._update();","\t},","","\t_setViewSize: function(size) {","\t\tvar element = this._element;","\t\telement.width = size.width;","\t\telement.height = size.height;","\t},","","\tgetBounds: function() {","\t\tif (!this._bounds)","\t\t\tthis._bounds = this._matrix.inverted()._transformBounds(","\t\t\t\t\tnew Rectangle(new Point(), this._viewSize));","\t\treturn this._bounds;","\t},","","\tgetSize: function() {","\t\treturn this.getBounds().getSize();","\t},","","\tgetCenter: function() {","\t\treturn this.getBounds().getCenter();","\t},","","\tsetCenter: function() {","\t\tvar center = Point.read(arguments);","\t\tthis.scrollBy(center.subtract(this.getCenter()));","\t},","","\tgetZoom: function() {","\t\treturn this._zoom;","\t},","","\tsetZoom: function(zoom) {","\t\tthis._transform(new Matrix().scale(zoom / this._zoom,","\t\t\tthis.getCenter()));","\t\tthis._zoom = zoom;","\t},","","\tisVisible: function() {","\t\treturn DomElement.isInView(this._element);","\t},","","\tscrollBy: function() {","\t\tthis._transform(new Matrix().translate(Point.read(arguments).negate()));","\t},","","\tplay: function() {","\t\tthis._animate = true;","\t\tif (!this._requested)","\t\t\tthis._requestFrame();","\t},","","\tpause: function() {","\t\tthis._animate = false;","\t},","","\tdraw: function() {","\t\tthis.update();","\t},","","\tprojectToView: function() {","\t\treturn this._matrix._transformPoint(Point.read(arguments));","\t},","","\tviewToProject: function() {","\t\treturn this._matrix._inverseTransform(Point.read(arguments));","\t}","","}, {","\tstatics: {","\t\t_views: [],","\t\t_viewsById: {},","\t\t_id: 0,","","\t\tcreate: function(project, element) {","\t\t\tif (typeof element === 'string')","\t\t\t\telement = document.getElementById(element);","\t\t\treturn new CanvasView(project, element);","\t\t}","\t}","}, new function() {","\tvar tool,","\t\tprevFocus,","\t\ttempFocus,","\t\tdragging = false;","","\tfunction getView(event) {","\t\tvar target = DomEvent.getTarget(event);","\t\treturn target.getAttribute && View._viewsById[target.getAttribute('id')];","\t}","","\tfunction viewToProject(view, event) {","\t\treturn view.viewToProject(DomEvent.getOffset(event, view._element));","\t}","","\tfunction updateFocus() {","\t\tif (!View._focused || !View._focused.isVisible()) {","\t\t\tfor (var i = 0, l = View._views.length; i < l; i++) {","\t\t\t\tvar view = View._views[i];","\t\t\t\tif (view && view.isVisible()) {","\t\t\t\t\tView._focused = tempFocus = view;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t}","\t}","","\tfunction handleMouseMove(view, point, event) {","\t\tview._handleEvent('mousemove', point, event);","\t\tvar tool = view._scope.tool;","\t\tif (tool) {","\t\t\ttool._handleEvent(dragging && tool.responds('mousedrag')","\t\t\t\t\t? 'mousedrag' : 'mousemove', point, event);","\t\t}","\t\tview.update();","\t\treturn tool;","\t}","","\tvar navigator = window.navigator,","\t\tmousedown, mousemove, mouseup;","\tif (navigator.pointerEnabled || navigator.msPointerEnabled) {","\t\tmousedown = 'pointerdown MSPointerDown';","\t\tmousemove = 'pointermove MSPointerMove';","\t\tmouseup = 'pointerup pointercancel MSPointerUp MSPointerCancel';","\t} else {","\t\tmousedown = 'touchstart';","\t\tmousemove = 'touchmove';","\t\tmouseup = 'touchend touchcancel';","\t\tif (!('ontouchstart' in window && navigator.userAgent.match(","\t\t\t\t/mobile|tablet|ip(ad|hone|od)|android|silk/i))) {","\t\t\tmousedown += ' mousedown';","\t\t\tmousemove += ' mousemove';","\t\t\tmouseup += ' mouseup';","\t\t}","\t}","","\tvar viewEvents = {","\t\t'selectstart dragstart': function(event) {","\t\t\tif (dragging)","\t\t\t\tevent.preventDefault();","\t\t}","\t};","","\tvar docEvents = {","\t\tmouseout: function(event) {","\t\t\tvar view = View._focused,","\t\t\t\ttarget = DomEvent.getRelatedTarget(event);","\t\t\tif (view && (!target || target.nodeName === 'HTML'))","\t\t\t\thandleMouseMove(view, viewToProject(view, event), event);","\t\t},","","\t\tscroll: updateFocus","\t};","","\tviewEvents[mousedown] = function(event) {","\t\tvar view = View._focused = getView(event),","\t\t\tpoint = viewToProject(view, event);","\t\tdragging = true;","\t\tview._handleEvent('mousedown', point, event);","\t\tif (tool = view._scope.tool)","\t\t\ttool._handleEvent('mousedown', point, event);","\t\tview.update();","\t};","","\tdocEvents[mousemove] = function(event) {","\t\tvar view = View._focused;","\t\tif (!dragging) {","\t\t\tvar target = getView(event);","\t\t\tif (target) {","\t\t\t\tif (view !== target)","\t\t\t\t\thandleMouseMove(view, viewToProject(view, event), event);","\t\t\t\tprevFocus = view;","\t\t\t\tview = View._focused = tempFocus = target;","\t\t\t} else if (tempFocus && tempFocus === view) {","\t\t\t\tview = View._focused = prevFocus;","\t\t\t\tupdateFocus();","\t\t\t}","\t\t}","\t\tif (view) {","\t\t\tvar point = viewToProject(view, event);","\t\t\tif (dragging || view.getBounds().contains(point))","\t\t\t\ttool = handleMouseMove(view, point, event);","\t\t}","\t};","","\tdocEvents[mouseup] = function(event) {","\t\tvar view = View._focused;","\t\tif (!view || !dragging)","\t\t\treturn;","\t\tvar point = viewToProject(view, event);","\t\tdragging = false;","\t\tview._handleEvent('mouseup', point, event);","\t\tif (tool)","\t\t\ttool._handleEvent('mouseup', point, event);","\t\tview.update();","\t};","","\tDomEvent.add(document, docEvents);","","\tDomEvent.add(window, {","\t\tload: updateFocus","\t});","","\treturn {","\t\t_viewEvents: viewEvents,","","\t\t_handleEvent: function() {},","","\t\tstatics: {","\t\t\tupdateFocus: updateFocus","\t\t}","\t};","});","","var CanvasView = View.extend({","\t_class: 'CanvasView',","","\tinitialize: function CanvasView(project, canvas) {","\t\tif (!(canvas instanceof HTMLCanvasElement)) {","\t\t\tvar size = Size.read(arguments, 1);","\t\t\tif (size.isZero())","\t\t\t\tthrow new Error(","\t\t\t\t\t\t'Cannot create CanvasView with the provided argument: '","\t\t\t\t\t\t+ [].slice.call(arguments, 1));","\t\t\tcanvas = CanvasProvider.getCanvas(size);","\t\t}","\t\tthis._context = canvas.getContext('2d');","\t\tthis._eventCounters = {};","\t\tthis._pixelRatio = 1;","\t\tif (!/^off|false$/.test(PaperScope.getAttribute(canvas, 'hidpi'))) {","\t\t\tvar deviceRatio = window.devicePixelRatio || 1,","\t\t\t\tbackingStoreRatio = DomElement.getPrefixed(this._context,","\t\t\t\t\t\t'backingStorePixelRatio') || 1;","\t\t\tthis._pixelRatio = deviceRatio / backingStoreRatio;","\t\t}","\t\tView.call(this, project, canvas);","\t},","","\t_setViewSize: function(size) {","\t\tvar element = this._element,","\t\t\tpixelRatio = this._pixelRatio,","\t\t\twidth = size.width,","\t\t\theight = size.height;","\t\telement.width = width * pixelRatio;","\t\telement.height = height * pixelRatio;","\t\tif (pixelRatio !== 1) {","\t\t\tif (!PaperScope.hasAttribute(element, 'resize')) {","\t\t\t\tvar style = element.style;","\t\t\t\tstyle.width = width + 'px';","\t\t\t\tstyle.height = height + 'px';","\t\t\t}","\t\t\tthis._context.scale(pixelRatio, pixelRatio);","\t\t}","\t},","","\tgetPixelSize: function(size) {","\t\tvar ctx = this._context,","\t\t\tprevFont = ctx.font;","\t\tctx.font = size + ' serif';","\t\tsize = parseFloat(ctx.font);","\t\tctx.font = prevFont;","\t\treturn size;","\t},","","\tgetTextWidth: function(font, lines) {","\t\tvar ctx = this._context,","\t\t\tprevFont = ctx.font,","\t\t\twidth = 0;","\t\tctx.font = font;","\t\tfor (var i = 0, l = lines.length; i < l; i++)","\t\t\twidth = Math.max(width, ctx.measureText(lines[i]).width);","\t\tctx.font = prevFont;","\t\treturn width;","\t},","","\tupdate: function() {","\t\tvar project = this._project;","\t\tif (!project || !project._needsUpdate)","\t\t\treturn false;","\t\tvar ctx = this._context,","\t\t\tsize = this._viewSize;","\t\tctx.clearRect(0, 0, size.width + 1, size.height + 1);","\t\tproject.draw(ctx, this._matrix, this._pixelRatio);","\t\tproject._needsUpdate = false;","\t\treturn true;","\t}","}, new function() {","","\tvar downPoint,","\t\tlastPoint,","\t\toverPoint,","\t\tdownItem,","\t\tlastItem,","\t\toverItem,","\t\tdragItem,","\t\tdblClick,","\t\tclickTime;","","\tfunction callEvent(view, type, event, point, target, lastPoint) {","\t\tvar item = target,","\t\t\tmouseEvent;","","\t\tfunction call(obj) {","\t\t\tif (obj.responds(type)) {","\t\t\t\tif (!mouseEvent) {","\t\t\t\t\tmouseEvent = new MouseEvent(type, event, point, target,","\t\t\t\t\t\t\tlastPoint ? point.subtract(lastPoint) : null);","\t\t\t\t}","\t\t\t\tif (obj.emit(type, mouseEvent) && mouseEvent.isStopped) {","\t\t\t\t\tevent.preventDefault();","\t\t\t\t\treturn true;","\t\t\t\t}","\t\t\t}","\t\t}","","\t\twhile (item) {","\t\t\tif (call(item))","\t\t\t\treturn true;","\t\t\titem = item.getParent();","\t\t}","\t\tif (call(view))","\t\t\treturn true;","\t\treturn false;","\t}","","\treturn {","\t\t_handleEvent: function(type, point, event) {","\t\t\tif (!this._eventCounters[type])","\t\t\t\treturn;","\t\t\tvar project = this._project,","\t\t\t\thit = project.hitTest(point, {","\t\t\t\t\ttolerance: 0,","\t\t\t\t\tfill: true,","\t\t\t\t\tstroke: true","\t\t\t\t}),","\t\t\t\titem = hit && hit.item,","\t\t\t\tstopped = false;","\t\t\tswitch (type) {","\t\t\tcase 'mousedown':","\t\t\t\tstopped = callEvent(this, type, event, point, item);","\t\t\t\tdblClick = lastItem == item && (Date.now() - clickTime < 300);","\t\t\t\tdownItem = lastItem = item;","\t\t\t\tdownPoint = lastPoint = overPoint = point;","\t\t\t\tdragItem = !stopped && item;","\t\t\t\twhile (dragItem && !dragItem.responds('mousedrag'))","\t\t\t\t\tdragItem = dragItem._parent;","\t\t\t\tbreak;","\t\t\tcase 'mouseup':","\t\t\t\tstopped = callEvent(this, type, event, point, item, downPoint);","\t\t\t\tif (dragItem) {","\t\t\t\t\tif (lastPoint && !lastPoint.equals(point))","\t\t\t\t\t\tcallEvent(this, 'mousedrag', event, point, dragItem,","\t\t\t\t\t\t\t\tlastPoint);","\t\t\t\t\tif (item !== dragItem) {","\t\t\t\t\t\toverPoint = point;","\t\t\t\t\t\tcallEvent(this, 'mousemove', event, point, item,","\t\t\t\t\t\t\t\toverPoint);","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tif (!stopped && item && item === downItem) {","\t\t\t\t\tclickTime = Date.now();","\t\t\t\t\tcallEvent(this, dblClick && downItem.responds('doubleclick')","\t\t\t\t\t\t\t? 'doubleclick' : 'click', event, downPoint, item);","\t\t\t\t\tdblClick = false;","\t\t\t\t}","\t\t\t\tdownItem = dragItem = null;","\t\t\t\tbreak;","\t\t\tcase 'mousemove':","\t\t\t\tif (dragItem)","\t\t\t\t\tstopped = callEvent(this, 'mousedrag', event, point,","\t\t\t\t\t\t\tdragItem, lastPoint);","\t\t\t\tif (!stopped) {","\t\t\t\t\tif (item !== overItem)","\t\t\t\t\t\toverPoint = point;","\t\t\t\t\tstopped = callEvent(this, type, event, point, item,","\t\t\t\t\t\t\toverPoint);","\t\t\t\t}","\t\t\t\tlastPoint = overPoint = point;","\t\t\t\tif (item !== overItem) {","\t\t\t\t\tcallEvent(this, 'mouseleave', event, point, overItem);","\t\t\t\t\toverItem = item;","\t\t\t\t\tcallEvent(this, 'mouseenter', event, point, item);","\t\t\t\t}","\t\t\t\tbreak;","\t\t\t}","\t\t\treturn stopped;","\t\t}","\t};","});","","var Event = Base.extend({","\t_class: 'Event',","","\tinitialize: function Event(event) {","\t\tthis.event = event;","\t},","","\tisPrevented: false,","\tisStopped: false,","","\tpreventDefault: function() {","\t\tthis.isPrevented = true;","\t\tthis.event.preventDefault();","\t},","","\tstopPropagation: function() {","\t\tthis.isStopped = true;","\t\tthis.event.stopPropagation();","\t},","","\tstop: function() {","\t\tthis.stopPropagation();","\t\tthis.preventDefault();","\t},","","\tgetModifiers: function() {","\t\treturn Key.modifiers;","\t}","});","","var KeyEvent = Event.extend({","\t_class: 'KeyEvent',","","\tinitialize: function KeyEvent(down, key, character, event) {","\t\tEvent.call(this, event);","\t\tthis.type = down ? 'keydown' : 'keyup';","\t\tthis.key = key;","\t\tthis.character = character;","\t},","","\ttoString: function() {","\t\treturn \"{ type: '\" + this.type","\t\t\t\t+ \"', key: '\" + this.key","\t\t\t\t+ \"', character: '\" + this.character","\t\t\t\t+ \"', modifiers: \" + this.getModifiers()","\t\t\t\t+ \" }\";","\t}","});","","var Key = new function() {","","\tvar specialKeys = {","\t\t8: 'backspace',","\t\t9: 'tab',","\t\t13: 'enter',","\t\t16: 'shift',","\t\t17: 'control',","\t\t18: 'option',","\t\t19: 'pause',","\t\t20: 'caps-lock',","\t\t27: 'escape',","\t\t32: 'space',","\t\t35: 'end',","\t\t36: 'home',","\t\t37: 'left',","\t\t38: 'up',","\t\t39: 'right',","\t\t40: 'down',","\t\t46: 'delete',","\t\t91: 'command',","\t\t93: 'command',","\t\t224: 'command'","\t},","","\tspecialChars = {","\t\t9: true,","\t\t13: true,","\t\t32: true","\t},","","\tmodifiers = new Base({","\t\tshift: false,","\t\tcontrol: false,","\t\toption: false,","\t\tcommand: false,","\t\tcapsLock: false,","\t\tspace: false","\t}),","","\tcharCodeMap = {},","\tkeyMap = {},","\tdownCode;","","\tfunction handleKey(down, keyCode, charCode, event) {","\t\tvar character = charCode ? String.fromCharCode(charCode) : '',","\t\t\tspecialKey = specialKeys[keyCode],","\t\t\tkey = specialKey || character.toLowerCase(),","\t\t\ttype = down ? 'keydown' : 'keyup',","\t\t\tview = View._focused,","\t\t\tscope = view && view.isVisible() && view._scope,","\t\t\ttool = scope && scope.tool,","\t\t\tname;","\t\tkeyMap[key] = down;","\t\tif (specialKey && (name = Base.camelize(specialKey)) in modifiers)","\t\t\tmodifiers[name] = down;","\t\tif (down) {","\t\t\tcharCodeMap[keyCode] = charCode;","\t\t} else {","\t\t\tdelete charCodeMap[keyCode];","\t\t}","\t\tif (tool && tool.responds(type)) {","\t\t\tpaper = scope;","\t\t\ttool.emit(type, new KeyEvent(down, key, character, event));","\t\t\tif (view)","\t\t\t\tview.update();","\t\t}","\t}","","\tDomEvent.add(document, {","\t\tkeydown: function(event) {","\t\t\tvar code = event.which || event.keyCode;","\t\t\tif (code in specialKeys || modifiers.command) {","\t\t\t\thandleKey(true, code,","\t\t\t\t\t\tcode in specialChars || modifiers.command ? code : 0,","\t\t\t\t\t\tevent);","\t\t\t} else {","\t\t\t\tdownCode = code;","\t\t\t}","\t\t},","","\t\tkeypress: function(event) {","\t\t\tif (downCode != null) {","\t\t\t\thandleKey(true, downCode, event.which || event.keyCode, event);","\t\t\t\tdownCode = null;","\t\t\t}","\t\t},","","\t\tkeyup: function(event) {","\t\t\tvar code = event.which || event.keyCode;","\t\t\tif (code in charCodeMap)","\t\t\t\thandleKey(false, code, charCodeMap[code], event);","\t\t}","\t});","","\tDomEvent.add(window, {","\t\tblur: function(event) {","\t\t\tfor (var code in charCodeMap)","\t\t\t\thandleKey(false, code, charCodeMap[code], event);","\t\t}","\t});","","\treturn {","\t\tmodifiers: modifiers,","","\t\tisDown: function(key) {","\t\t\treturn !!keyMap[key];","\t\t}","\t};","};","","var MouseEvent = Event.extend({","\t_class: 'MouseEvent',","","\tinitialize: function MouseEvent(type, event, point, target, delta) {","\t\tEvent.call(this, event);","\t\tthis.type = type;","\t\tthis.point = point;","\t\tthis.target = target;","\t\tthis.delta = delta;","\t},","","\ttoString: function() {","\t\treturn \"{ type: '\" + this.type","\t\t\t\t+ \"', point: \" + this.point","\t\t\t\t+ ', target: ' + this.target","\t\t\t\t+ (this.delta ? ', delta: ' + this.delta : '')","\t\t\t\t+ ', modifiers: ' + this.getModifiers()","\t\t\t\t+ ' }';","\t}","});","","var ToolEvent = Event.extend({","\t_class: 'ToolEvent',","\t_item: null,","","\tinitialize: function ToolEvent(tool, type, event) {","\t\tthis.tool = tool;","\t\tthis.type = type;","\t\tthis.event = event;","\t},","","\t_choosePoint: function(point, toolPoint) {","\t\treturn point ? point : toolPoint ? toolPoint.clone() : null;","\t},","","\tgetPoint: function() {","\t\treturn this._choosePoint(this._point, this.tool._point);","\t},","","\tsetPoint: function(point) {","\t\tthis._point = point;","\t},","","\tgetLastPoint: function() {","\t\treturn this._choosePoint(this._lastPoint, this.tool._lastPoint);","\t},","","\tsetLastPoint: function(lastPoint) {","\t\tthis._lastPoint = lastPoint;","\t},","","\tgetDownPoint: function() {","\t\treturn this._choosePoint(this._downPoint, this.tool._downPoint);","\t},","","\tsetDownPoint: function(downPoint) {","\t\tthis._downPoint = downPoint;","\t},","","\tgetMiddlePoint: function() {","\t\tif (!this._middlePoint && this.tool._lastPoint) {","\t\t\treturn this.tool._point.add(this.tool._lastPoint).divide(2);","\t\t}","\t\treturn this._middlePoint;","\t},","","\tsetMiddlePoint: function(middlePoint) {","\t\tthis._middlePoint = middlePoint;","\t},","","\tgetDelta: function() {","\t\treturn !this._delta && this.tool._lastPoint","\t\t\t\t? this.tool._point.subtract(this.tool._lastPoint)","\t\t\t\t: this._delta;","\t},","","\tsetDelta: function(delta) {","\t\tthis._delta = delta;","\t},","","\tgetCount: function() {","\t\treturn /^mouse(down|up)$/.test(this.type)","\t\t\t\t? this.tool._downCount","\t\t\t\t: this.tool._count;","\t},","","\tsetCount: function(count) {","\t\tthis.tool[/^mouse(down|up)$/.test(this.type) ? 'downCount' : 'count']","\t\t\t= count;","\t},","","\tgetItem: function() {","\t\tif (!this._item) {","\t\t\tvar result = this.tool._scope.project.hitTest(this.getPoint());","\t\t\tif (result) {","\t\t\t\tvar item = result.item,","\t\t\t\t\tparent = item._parent;","\t\t\t\twhile (/^(Group|CompoundPath)$/.test(parent._class)) {","\t\t\t\t\titem = parent;","\t\t\t\t\tparent = parent._parent;","\t\t\t\t}","\t\t\t\tthis._item = item;","\t\t\t}","\t\t}","\t\treturn this._item;","\t},","","\tsetItem: function(item) {","\t\tthis._item = item;","\t},","","\ttoString: function() {","\t\treturn '{ type: ' + this.type","\t\t\t\t+ ', point: ' + this.getPoint()","\t\t\t\t+ ', count: ' + this.getCount()","\t\t\t\t+ ', modifiers: ' + this.getModifiers()","\t\t\t\t+ ' }';","\t}","});","","var Tool = PaperScopeItem.extend({","\t_class: 'Tool',","\t_list: 'tools',","\t_reference: 'tool',","\t_events: [ 'onActivate', 'onDeactivate', 'onEditOptions',","\t\t\t'onMouseDown', 'onMouseUp', 'onMouseDrag', 'onMouseMove',","\t\t\t'onKeyDown', 'onKeyUp' ],","","\tinitialize: function Tool(props) {","\t\tPaperScopeItem.call(this);","\t\tthis._firstMove = true;","\t\tthis._count = 0;","\t\tthis._downCount = 0;","\t\tthis._set(props);","\t},","","\tgetMinDistance: function() {","\t\treturn this._minDistance;","\t},","","\tsetMinDistance: function(minDistance) {","\t\tthis._minDistance = minDistance;","\t\tif (this._minDistance != null && this._maxDistance != null","\t\t\t\t&& this._minDistance > this._maxDistance) {","\t\t\tthis._maxDistance = this._minDistance;","\t\t}","\t},","","\tgetMaxDistance: function() {","\t\treturn this._maxDistance;","\t},","","\tsetMaxDistance: function(maxDistance) {","\t\tthis._maxDistance = maxDistance;","\t\tif (this._minDistance != null && this._maxDistance != null","\t\t\t\t&& this._maxDistance < this._minDistance) {","\t\t\tthis._minDistance = maxDistance;","\t\t}","\t},","","\tgetFixedDistance: function() {","\t\treturn this._minDistance == this._maxDistance","\t\t\t? this._minDistance : null;","\t},","","\tsetFixedDistance: function(distance) {","\t\tthis._minDistance = distance;","\t\tthis._maxDistance = distance;","\t},","","\t_updateEvent: function(type, point, minDistance, maxDistance, start,","\t\t\tneedsChange, matchMaxDistance) {","\t\tif (!start) {","\t\t\tif (minDistance != null || maxDistance != null) {","\t\t\t\tvar minDist = minDistance != null ? minDistance : 0,","\t\t\t\t\tvector = point.subtract(this._point),","\t\t\t\t\tdistance = vector.getLength();","\t\t\t\tif (distance < minDist)","\t\t\t\t\treturn false;","\t\t\t\tvar maxDist = maxDistance != null ? maxDistance : 0;","\t\t\t\tif (maxDist != 0) {","\t\t\t\t\tif (distance > maxDist) {","\t\t\t\t\t\tpoint = this._point.add(vector.normalize(maxDist));","\t\t\t\t\t} else if (matchMaxDistance) {","\t\t\t\t\t\treturn false;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\tif (needsChange && point.equals(this._point))","\t\t\t\treturn false;","\t\t}","\t\tthis._lastPoint = start && type == 'mousemove' ? point : this._point;","\t\tthis._point = point;","\t\tswitch (type) {","\t\tcase 'mousedown':","\t\t\tthis._lastPoint = this._downPoint;","\t\t\tthis._downPoint = this._point;","\t\t\tthis._downCount++;","\t\t\tbreak;","\t\tcase 'mouseup':","\t\t\tthis._lastPoint = this._downPoint;","\t\t\tbreak;","\t\t}","\t\tthis._count = start ? 0 : this._count + 1;","\t\treturn true;","\t},","","\t_fireEvent: function(type, event) {","\t\tvar sets = paper.project._removeSets;","\t\tif (sets) {","\t\t\tif (type === 'mouseup')","\t\t\t\tsets.mousedrag = null;","\t\t\tvar set = sets[type];","\t\t\tif (set) {","\t\t\t\tfor (var id in set) {","\t\t\t\t\tvar item = set[id];","\t\t\t\t\tfor (var key in sets) {","\t\t\t\t\t\tvar other = sets[key];","\t\t\t\t\t\tif (other && other != set)","\t\t\t\t\t\t\tdelete other[item._id];","\t\t\t\t\t}","\t\t\t\t\titem.remove();","\t\t\t\t}","\t\t\t\tsets[type] = null;","\t\t\t}","\t\t}","\t\treturn this.responds(type)","\t\t\t\t&& this.emit(type, new ToolEvent(this, type, event));","\t},","","\t_handleEvent: function(type, point, event) {","\t\tpaper = this._scope;","\t\tvar called = false;","\t\tswitch (type) {","\t\tcase 'mousedown':","\t\t\tthis._updateEvent(type, point, null, null, true, false, false);","\t\t\tcalled = this._fireEvent(type, event);","\t\t\tbreak;","\t\tcase 'mousedrag':","\t\t\tvar needsChange = false,","\t\t\t\tmatchMaxDistance = false;","\t\t\twhile (this._updateEvent(type, point, this.minDistance,","\t\t\t\t\tthis.maxDistance, false, needsChange, matchMaxDistance)) {","\t\t\t\tcalled = this._fireEvent(type, event) || called;","\t\t\t\tneedsChange = true;","\t\t\t\tmatchMaxDistance = true;","\t\t\t}","\t\t\tbreak;","\t\tcase 'mouseup':","\t\t\tif (!point.equals(this._point)","\t\t\t\t\t&& this._updateEvent('mousedrag', point, this.minDistance,","\t\t\t\t\t\t\tthis.maxDistance, false, false, false)) {","\t\t\t\tcalled = this._fireEvent('mousedrag', event);","\t\t\t}","\t\t\tthis._updateEvent(type, point, null, this.maxDistance, false,","\t\t\t\t\tfalse, false);","\t\t\tcalled = this._fireEvent(type, event) || called;","\t\t\tthis._updateEvent(type, point, null, null, true, false, false);","\t\t\tthis._firstMove = true;","\t\t\tbreak;","\t\tcase 'mousemove':","\t\t\twhile (this._updateEvent(type, point, this.minDistance,","\t\t\t\t\tthis.maxDistance, this._firstMove, true, false)) {","\t\t\t\tcalled = this._fireEvent(type, event) || called;","\t\t\t\tthis._firstMove = false;","\t\t\t}","\t\t\tbreak;","\t\t}","\t\tif (called)","\t\t\tevent.preventDefault();","\t\treturn called;","\t}","","});","","var Http = {","\trequest: function(method, url, callback) {","\t\tvar xhr = new (window.ActiveXObject || XMLHttpRequest)(","\t\t\t\t\t'Microsoft.XMLHTTP');","\t\txhr.open(method.toUpperCase(), url, true);","\t\tif ('overrideMimeType' in xhr)","\t\t\txhr.overrideMimeType('text/plain');","\t\txhr.onreadystatechange = function() {","\t\t\tif (xhr.readyState === 4) {","\t\t\t\tvar status = xhr.status;","\t\t\t\tif (status === 0 || status === 200) {","\t\t\t\t\tcallback.call(xhr, xhr.responseText);","\t\t\t\t} else {","\t\t\t\t\tthrow new Error('Could not load ' + url + ' (Error '","\t\t\t\t\t\t\t+ status + ')');","\t\t\t\t}","\t\t\t}","\t\t};","\t\treturn xhr.send(null);","\t}","};","","var CanvasProvider = {","\tcanvases: [],","","\tgetCanvas: function(width, height) {","\t\tvar canvas,","\t\t\tclear = true;","\t\tif (typeof width === 'object') {","\t\t\theight = width.height;","\t\t\twidth = width.width;","\t\t}","\t\tif (this.canvases.length) {","\t\t\tcanvas = this.canvases.pop();","\t\t} else {","\t\t\tcanvas = document.createElement('canvas');","\t\t}","\t\tvar ctx = canvas.getContext('2d');","\t\tif (canvas.width === width && canvas.height === height) {","\t\t\tif (clear)","\t\t\t\tctx.clearRect(0, 0, width + 1, height + 1);","\t\t} else {","\t\t\tcanvas.width = width;","\t\t\tcanvas.height = height;","\t\t}","\t\tctx.save();","\t\treturn canvas;","\t},","","\tgetContext: function(width, height) {","\t\treturn this.getCanvas(width, height).getContext('2d');","\t},","","\trelease: function(obj) {","\t\tvar canvas = obj.canvas ? obj.canvas : obj;","\t\tcanvas.getContext('2d').restore();","\t\tthis.canvases.push(canvas);","\t}","};","","var BlendMode = new function() {","\tvar min = Math.min,","\t\tmax = Math.max,","\t\tabs = Math.abs,","\t\tsr, sg, sb, sa,","\t\tbr, bg, bb, ba,","\t\tdr, dg, db;","","\tfunction getLum(r, g, b) {","\t\treturn 0.2989 * r + 0.587 * g + 0.114 * b;","\t}","","\tfunction setLum(r, g, b, l) {","\t\tvar d = l - getLum(r, g, b);","\t\tdr = r + d;","\t\tdg = g + d;","\t\tdb = b + d;","\t\tvar l = getLum(dr, dg, db),","\t\t\tmn = min(dr, dg, db),","\t\t\tmx = max(dr, dg, db);","\t\tif (mn < 0) {","\t\t\tvar lmn = l - mn;","\t\t\tdr = l + (dr - l) * l / lmn;","\t\t\tdg = l + (dg - l) * l / lmn;","\t\t\tdb = l + (db - l) * l / lmn;","\t\t}","\t\tif (mx > 255) {","\t\t\tvar ln = 255 - l,","\t\t\t\tmxl = mx - l;","\t\t\tdr = l + (dr - l) * ln / mxl;","\t\t\tdg = l + (dg - l) * ln / mxl;","\t\t\tdb = l + (db - l) * ln / mxl;","\t\t}","\t}","","\tfunction getSat(r, g, b) {","\t\treturn max(r, g, b) - min(r, g, b);","\t}","","\tfunction setSat(r, g, b, s) {","\t\tvar col = [r, g, b],","\t\t\tmx = max(r, g, b),","\t\t\tmn = min(r, g, b),","\t\t\tmd;","\t\tmn = mn === r ? 0 : mn === g ? 1 : 2;","\t\tmx = mx === r ? 0 : mx === g ? 1 : 2;","\t\tmd = min(mn, mx) === 0 ? max(mn, mx) === 1 ? 2 : 1 : 0;","\t\tif (col[mx] > col[mn]) {","\t\t\tcol[md] = (col[md] - col[mn]) * s / (col[mx] - col[mn]);","\t\t\tcol[mx] = s;","\t\t} else {","\t\t\tcol[md] = col[mx] = 0;","\t\t}","\t\tcol[mn] = 0;","\t\tdr = col[0];","\t\tdg = col[1];","\t\tdb = col[2];","\t}","","\tvar modes = {","\t\tmultiply: function() {","\t\t\tdr = br * sr / 255;","\t\t\tdg = bg * sg / 255;","\t\t\tdb = bb * sb / 255;","\t\t},","","\t\tscreen: function() {","\t\t\tdr = br + sr - (br * sr / 255);","\t\t\tdg = bg + sg - (bg * sg / 255);","\t\t\tdb = bb + sb - (bb * sb / 255);","\t\t},","","\t\toverlay: function() {","\t\t\tdr = br < 128 ? 2 * br * sr / 255 : 255 - 2 * (255 - br) * (255 - sr) / 255;","\t\t\tdg = bg < 128 ? 2 * bg * sg / 255 : 255 - 2 * (255 - bg) * (255 - sg) / 255;","\t\t\tdb = bb < 128 ? 2 * bb * sb / 255 : 255 - 2 * (255 - bb) * (255 - sb) / 255;","\t\t},","","\t\t'soft-light': function() {","\t\t\tvar t = sr * br / 255;","\t\t\tdr = t + br * (255 - (255 - br) * (255 - sr) / 255 - t) / 255;","\t\t\tt = sg * bg / 255;","\t\t\tdg = t + bg * (255 - (255 - bg) * (255 - sg) / 255 - t) / 255;","\t\t\tt = sb * bb / 255;","\t\t\tdb = t + bb * (255 - (255 - bb) * (255 - sb) / 255 - t) / 255;","\t\t},","","\t\t'hard-light': function() {","\t\t\tdr = sr < 128 ? 2 * sr * br / 255 : 255 - 2 * (255 - sr) * (255 - br) / 255;","\t\t\tdg = sg < 128 ? 2 * sg * bg / 255 : 255 - 2 * (255 - sg) * (255 - bg) / 255;","\t\t\tdb = sb < 128 ? 2 * sb * bb / 255 : 255 - 2 * (255 - sb) * (255 - bb) / 255;","\t\t},","","\t\t'color-dodge': function() {","\t\t\tdr = br === 0 ? 0 : sr === 255 ? 255 : min(255, 255 * br / (255 - sr));","\t\t\tdg = bg === 0 ? 0 : sg === 255 ? 255 : min(255, 255 * bg / (255 - sg));","\t\t\tdb = bb === 0 ? 0 : sb === 255 ? 255 : min(255, 255 * bb / (255 - sb));","\t\t},","","\t\t'color-burn': function() {","\t\t\tdr = br === 255 ? 255 : sr === 0 ? 0 : max(0, 255 - (255 - br) * 255 / sr);","\t\t\tdg = bg === 255 ? 255 : sg === 0 ? 0 : max(0, 255 - (255 - bg) * 255 / sg);","\t\t\tdb = bb === 255 ? 255 : sb === 0 ? 0 : max(0, 255 - (255 - bb) * 255 / sb);","\t\t},","","\t\tdarken: function() {","\t\t\tdr = br < sr ? br : sr;","\t\t\tdg = bg < sg ? bg : sg;","\t\t\tdb = bb < sb ? bb : sb;","\t\t},","","\t\tlighten: function() {","\t\t\tdr = br > sr ? br : sr;","\t\t\tdg = bg > sg ? bg : sg;","\t\t\tdb = bb > sb ? bb : sb;","\t\t},","","\t\tdifference: function() {","\t\t\tdr = br - sr;","\t\t\tif (dr < 0)","\t\t\t\tdr = -dr;","\t\t\tdg = bg - sg;","\t\t\tif (dg < 0)","\t\t\t\tdg = -dg;","\t\t\tdb = bb - sb;","\t\t\tif (db < 0)","\t\t\t\tdb = -db;","\t\t},","","\t\texclusion: function() {","\t\t\tdr = br + sr * (255 - br - br) / 255;","\t\t\tdg = bg + sg * (255 - bg - bg) / 255;","\t\t\tdb = bb + sb * (255 - bb - bb) / 255;","\t\t},","","\t\thue: function() {","\t\t\tsetSat(sr, sg, sb, getSat(br, bg, bb));","\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));","\t\t},","","\t\tsaturation: function() {","\t\t\tsetSat(br, bg, bb, getSat(sr, sg, sb));","\t\t\tsetLum(dr, dg, db, getLum(br, bg, bb));","\t\t},","","\t\tluminosity: function() {","\t\t\tsetLum(br, bg, bb, getLum(sr, sg, sb));","\t\t},","","\t\tcolor: function() {","\t\t\tsetLum(sr, sg, sb, getLum(br, bg, bb));","\t\t},","","\t\tadd: function() {","\t\t\tdr = min(br + sr, 255);","\t\t\tdg = min(bg + sg, 255);","\t\t\tdb = min(bb + sb, 255);","\t\t},","","\t\tsubtract: function() {","\t\t\tdr = max(br - sr, 0);","\t\t\tdg = max(bg - sg, 0);","\t\t\tdb = max(bb - sb, 0);","\t\t},","","\t\taverage: function() {","\t\t\tdr = (br + sr) / 2;","\t\t\tdg = (bg + sg) / 2;","\t\t\tdb = (bb + sb) / 2;","\t\t},","","\t\tnegation: function() {","\t\t\tdr = 255 - abs(255 - sr - br);","\t\t\tdg = 255 - abs(255 - sg - bg);","\t\t\tdb = 255 - abs(255 - sb - bb);","\t\t}","\t};","","\tvar nativeModes = this.nativeModes = Base.each([","\t\t'source-over', 'source-in', 'source-out', 'source-atop',","\t\t'destination-over', 'destination-in', 'destination-out',","\t\t'destination-atop', 'lighter', 'darker', 'copy', 'xor'","\t], function(mode) {","\t\tthis[mode] = true;","\t}, {});","","\tvar ctx = CanvasProvider.getContext(1, 1);","\tBase.each(modes, function(func, mode) {","\t\tvar darken = mode === 'darken',","\t\t\tok = false;","\t\tctx.save();","\t\ttry {","\t\t\tctx.fillStyle = darken ? '#300' : '#a00';","\t\t\tctx.fillRect(0, 0, 1, 1);","\t\t\tctx.globalCompositeOperation = mode;","\t\t\tif (ctx.globalCompositeOperation === mode) {","\t\t\t\tctx.fillStyle = darken ? '#a00' : '#300';","\t\t\t\tctx.fillRect(0, 0, 1, 1);","\t\t\t\tok = ctx.getImageData(0, 0, 1, 1).data[0] !== darken ? 170 : 51;","\t\t\t}","\t\t} catch (e) {}","\t\tctx.restore();","\t\tnativeModes[mode] = ok;","\t});","\tCanvasProvider.release(ctx);","","\tthis.process = function(mode, srcContext, dstContext, alpha, offset) {","\t\tvar srcCanvas = srcContext.canvas,","\t\t\tnormal = mode === 'normal';","\t\tif (normal || nativeModes[mode]) {","\t\t\tdstContext.save();","\t\t\tdstContext.setTransform(1, 0, 0, 1, 0, 0);","\t\t\tdstContext.globalAlpha = alpha;","\t\t\tif (!normal)","\t\t\t\tdstContext.globalCompositeOperation = mode;","\t\t\tdstContext.drawImage(srcCanvas, offset.x, offset.y);","\t\t\tdstContext.restore();","\t\t} else {","\t\t\tvar process = modes[mode];","\t\t\tif (!process)","\t\t\t\treturn;","\t\t\tvar dstData = dstContext.getImageData(offset.x, offset.y,","\t\t\t\t\tsrcCanvas.width, srcCanvas.height),","\t\t\t\tdst = dstData.data,","\t\t\t\tsrc = srcContext.getImageData(0, 0,","\t\t\t\t\tsrcCanvas.width, srcCanvas.height).data;","\t\t\tfor (var i = 0, l = dst.length; i < l; i += 4) {","\t\t\t\tsr = src[i];","\t\t\t\tbr = dst[i];","\t\t\t\tsg = src[i + 1];","\t\t\t\tbg = dst[i + 1];","\t\t\t\tsb = src[i + 2];","\t\t\t\tbb = dst[i + 2];","\t\t\t\tsa = src[i + 3];","\t\t\t\tba = dst[i + 3];","\t\t\t\tprocess();","\t\t\t\tvar a1 = sa * alpha / 255,","\t\t\t\t\ta2 = 1 - a1;","\t\t\t\tdst[i] = a1 * dr + a2 * br;","\t\t\t\tdst[i + 1] = a1 * dg + a2 * bg;","\t\t\t\tdst[i + 2] = a1 * db + a2 * bb;","\t\t\t\tdst[i + 3] = sa * alpha + a2 * ba;","\t\t\t}","\t\t\tdstContext.putImageData(dstData, offset.x, offset.y);","\t\t}","\t};","};","","var SVGStyles = Base.each({","\tfillColor: ['fill', 'color'],","\tstrokeColor: ['stroke', 'color'],","\tstrokeWidth: ['stroke-width', 'number'],","\tstrokeCap: ['stroke-linecap', 'string'],","\tstrokeJoin: ['stroke-linejoin', 'string'],","\tstrokeScaling: ['vector-effect', 'lookup', {","\t\ttrue: 'none',","\t\tfalse: 'non-scaling-stroke'","\t}, function(item, value) {","\t\treturn !value","\t\t\t\t&& (item instanceof PathItem","\t\t\t\t\t|| item instanceof Shape","\t\t\t\t\t|| item instanceof TextItem);","\t}],","\tmiterLimit: ['stroke-miterlimit', 'number'],","\tdashArray: ['stroke-dasharray', 'array'],","\tdashOffset: ['stroke-dashoffset', 'number'],","\tfontFamily: ['font-family', 'string'],","\tfontWeight: ['font-weight', 'string'],","\tfontSize: ['font-size', 'number'],","\tjustification: ['text-anchor', 'lookup', {","\t\tleft: 'start',","\t\tcenter: 'middle',","\t\tright: 'end'","\t}],","\topacity: ['opacity', 'number'],","\tblendMode: ['mix-blend-mode', 'string']","}, function(entry, key) {","\tvar part = Base.capitalize(key),","\t\tlookup = entry[2];","\tthis[key] = {","\t\ttype: entry[1],","\t\tproperty: key,","\t\tattribute: entry[0],","\t\ttoSVG: lookup,","\t\tfromSVG: lookup && Base.each(lookup, function(value, name) {","\t\t\tthis[value] = name;","\t\t}, {}),","\t\texportFilter: entry[3],","\t\tget: 'get' + part,","\t\tset: 'set' + part","\t};","}, {});","","var SVGNamespaces = {","\thref: 'http://www.w3.org/1999/xlink',","\txlink: 'http://www.w3.org/2000/xmlns'","};","","new function() {","\tvar formatter;","","\tfunction setAttributes(node, attrs) {","\t\tfor (var key in attrs) {","\t\t\tvar val = attrs[key],","\t\t\t\tnamespace = SVGNamespaces[key];","\t\t\tif (typeof val === 'number')","\t\t\t\tval = formatter.number(val);","\t\t\tif (namespace) {","\t\t\t\tnode.setAttributeNS(namespace, key, val);","\t\t\t} else {","\t\t\t\tnode.setAttribute(key, val);","\t\t\t}","\t\t}","\t\treturn node;","\t}","","\tfunction createElement(tag, attrs) {","\t\treturn setAttributes(","\t\t\tdocument.createElementNS('http://www.w3.org/2000/svg', tag), attrs);","\t}","","\tfunction getTransform(matrix, coordinates, center) {","\t\tvar attrs = new Base(),","\t\t\ttrans = matrix.getTranslation();","\t\tif (coordinates) {","\t\t\tmatrix = matrix.shiftless();","\t\t\tvar point = matrix._inverseTransform(trans);","\t\t\tattrs[center ? 'cx' : 'x'] = point.x;","\t\t\tattrs[center ? 'cy' : 'y'] = point.y;","\t\t\ttrans = null;","\t\t}","\t\tif (!matrix.isIdentity()) {","\t\t\tvar decomposed = matrix.decompose();","\t\t\tif (decomposed && !decomposed.shearing) {","\t\t\t\tvar parts = [],","\t\t\t\t\tangle = decomposed.rotation,","\t\t\t\t\tscale = decomposed.scaling;","\t\t\t\tif (trans && !trans.isZero())","\t\t\t\t\tparts.push('translate(' + formatter.point(trans) + ')');","\t\t\t\tif (!Numerical.isZero(scale.x - 1)","\t\t\t\t\t\t|| !Numerical.isZero(scale.y - 1))","\t\t\t\t\tparts.push('scale(' + formatter.point(scale) +')');","\t\t\t\tif (angle)","\t\t\t\t\tparts.push('rotate(' + formatter.number(angle) + ')');","\t\t\t\tattrs.transform = parts.join(' ');","\t\t\t} else {","\t\t\t\tattrs.transform = 'matrix(' + matrix.getValues().join(',') + ')';","\t\t\t}","\t\t}","\t\treturn attrs;","\t}","","\tfunction exportGroup(item, options) {","\t\tvar attrs = getTransform(item._matrix),","\t\t\tchildren = item._children;","\t\tvar node = createElement('g', attrs);","\t\tfor (var i = 0, l = children.length; i < l; i++) {","\t\t\tvar child = children[i];","\t\t\tvar childNode = exportSVG(child, options);","\t\t\tif (childNode) {","\t\t\t\tif (child.isClipMask()) {","\t\t\t\t\tvar clip = createElement('clipPath');","\t\t\t\t\tclip.appendChild(childNode);","\t\t\t\t\tsetDefinition(child, clip, 'clip');","\t\t\t\t\tsetAttributes(node, {","\t\t\t\t\t\t'clip-path': 'url(#' + clip.id + ')'","\t\t\t\t\t});","\t\t\t\t} else {","\t\t\t\t\tnode.appendChild(childNode);","\t\t\t\t}","\t\t\t}","\t\t}","\t\treturn node;","\t}","","\tfunction exportRaster(item) {","\t\tvar attrs = getTransform(item._matrix, true),","\t\t\tsize = item.getSize();","\t\tattrs.x -= size.width / 2;","\t\tattrs.y -= size.height / 2;","\t\tattrs.width = size.width;","\t\tattrs.height = size.height;","\t\tattrs.href = item.toDataURL();","\t\treturn createElement('image', attrs);","\t}","","\tfunction exportPath(item, options) {","\t\tif (options.matchShapes) {","\t\t\tvar shape = item.toShape(false);","\t\t\tif (shape)","\t\t\t\treturn exportShape(shape, options);","\t\t}","\t\tvar segments = item._segments,","\t\t\ttype,","\t\t\tattrs = getTransform(item._matrix);","\t\tif (segments.length === 0)","\t\t\treturn null;","\t\tif (item.isPolygon()) {","\t\t\tif (segments.length >= 3) {","\t\t\t\ttype = item._closed ? 'polygon' : 'polyline';","\t\t\t\tvar parts = [];","\t\t\t\tfor(i = 0, l = segments.length; i < l; i++)","\t\t\t\t\tparts.push(formatter.point(segments[i]._point));","\t\t\t\tattrs.points = parts.join(' ');","\t\t\t} else {","\t\t\t\ttype = 'line';","\t\t\t\tvar first = segments[0]._point,","\t\t\t\t\tlast = segments[segments.length - 1]._point;","\t\t\t\tattrs.set({","\t\t\t\t\tx1: first.x,","\t\t\t\t\ty1: first.y,","\t\t\t\t\tx2: last.x,","\t\t\t\t\ty2: last.y","\t\t\t\t});","\t\t\t}","\t\t} else {","\t\t\ttype = 'path';","\t\t\tattrs.d = item.getPathData(null, options.precision);","\t\t}","\t\treturn createElement(type, attrs);","\t}","","\tfunction exportShape(item) {","\t\tvar type = item._type,","\t\t\tradius = item._radius,","\t\t\tattrs = getTransform(item._matrix, true, type !== 'rectangle');","\t\tif (type === 'rectangle') {","\t\t\ttype = 'rect';","\t\t\tvar size = item._size,","\t\t\t\twidth = size.width,","\t\t\t\theight = size.height;","\t\t\tattrs.x -= width / 2;","\t\t\tattrs.y -= height / 2;","\t\t\tattrs.width = width;","\t\t\tattrs.height = height;","\t\t\tif (radius.isZero())","\t\t\t\tradius = null;","\t\t}","\t\tif (radius) {","\t\t\tif (type === 'circle') {","\t\t\t\tattrs.r = radius;","\t\t\t} else {","\t\t\t\tattrs.rx = radius.width;","\t\t\t\tattrs.ry = radius.height;","\t\t\t}","\t\t}","\t\treturn createElement(type, attrs);","\t}","","\tfunction exportCompoundPath(item, options) {","\t\tvar attrs = getTransform(item._matrix);","\t\tvar data = item.getPathData(null, options.precision);","\t\tif (data)","\t\t\tattrs.d = data;","\t\treturn createElement('path', attrs);","\t}","","\tfunction exportPlacedSymbol(item, options) {","\t\tvar attrs = getTransform(item._matrix, true),","\t\t\tsymbol = item.getSymbol(),","\t\t\tsymbolNode = getDefinition(symbol, 'symbol'),","\t\t\tdefinition = symbol.getDefinition(),","\t\t\tbounds = definition.getBounds();","\t\tif (!symbolNode) {","\t\t\tsymbolNode = createElement('symbol', {","\t\t\t\tviewBox: formatter.rectangle(bounds)","\t\t\t});","\t\t\tsymbolNode.appendChild(exportSVG(definition, options));","\t\t\tsetDefinition(symbol, symbolNode, 'symbol');","\t\t}","\t\tattrs.href = '#' + symbolNode.id;","\t\tattrs.x += bounds.x;","\t\tattrs.y += bounds.y;","\t\tattrs.width = formatter.number(bounds.width);","\t\tattrs.height = formatter.number(bounds.height);","\t\tattrs.overflow = 'visible';","\t\treturn createElement('use', attrs);","\t}","","\tfunction exportGradient(color) {","\t\tvar gradientNode = getDefinition(color, 'color');","\t\tif (!gradientNode) {","\t\t\tvar gradient = color.getGradient(),","\t\t\t\tradial = gradient._radial,","\t\t\t\torigin = color.getOrigin().transform(),","\t\t\t\tdestination = color.getDestination().transform(),","\t\t\t\tattrs;","\t\t\tif (radial) {","\t\t\t\tattrs = {","\t\t\t\t\tcx: origin.x,","\t\t\t\t\tcy: origin.y,","\t\t\t\t\tr: origin.getDistance(destination)","\t\t\t\t};","\t\t\t\tvar highlight = color.getHighlight();","\t\t\t\tif (highlight) {","\t\t\t\t\thighlight = highlight.transform();","\t\t\t\t\tattrs.fx = highlight.x;","\t\t\t\t\tattrs.fy = highlight.y;","\t\t\t\t}","\t\t\t} else {","\t\t\t\tattrs = {","\t\t\t\t\tx1: origin.x,","\t\t\t\t\ty1: origin.y,","\t\t\t\t\tx2: destination.x,","\t\t\t\t\ty2: destination.y","\t\t\t\t};","\t\t\t}","\t\t\tattrs.gradientUnits = 'userSpaceOnUse';","\t\t\tgradientNode = createElement(","\t\t\t\t\t(radial ? 'radial' : 'linear') + 'Gradient', attrs);","\t\t\tvar stops = gradient._stops;","\t\t\tfor (var i = 0, l = stops.length; i < l; i++) {","\t\t\t\tvar stop = stops[i],","\t\t\t\t\tstopColor = stop._color,","\t\t\t\t\talpha = stopColor.getAlpha();","\t\t\t\tattrs = {","\t\t\t\t\toffset: stop._rampPoint,","\t\t\t\t\t'stop-color': stopColor.toCSS(true)","\t\t\t\t};","\t\t\t\tif (alpha < 1)","\t\t\t\t\tattrs['stop-opacity'] = alpha;","\t\t\t\tgradientNode.appendChild(createElement('stop', attrs));","\t\t\t}","\t\t\tsetDefinition(color, gradientNode, 'color');","\t\t}","\t\treturn 'url(#' + gradientNode.id + ')';","\t}","","\tfunction exportText(item) {","\t\tvar node = createElement('text', getTransform(item._matrix, true));","\t\tnode.textContent = item._content;","\t\treturn node;","\t}","","\tvar exporters = {","\t\tGroup: exportGroup,","\t\tLayer: exportGroup,","\t\tRaster: exportRaster,","\t\tPath: exportPath,","\t\tShape: exportShape,","\t\tCompoundPath: exportCompoundPath,","\t\tPlacedSymbol: exportPlacedSymbol,","\t\tPointText: exportText","\t};","","\tfunction applyStyle(item, node, isRoot) {","\t\tvar attrs = {},","\t\t\tparent = !isRoot && item.getParent();","","\t\tif (item._name != null)","\t\t\tattrs.id = item._name;","","\t\tBase.each(SVGStyles, function(entry) {","\t\t\tvar get = entry.get,","\t\t\t\ttype = entry.type,","\t\t\t\tvalue = item[get]();","\t\t\tif (entry.exportFilter","\t\t\t\t\t? entry.exportFilter(item, value)","\t\t\t\t\t: !parent || !Base.equals(parent[get](), value)) {","\t\t\t\tif (type === 'color' && value != null) {","\t\t\t\t\tvar alpha = value.getAlpha();","\t\t\t\t\tif (alpha < 1)","\t\t\t\t\t\tattrs[entry.attribute + '-opacity'] = alpha;","\t\t\t\t}","\t\t\t\tattrs[entry.attribute] = value == null","\t\t\t\t\t? 'none'","\t\t\t\t\t: type === 'number'","\t\t\t\t\t\t? formatter.number(value)","\t\t\t\t\t\t: type === 'color'","\t\t\t\t\t\t\t? value.gradient","\t\t\t\t\t\t\t\t? exportGradient(value, item)","\t\t\t\t\t\t\t\t: value.toCSS(true)","\t\t\t\t\t\t\t: type === 'array'","\t\t\t\t\t\t\t\t? value.join(',')","\t\t\t\t\t\t\t\t: type === 'lookup'","\t\t\t\t\t\t\t\t\t? entry.toSVG[value]","\t\t\t\t\t\t\t\t\t: value;","\t\t\t}","\t\t});","","\t\tif (attrs.opacity === 1)","\t\t\tdelete attrs.opacity;","","\t\tif (!item._visible)","\t\t\tattrs.visibility = 'hidden';","","\t\treturn setAttributes(node, attrs);","\t}","","\tvar definitions;","\tfunction getDefinition(item, type) {","\t\tif (!definitions)","\t\t\tdefinitions = { ids: {}, svgs: {} };","\t\treturn item && definitions.svgs[type + '-' + item._id];","\t}","","\tfunction setDefinition(item, node, type) {","\t\tif (!definitions)","\t\t\tgetDefinition();","\t\tvar id = definitions.ids[type] = (definitions.ids[type] || 0) + 1;","\t\tnode.id = type + '-' + id;","\t\tdefinitions.svgs[type + '-' + item._id] = node;","\t}","","\tfunction exportDefinitions(node, options) {","\t\tvar svg = node,","\t\t\tdefs = null;","\t\tif (definitions) {","\t\t\tsvg = node.nodeName.toLowerCase() === 'svg' && node;","\t\t\tfor (var i in definitions.svgs) {","\t\t\t\tif (!defs) {","\t\t\t\t\tif (!svg) {","\t\t\t\t\t\tsvg = createElement('svg');","\t\t\t\t\t\tsvg.appendChild(node);","\t\t\t\t\t}","\t\t\t\t\tdefs = svg.insertBefore(createElement('defs'),","\t\t\t\t\t\t\tsvg.firstChild);","\t\t\t\t}","\t\t\t\tdefs.appendChild(definitions.svgs[i]);","\t\t\t}","\t\t\tdefinitions = null;","\t\t}","\t\treturn options.asString","\t\t\t\t? new XMLSerializer().serializeToString(svg)","\t\t\t\t: svg;","\t}","","\tfunction exportSVG(item, options, isRoot) {","\t\tvar exporter = exporters[item._class],","\t\t\tnode = exporter && exporter(item, options);","\t\tif (node) {","\t\t\tvar onExport = options.onExport;","\t\t\tif (onExport)","\t\t\t\tnode = onExport(item, node, options) || node;","\t\t\tvar data = JSON.stringify(item._data);","\t\t\tif (data && data !== '{}' && data !== 'null')","\t\t\t\tnode.setAttribute('data-paper-data', data);","\t\t}","\t\treturn node && applyStyle(item, node, isRoot);","\t}","","\tfunction setOptions(options) {","\t\tif (!options)","\t\t\toptions = {};","\t\tformatter = new Formatter(options.precision);","\t\treturn options;","\t}","","\tItem.inject({","\t\texportSVG: function(options) {","\t\t\toptions = setOptions(options);","\t\t\treturn exportDefinitions(exportSVG(this, options, true), options);","\t\t}","\t});","","\tProject.inject({","\t\texportSVG: function(options) {","\t\t\toptions = setOptions(options);","\t\t\tvar layers = this.layers,","\t\t\t\tview = this.getView(),","\t\t\t\tsize = view.getViewSize(),","\t\t\t\tnode = createElement('svg', {","\t\t\t\t\tx: 0,","\t\t\t\t\ty: 0,","\t\t\t\t\twidth: size.width,","\t\t\t\t\theight: size.height,","\t\t\t\t\tversion: '1.1',","\t\t\t\t\txmlns: 'http://www.w3.org/2000/svg',","\t\t\t\t\t'xmlns:xlink': 'http://www.w3.org/1999/xlink'","\t\t\t\t}),","\t\t\t\tparent = node,","\t\t\t\tmatrix = view._matrix;","\t\t\tif (!matrix.isIdentity())","\t\t\t\tparent = node.appendChild(","\t\t\t\t\t\tcreateElement('g', getTransform(matrix)));","\t\t\tfor (var i = 0, l = layers.length; i < l; i++)","\t\t\t\tparent.appendChild(exportSVG(layers[i], options, true));","\t\t\treturn exportDefinitions(node, options);","\t\t}","\t});","};","","new function() {","","\tfunction getValue(node, name, isString, allowNull) {","\t\tvar namespace = SVGNamespaces[name],","\t\t\tvalue = namespace","\t\t\t\t? node.getAttributeNS(namespace, name)","\t\t\t\t: node.getAttribute(name);","\t\tif (value === 'null')","\t\t\tvalue = null;","\t\treturn value == null","\t\t\t\t? allowNull","\t\t\t\t\t? null","\t\t\t\t\t: isString","\t\t\t\t\t\t? ''","\t\t\t\t\t\t: 0","\t\t\t\t: isString","\t\t\t\t\t? value","\t\t\t\t\t: parseFloat(value);","\t}","","\tfunction getPoint(node, x, y, allowNull) {","\t\tx = getValue(node, x, false, allowNull);","\t\ty = getValue(node, y, false, allowNull);","\t\treturn allowNull && (x == null || y == null) ? null","\t\t\t\t: new Point(x, y);","\t}","","\tfunction getSize(node, w, h, allowNull) {","\t\tw = getValue(node, w, false, allowNull);","\t\th = getValue(node, h, false, allowNull);","\t\treturn allowNull && (w == null || h == null) ? null","\t\t\t\t: new Size(w, h);","\t}","","\tfunction convertValue(value, type, lookup) {","\t\treturn value === 'none'","\t\t\t\t? null","\t\t\t\t: type === 'number'","\t\t\t\t\t? parseFloat(value)","\t\t\t\t\t: type === 'array'","\t\t\t\t\t\t? value ? value.split(/[\\s,]+/g).map(parseFloat) : []","\t\t\t\t\t\t: type === 'color'","\t\t\t\t\t\t\t? getDefinition(value) || value","\t\t\t\t\t\t\t: type === 'lookup'","\t\t\t\t\t\t\t\t? lookup[value]","\t\t\t\t\t\t\t\t: value;","\t}","","\tfunction importGroup(node, type, options, isRoot) {","\t\tvar nodes = node.childNodes,","\t\t\tisClip = type === 'clippath',","\t\t\titem = new Group(),","\t\t\tproject = item._project,","\t\t\tcurrentStyle = project._currentStyle,","\t\t\tchildren = [];","\t\tif (!isClip) {","\t\t\titem = applyAttributes(item, node, isRoot);","\t\t\tproject._currentStyle = item._style.clone();","\t\t}","\t\tfor (var i = 0, l = nodes.length; i < l; i++) {","\t\t\tvar childNode = nodes[i],","\t\t\t\tchild;","\t\t\tif (childNode.nodeType === 1","\t\t\t\t\t&& (child = importSVG(childNode, options, false))","\t\t\t\t\t&& !(child instanceof Symbol))","\t\t\t\tchildren.push(child);","\t\t}","\t\titem.addChildren(children);","\t\tif (isClip)","\t\t\titem = applyAttributes(item.reduce(), node, isRoot);","\t\tproject._currentStyle = currentStyle;","\t\tif (isClip || type === 'defs') {","\t\t\titem.remove();","\t\t\titem = null;","\t\t}","\t\treturn item;","\t}","","\tfunction importPoly(node, type) {","\t\tvar coords = node.getAttribute('points').match(","\t\t\t\t\t/[+-]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?/g),","\t\t\tpoints = [];","\t\tfor (var i = 0, l = coords.length; i < l; i += 2)","\t\t\tpoints.push(new Point(","\t\t\t\t\tparseFloat(coords[i]),","\t\t\t\t\tparseFloat(coords[i + 1])));","\t\tvar path = new Path(points);","\t\tif (type === 'polygon')","\t\t\tpath.closePath();","\t\treturn path;","\t}","","\tfunction importPath(node) {","\t\tvar data = node.getAttribute('d'),","\t\t\tparam = { pathData: data };","\t\treturn (data.match(/m/gi) || []).length > 1 || /z\\S+/i.test(data)","\t\t\t\t? new CompoundPath(param)","\t\t\t\t: new Path(param);","\t}","","\tfunction importGradient(node, type) {","\t\tvar id = (getValue(node, 'href', true) || '').substring(1),","\t\t\tisRadial = type === 'radialgradient',","\t\t\tgradient;","\t\tif (id) {","\t\t\tgradient = definitions[id].getGradient();","\t\t} else {","\t\t\tvar nodes = node.childNodes,","\t\t\t\tstops = [];","\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {","\t\t\t\tvar child = nodes[i];","\t\t\t\tif (child.nodeType === 1)","\t\t\t\t\tstops.push(applyAttributes(new GradientStop(), child));","\t\t\t}","\t\t\tgradient = new Gradient(stops, isRadial);","\t\t}","\t\tvar origin, destination, highlight;","\t\tif (isRadial) {","\t\t\torigin = getPoint(node, 'cx', 'cy');","\t\t\tdestination = origin.add(getValue(node, 'r'), 0);","\t\t\thighlight = getPoint(node, 'fx', 'fy', true);","\t\t} else {","\t\t\torigin = getPoint(node, 'x1', 'y1');","\t\t\tdestination = getPoint(node, 'x2', 'y2');","\t\t}","\t\tapplyAttributes(","\t\t\tnew Color(gradient, origin, destination, highlight), node);","\t\treturn null;","\t}","","\tvar importers = {","\t\t'#document': function (node, type, options, isRoot) {","\t\t\tvar nodes = node.childNodes;","\t\t\tfor (var i = 0, l = nodes.length; i < l; i++) {","\t\t\t\tvar child = nodes[i];","\t\t\t\tif (child.nodeType === 1) {","\t\t\t\t\tvar next = child.nextSibling;","\t\t\t\t\tdocument.body.appendChild(child);","\t\t\t\t\tvar item = importSVG(child, options, isRoot);","\t\t\t\t\tif (next) {","\t\t\t\t\t\tnode.insertBefore(child, next);","\t\t\t\t\t} else {","\t\t\t\t\t\tnode.appendChild(child);","\t\t\t\t\t}","\t\t\t\t\treturn item;","\t\t\t\t}","\t\t\t}","\t\t},","\t\tg: importGroup,","\t\tsvg: importGroup,","\t\tclippath: importGroup,","\t\tpolygon: importPoly,","\t\tpolyline: importPoly,","\t\tpath: importPath,","\t\tlineargradient: importGradient,","\t\tradialgradient: importGradient,","","\t\timage: function (node) {","\t\t\tvar raster = new Raster(getValue(node, 'href', true));","\t\t\traster.on('load', function() {","\t\t\t\tvar size = getSize(node, 'width', 'height');","\t\t\t\tthis.setSize(size);","\t\t\t\tvar center = this._matrix._transformPoint(","\t\t\t\t\t\tgetPoint(node, 'x', 'y').add(size.divide(2)));","\t\t\t\tthis.translate(center);","\t\t\t});","\t\t\treturn raster;","\t\t},","","\t\tsymbol: function(node, type, options, isRoot) {","\t\t\treturn new Symbol(importGroup(node, type, options, isRoot), true);","\t\t},","","\t\tdefs: importGroup,","","\t\tuse: function(node) {","\t\t\tvar id = (getValue(node, 'href', true) || '').substring(1),","\t\t\t\tdefinition = definitions[id],","\t\t\t\tpoint = getPoint(node, 'x', 'y');","\t\t\treturn definition","\t\t\t\t\t? definition instanceof Symbol","\t\t\t\t\t\t? definition.place(point)","\t\t\t\t\t\t: definition.clone().translate(point)","\t\t\t\t\t: null;","\t\t},","","\t\tcircle: function(node) {","\t\t\treturn new Shape.Circle(getPoint(node, 'cx', 'cy'),","\t\t\t\t\tgetValue(node, 'r'));","\t\t},","","\t\tellipse: function(node) {","\t\t\treturn new Shape.Ellipse({","\t\t\t\tcenter: getPoint(node, 'cx', 'cy'),","\t\t\t\tradius: getSize(node, 'rx', 'ry')","\t\t\t});","\t\t},","","\t\trect: function(node) {","\t\t\tvar point = getPoint(node, 'x', 'y'),","\t\t\t\tsize = getSize(node, 'width', 'height'),","\t\t\t\tradius = getSize(node, 'rx', 'ry');","\t\t\treturn new Shape.Rectangle(new Rectangle(point, size), radius);","\t\t},","","\t\tline: function(node) {","\t\t\treturn new Path.Line(getPoint(node, 'x1', 'y1'),","\t\t\t\t\tgetPoint(node, 'x2', 'y2'));","\t\t},","","\t\ttext: function(node) {","\t\t\tvar text = new PointText(getPoint(node, 'x', 'y')","\t\t\t\t\t.add(getPoint(node, 'dx', 'dy')));","\t\t\ttext.setContent(node.textContent.trim() || '');","\t\t\treturn text;","\t\t}","\t};","","\tfunction applyTransform(item, value, name, node) {","\t\tvar transforms = (node.getAttribute(name) || '').split(/\\)\\s*/g),","\t\t\tmatrix = new Matrix();","\t\tfor (var i = 0, l = transforms.length; i < l; i++) {","\t\t\tvar transform = transforms[i];","\t\t\tif (!transform)","\t\t\t\tbreak;","\t\t\tvar parts = transform.split(/\\(\\s*/),","\t\t\t\tcommand = parts[0],","\t\t\t\tv = parts[1].split(/[\\s,]+/g);","\t\t\tfor (var j = 0, m = v.length; j < m; j++)","\t\t\t\tv[j] = parseFloat(v[j]);","\t\t\tswitch (command) {","\t\t\tcase 'matrix':","\t\t\t\tmatrix.concatenate(","\t\t\t\t\t\tnew Matrix(v[0], v[1], v[2], v[3], v[4], v[5]));","\t\t\t\tbreak;","\t\t\tcase 'rotate':","\t\t\t\tmatrix.rotate(v[0], v[1], v[2]);","\t\t\t\tbreak;","\t\t\tcase 'translate':","\t\t\t\tmatrix.translate(v[0], v[1]);","\t\t\t\tbreak;","\t\t\tcase 'scale':","\t\t\t\tmatrix.scale(v);","\t\t\t\tbreak;","\t\t\tcase 'skewX':","\t\t\t\tmatrix.skew(v[0], 0);","\t\t\t\tbreak;","\t\t\tcase 'skewY':","\t\t\t\tmatrix.skew(0, v[0]);","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\titem.transform(matrix);","\t}","","\tfunction applyOpacity(item, value, name) {","\t\tvar color = item[name === 'fill-opacity' ? 'getFillColor'","\t\t\t\t: 'getStrokeColor']();","\t\tif (color)","\t\t\tcolor.setAlpha(parseFloat(value));","\t}","","\tvar attributes = Base.each(SVGStyles, function(entry) {","\t\tthis[entry.attribute] = function(item, value) {","\t\t\titem[entry.set](convertValue(value, entry.type, entry.fromSVG));","\t\t\tif (entry.type === 'color' && item instanceof Shape) {","\t\t\t\tvar color = item[entry.get]();","\t\t\t\tif (color)","\t\t\t\t\tcolor.transform(new Matrix().translate(","\t\t\t\t\t\t\titem.getPosition(true).negate()));","\t\t\t}","\t\t};","\t}, {","\t\tid: function(item, value) {","\t\t\tdefinitions[value] = item;","\t\t\tif (item.setName)","\t\t\t\titem.setName(value);","\t\t},","","\t\t'clip-path': function(item, value) {","\t\t\tvar clip = getDefinition(value);","\t\t\tif (clip) {","\t\t\t\tclip = clip.clone();","\t\t\t\tclip.setClipMask(true);","\t\t\t\tif (item instanceof Group) {","\t\t\t\t\titem.insertChild(0, clip);","\t\t\t\t} else {","\t\t\t\t\treturn new Group(clip, item);","\t\t\t\t}","\t\t\t}","\t\t},","","\t\tgradientTransform: applyTransform,","\t\ttransform: applyTransform,","","\t\t'fill-opacity': applyOpacity,","\t\t'stroke-opacity': applyOpacity,","","\t\tvisibility: function(item, value) {","\t\t\titem.setVisible(value === 'visible');","\t\t},","","\t\tdisplay: function(item, value) {","\t\t\titem.setVisible(value !== null);","\t\t},","","\t\t'stop-color': function(item, value) {","\t\t\tif (item.setColor)","\t\t\t\titem.setColor(value);","\t\t},","","\t\t'stop-opacity': function(item, value) {","\t\t\tif (item._color)","\t\t\t\titem._color.setAlpha(parseFloat(value));","\t\t},","","\t\toffset: function(item, value) {","\t\t\tvar percentage = value.match(/(.*)%$/);","\t\t\titem.setRampPoint(percentage","\t\t\t\t\t? percentage[1] / 100","\t\t\t\t\t: parseFloat(value));","\t\t},","","\t\tviewBox: function(item, value, name, node, styles) {","\t\t\tvar rect = new Rectangle(convertValue(value, 'array')),","\t\t\t\tsize = getSize(node, 'width', 'height', true);","\t\t\tif (item instanceof Group) {","\t\t\t\tvar scale = size ? rect.getSize().divide(size) : 1,","\t\t\t\t\tmatrix = new Matrix().translate(rect.getPoint()).scale(scale);","\t\t\t\titem.transform(matrix.inverted());","\t\t\t} else if (item instanceof Symbol) {","\t\t\t\tif (size)","\t\t\t\t\trect.setSize(size);","\t\t\t\tvar clip = getAttribute(node, 'overflow', styles) != 'visible',","\t\t\t\t\tgroup = item._definition;","\t\t\t\tif (clip && !rect.contains(group.getBounds())) {","\t\t\t\t\tclip = new Shape.Rectangle(rect).transform(group._matrix);","\t\t\t\t\tclip.setClipMask(true);","\t\t\t\t\tgroup.addChild(clip);","\t\t\t\t}","\t\t\t}","\t\t}","\t});","","\tfunction getAttribute(node, name, styles) {","\t\tvar attr = node.attributes[name],","\t\t\tvalue = attr && attr.value;","\t\tif (!value) {","\t\t\tvar style = Base.camelize(name);","\t\t\tvalue = node.style[style];","\t\t\tif (!value && styles.node[style] !== styles.parent[style])","\t\t\t\tvalue = styles.node[style];","\t\t}","\t\treturn !value","\t\t\t\t? undefined","\t\t\t\t: value === 'none'","\t\t\t\t\t? null","\t\t\t\t\t: value;","\t}","","\tfunction applyAttributes(item, node, isRoot) {","\t\tvar styles = {","\t\t\tnode: DomElement.getStyles(node) || {},","\t\t\tparent: !isRoot && DomElement.getStyles(node.parentNode) || {}","\t\t};","\t\tBase.each(attributes, function(apply, name) {","\t\t\tvar value = getAttribute(node, name, styles);","\t\t\tif (value !== undefined)","\t\t\t\titem = Base.pick(apply(item, value, name, node, styles), item);","\t\t});","\t\treturn item;","\t}","","\tvar definitions = {};","\tfunction getDefinition(value) {","\t\tvar match = value && value.match(/\\((?:#|)([^)']+)/);","\t\treturn match && definitions[match[1]];","\t}","","\tfunction importSVG(source, options, isRoot) {","\t\tif (!source)","\t\t\treturn null;","\t\tif (!options) {","\t\t\toptions = {};","\t\t} else if (typeof options === 'function') {","\t\t\toptions = { onLoad: options };","\t\t}","","\t\tvar node = source,","\t\t\tscope = paper;","","\t\tfunction onLoadCallback(svg) {","\t\t\tpaper = scope;","\t\t\tvar item = importSVG(svg, options, isRoot),","\t\t\t\tonLoad = options.onLoad,","\t\t\t\tview = scope.project && scope.getView();","\t\t\tif (onLoad)","\t\t\t\tonLoad.call(this, item);","\t\t\tview.update();","\t\t}","","\t\tif (isRoot) {","\t\t\tif (typeof source === 'string' && !/^.*</.test(source)) {","\t\t\t\tnode = document.getElementById(source);","\t\t\t\tif (node) {","\t\t\t\t\tsource = null;","\t\t\t\t} else {","\t\t\t\t\treturn Http.request('get', source, onLoadCallback);","\t\t\t\t}","\t\t\t} else if (typeof File !== 'undefined' && source instanceof File) {","\t\t\t\tvar reader = new FileReader();","\t\t\t\treader.onload = function() {","\t\t\t\t\tonLoadCallback(reader.result);","\t\t\t\t};","\t\t\t\treturn reader.readAsText(source);","\t\t\t}","\t\t}","","\t\tif (typeof source === 'string')","\t\t\tnode = new DOMParser().parseFromString(source, 'image/svg+xml');","\t\tif (!node.nodeName)","\t\t\tthrow new Error('Unsupported SVG source: ' + source);","\t\tvar type = node.nodeName.toLowerCase(),","\t\t\timporter = importers[type],","\t\t\titem,","\t\t\tdata = node.getAttribute && node.getAttribute('data-paper-data'),","\t\t\tsettings = scope.settings,","\t\t\tapplyMatrix = settings.applyMatrix;","\t\tsettings.applyMatrix = false;","\t\titem = importer && importer(node, type, options, isRoot) || null;","\t\tsettings.applyMatrix = applyMatrix;","\t\tif (item) {","\t\t\tif (type !== '#document' && !(item instanceof Group))","\t\t\t\titem = applyAttributes(item, node, isRoot);","\t\t\tvar onImport = options.onImport;","\t\t\tif (onImport)","\t\t\t\titem = onImport(node, item, options) || item;","\t\t\tif (options.expandShapes && item instanceof Shape) {","\t\t\t\titem.remove();","\t\t\t\titem = item.toPath();","\t\t\t}","\t\t\tif (data)","\t\t\t\titem._data = JSON.parse(data);","\t\t}","\t\tif (isRoot) {","\t\t\tdefinitions = {};","\t\t\tif (applyMatrix && item)","\t\t\t\titem.matrix.apply(true, true);","\t\t}","\t\treturn item;","\t}","","\tItem.inject({","\t\timportSVG: function(node, options) {","\t\t\treturn this.addChild(importSVG(node, options, true));","\t\t}","\t});","","\tProject.inject({","\t\timportSVG: function(node, options) {","\t\t\tthis.activate();","\t\t\treturn importSVG(node, options, true);","\t\t}","\t});","};","","Base.exports.PaperScript = (function() {","\tvar exports, define,","\t\tscope = this;","!function(e,r){return\"object\"==typeof exports&&\"object\"==typeof module?r(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],r):(r(e.acorn||(e.acorn={})),void 0)}(this,function(e){\"use strict\";function r(e){fr=e||{};for(var r in mr)Object.prototype.hasOwnProperty.call(fr,r)||(fr[r]=mr[r]);hr=fr.sourceFile||null}function t(e,r){var t=vr(dr,e);r+=\" (\"+t.line+\":\"+t.column+\")\";var n=new SyntaxError(r);throw n.pos=e,n.loc=t,n.raisedAt=br,n}function n(e){function r(e){if(1==e.length)return t+=\"return str === \"+JSON.stringify(e[0])+\";\";t+=\"switch(str){\";for(var r=0;r<e.length;++r)t+=\"case \"+JSON.stringify(e[r])+\":\";t+=\"return true}return false;\"}e=e.split(\" \");var t=\"\",n=[];e:for(var a=0;a<e.length;++a){for(var o=0;o<n.length;++o)if(n[o][0].length==e[a].length){n[o].push(e[a]);continue e}n.push([e[a]])}if(n.length>3){n.sort(function(e,r){return r.length-e.length}),t+=\"switch(str.length){\";for(var a=0;a<n.length;++a){var i=n[a];t+=\"case \"+i[0].length+\":\",r(i)}t+=\"}\"}else r(e);return new Function(\"str\",t)}function a(){this.line=Ar,this.column=br-Sr}function o(){Ar=1,br=Sr=0,Er=!0,u()}function i(e,r){gr=br,fr.locations&&(kr=new a),wr=e,u(),Cr=r,Er=e.beforeExpr}function s(){var e=fr.onComment&&fr.locations&&new a,r=br,n=dr.indexOf(\"*/\",br+=2);if(-1===n&&t(br-2,\"Unterminated comment\"),br=n+2,fr.locations){Kt.lastIndex=r;for(var o;(o=Kt.exec(dr))&&o.index<br;)++Ar,Sr=o.index+o[0].length}fr.onComment&&fr.onComment(!0,dr.slice(r+2,n),r,br,e,fr.locations&&new a)}function c(){for(var e=br,r=fr.onComment&&fr.locations&&new a,t=dr.charCodeAt(br+=2);pr>br&&10!==t&&13!==t&&8232!==t&&8233!==t;)++br,t=dr.charCodeAt(br);fr.onComment&&fr.onComment(!1,dr.slice(e+2,br),e,br,r,fr.locations&&new a)}function u(){for(;pr>br;){var e=dr.charCodeAt(br);if(32===e)++br;else if(13===e){++br;var r=dr.charCodeAt(br);10===r&&++br,fr.locations&&(++Ar,Sr=br)}else if(10===e||8232===e||8233===e)++br,fr.locations&&(++Ar,Sr=br);else if(e>8&&14>e)++br;else if(47===e){var r=dr.charCodeAt(br+1);if(42===r)s();else{if(47!==r)break;c()}}else if(160===e)++br;else{if(!(e>=5760&&Jt.test(String.fromCharCode(e))))break;++br}}}function l(){var e=dr.charCodeAt(br+1);return e>=48&&57>=e?E(!0):(++br,i(xt))}function f(){var e=dr.charCodeAt(br+1);return Er?(++br,k()):61===e?x(Et,2):x(wt,1)}function d(){var e=dr.charCodeAt(br+1);return 61===e?x(Et,2):x(Dt,1)}function p(e){var r=dr.charCodeAt(br+1);return r===e?x(124===e?Lt:Ut,2):61===r?x(Et,2):x(124===e?Rt:Tt,1)}function h(){var e=dr.charCodeAt(br+1);return 61===e?x(Et,2):x(Vt,1)}function m(e){var r=dr.charCodeAt(br+1);return r===e?45==r&&62==dr.charCodeAt(br+2)&&Gt.test(dr.slice(Lr,br))?(br+=3,c(),u(),g()):x(St,2):61===r?x(Et,2):x(At,1)}function v(e){var r=dr.charCodeAt(br+1),t=1;return r===e?(t=62===e&&62===dr.charCodeAt(br+2)?3:2,61===dr.charCodeAt(br+t)?x(Et,t+1):x(jt,t)):33==r&&60==e&&45==dr.charCodeAt(br+2)&&45==dr.charCodeAt(br+3)?(br+=4,c(),u(),g()):(61===r&&(t=61===dr.charCodeAt(br+2)?3:2),x(Ot,t))}function b(e){var r=dr.charCodeAt(br+1);return 61===r?x(qt,61===dr.charCodeAt(br+2)?3:2):x(61===e?Ct:It,1)}function y(e){switch(e){case 46:return l();case 40:return++br,i(mt);case 41:return++br,i(vt);case 59:return++br,i(yt);case 44:return++br,i(bt);case 91:return++br,i(ft);case 93:return++br,i(dt);case 123:return++br,i(pt);case 125:return++br,i(ht);case 58:return++br,i(gt);case 63:return++br,i(kt);case 48:var r=dr.charCodeAt(br+1);if(120===r||88===r)return C();case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return E(!1);case 34:case 39:return A(e);case 47:return f(e);case 37:case 42:return d();case 124:case 38:return p(e);case 94:return h();case 43:case 45:return m(e);case 60:case 62:return v(e);case 61:case 33:return b(e);case 126:return x(It,1)}return!1}function g(e){if(e?br=yr+1:yr=br,fr.locations&&(xr=new a),e)return k();if(br>=pr)return i(Br);var r=dr.charCodeAt(br);if(Qt(r)||92===r)return L();var n=y(r);if(n===!1){var o=String.fromCharCode(r);if(\"\\\\\"===o||$t.test(o))return L();t(br,\"Unexpected character '\"+o+\"'\")}return n}function x(e,r){var t=dr.slice(br,br+r);br+=r,i(e,t)}function k(){for(var e,r,n=\"\",a=br;;){br>=pr&&t(a,\"Unterminated regular expression\");var o=dr.charAt(br);if(Gt.test(o)&&t(a,\"Unterminated regular expression\"),e)e=!1;else{if(\"[\"===o)r=!0;else if(\"]\"===o&&r)r=!1;else if(\"/\"===o&&!r)break;e=\"\\\\\"===o}++br}var n=dr.slice(a,br);++br;var s=I();return s&&!/^[gmsiy]*$/.test(s)&&t(a,\"Invalid regexp flag\"),i(jr,new RegExp(n,s))}function w(e,r){for(var t=br,n=0,a=0,o=null==r?1/0:r;o>a;++a){var i,s=dr.charCodeAt(br);if(i=s>=97?s-97+10:s>=65?s-65+10:s>=48&&57>=s?s-48:1/0,i>=e)break;++br,n=n*e+i}return br===t||null!=r&&br-t!==r?null:n}function C(){br+=2;var e=w(16);return null==e&&t(yr+2,\"Expected hexadecimal number\"),Qt(dr.charCodeAt(br))&&t(br,\"Identifier directly after number\"),i(Or,e)}function E(e){var r=br,n=!1,a=48===dr.charCodeAt(br);e||null!==w(10)||t(r,\"Invalid number\"),46===dr.charCodeAt(br)&&(++br,w(10),n=!0);var o=dr.charCodeAt(br);(69===o||101===o)&&(o=dr.charCodeAt(++br),(43===o||45===o)&&++br,null===w(10)&&t(r,\"Invalid number\"),n=!0),Qt(dr.charCodeAt(br))&&t(br,\"Identifier directly after number\");var s,c=dr.slice(r,br);return n?s=parseFloat(c):a&&1!==c.length?/[89]/.test(c)||Tr?t(r,\"Invalid number\"):s=parseInt(c,8):s=parseInt(c,10),i(Or,s)}function A(e){br++;for(var r=\"\";;){br>=pr&&t(yr,\"Unterminated string constant\");var n=dr.charCodeAt(br);if(n===e)return++br,i(Dr,r);if(92===n){n=dr.charCodeAt(++br);var a=/^[0-7]+/.exec(dr.slice(br,br+3));for(a&&(a=a[0]);a&&parseInt(a,8)>255;)a=a.slice(0,a.length-1);if(\"0\"===a&&(a=null),++br,a)Tr&&t(br-2,\"Octal literal in strict mode\"),r+=String.fromCharCode(parseInt(a,8)),br+=a.length-1;else switch(n){case 110:r+=\"\\n\";break;case 114:r+=\"\\r\";break;case 120:r+=String.fromCharCode(S(2));break;case 117:r+=String.fromCharCode(S(4));break;case 85:r+=String.fromCharCode(S(8));break;case 116:r+=\"\t\";break;case 98:r+=\"\\b\";break;case 118:r+=\"\u000b\";break;case 102:r+=\"\\f\";break;case 48:r+=\"\\0\";break;case 13:10===dr.charCodeAt(br)&&++br;case 10:fr.locations&&(Sr=br,++Ar);break;default:r+=String.fromCharCode(n)}}else(13===n||10===n||8232===n||8233===n)&&t(yr,\"Unterminated string constant\"),r+=String.fromCharCode(n),++br}}function S(e){var r=w(16,e);return null===r&&t(yr,\"Bad character escape sequence\"),r}function I(){Bt=!1;for(var e,r=!0,n=br;;){var a=dr.charCodeAt(br);if(Yt(a))Bt&&(e+=dr.charAt(br)),++br;else{if(92!==a)break;Bt||(e=dr.slice(n,br)),Bt=!0,117!=dr.charCodeAt(++br)&&t(br,\"Expecting Unicode escape sequence \\\\uXXXX\"),++br;var o=S(4),i=String.fromCharCode(o);i||t(br-1,\"Invalid Unicode escape\"),(r?Qt(o):Yt(o))||t(br-4,\"Invalid Unicode escape\"),e+=i}r=!1}return Bt?e:dr.slice(n,br)}function L(){var e=I(),r=Fr;return Bt||(Wt(e)?r=lt[e]:(fr.forbidReserved&&(3===fr.ecmaVersion?Mt:zt)(e)||Tr&&Xt(e))&&t(yr,\"The keyword '\"+e+\"' is reserved\")),i(r,e)}function U(){Ir=yr,Lr=gr,Ur=kr,g()}function R(e){if(Tr=e,br=Lr,fr.locations)for(;Sr>br;)Sr=dr.lastIndexOf(\"\\n\",Sr-2)+1,--Ar;u(),g()}function V(){this.type=null,this.start=yr,this.end=null}function T(){this.start=xr,this.end=null,null!==hr&&(this.source=hr)}function q(){var e=new V;return fr.locations&&(e.loc=new T),fr.ranges&&(e.range=[yr,0]),e}function O(e){var r=new V;return r.start=e.start,fr.locations&&(r.loc=new T,r.loc.start=e.loc.start),fr.ranges&&(r.range=[e.range[0],0]),r}function j(e,r){return e.type=r,e.end=Lr,fr.locations&&(e.loc.end=Ur),fr.ranges&&(e.range[1]=Lr),e}function D(e){return fr.ecmaVersion>=5&&\"ExpressionStatement\"===e.type&&\"Literal\"===e.expression.type&&\"use strict\"===e.expression.value}function F(e){return wr===e?(U(),!0):void 0}function B(){return!fr.strictSemicolons&&(wr===Br||wr===ht||Gt.test(dr.slice(Lr,yr)))}function M(){F(yt)||B()||X()}function z(e){wr===e?U():X()}function X(){t(yr,\"Unexpected token\")}function N(e){\"Identifier\"!==e.type&&\"MemberExpression\"!==e.type&&t(e.start,\"Assigning to rvalue\"),Tr&&\"Identifier\"===e.type&&Nt(e.name)&&t(e.start,\"Assigning to \"+e.name+\" in strict mode\")}function W(e){Ir=Lr=br,fr.locations&&(Ur=new a),Rr=Tr=null,Vr=[],g();var r=e||q(),t=!0;for(e||(r.body=[]);wr!==Br;){var n=J();r.body.push(n),t&&D(n)&&R(!0),t=!1}return j(r,\"Program\")}function J(){(wr===wt||wr===Et&&\"/=\"==Cr)&&g(!0);var e=wr,r=q();switch(e){case Mr:case Nr:U();var n=e===Mr;F(yt)||B()?r.label=null:wr!==Fr?X():(r.label=lr(),M());for(var a=0;a<Vr.length;++a){var o=Vr[a];if(null==r.label||o.name===r.label.name){if(null!=o.kind&&(n||\"loop\"===o.kind))break;if(r.label&&n)break}}return a===Vr.length&&t(r.start,\"Unsyntactic \"+e.keyword),j(r,n?\"BreakStatement\":\"ContinueStatement\");case Wr:return U(),M(),j(r,\"DebuggerStatement\");case Pr:return U(),Vr.push(Zt),r.body=J(),Vr.pop(),z(tt),r.test=P(),M(),j(r,\"DoWhileStatement\");case _r:if(U(),Vr.push(Zt),z(mt),wr===yt)return $(r,null);if(wr===rt){var i=q();return U(),G(i,!0),j(i,\"VariableDeclaration\"),1===i.declarations.length&&F(ut)?_(r,i):$(r,i)}var i=K(!1,!0);return F(ut)?(N(i),_(r,i)):$(r,i);case Gr:return U(),cr(r,!0);case Kr:return U(),r.test=P(),r.consequent=J(),r.alternate=F(Hr)?J():null,j(r,\"IfStatement\");case Qr:return Rr||t(yr,\"'return' outside of function\"),U(),F(yt)||B()?r.argument=null:(r.argument=K(),M()),j(r,\"ReturnStatement\");case Yr:U(),r.discriminant=P(),r.cases=[],z(pt),Vr.push(en);for(var s,c;wr!=ht;)if(wr===zr||wr===Jr){var u=wr===zr;s&&j(s,\"SwitchCase\"),r.cases.push(s=q()),s.consequent=[],U(),u?s.test=K():(c&&t(Ir,\"Multiple default clauses\"),c=!0,s.test=null),z(gt)}else s||X(),s.consequent.push(J());return s&&j(s,\"SwitchCase\"),U(),Vr.pop(),j(r,\"SwitchStatement\");case Zr:return U(),Gt.test(dr.slice(Lr,yr))&&t(Lr,\"Illegal newline after throw\"),r.argument=K(),M(),j(r,\"ThrowStatement\");case et:if(U(),r.block=H(),r.handler=null,wr===Xr){var l=q();U(),z(mt),l.param=lr(),Tr&&Nt(l.param.name)&&t(l.param.start,\"Binding \"+l.param.name+\" in strict mode\"),z(vt),l.guard=null,l.body=H(),r.handler=j(l,\"CatchClause\")}return r.guardedHandlers=qr,r.finalizer=F($r)?H():null,r.handler||r.finalizer||t(r.start,\"Missing catch or finally clause\"),j(r,\"TryStatement\");case rt:return U(),G(r),M(),j(r,\"VariableDeclaration\");case tt:return U(),r.test=P(),Vr.push(Zt),r.body=J(),Vr.pop(),j(r,\"WhileStatement\");case nt:return Tr&&t(yr,\"'with' in strict mode\"),U(),r.object=P(),r.body=J(),j(r,\"WithStatement\");case pt:return H();case yt:return U(),j(r,\"EmptyStatement\");default:var f=Cr,d=K();if(e===Fr&&\"Identifier\"===d.type&&F(gt)){for(var a=0;a<Vr.length;++a)Vr[a].name===f&&t(d.start,\"Label '\"+f+\"' is already declared\");var p=wr.isLoop?\"loop\":wr===Yr?\"switch\":null;return Vr.push({name:f,kind:p}),r.body=J(),Vr.pop(),r.label=d,j(r,\"LabeledStatement\")}return r.expression=d,M(),j(r,\"ExpressionStatement\")}}function P(){z(mt);var e=K();return z(vt),e}function H(e){var r,t=q(),n=!0,a=!1;for(t.body=[],z(pt);!F(ht);){var o=J();t.body.push(o),n&&e&&D(o)&&(r=a,R(a=!0)),n=!1}return a&&!r&&R(!1),j(t,\"BlockStatement\")}function $(e,r){return e.init=r,z(yt),e.test=wr===yt?null:K(),z(yt),e.update=wr===vt?null:K(),z(vt),e.body=J(),Vr.pop(),j(e,\"ForStatement\")}function _(e,r){return e.left=r,e.right=K(),z(vt),e.body=J(),Vr.pop(),j(e,\"ForInStatement\")}function G(e,r){for(e.declarations=[],e.kind=\"var\";;){var n=q();if(n.id=lr(),Tr&&Nt(n.id.name)&&t(n.id.start,\"Binding \"+n.id.name+\" in strict mode\"),n.init=F(Ct)?K(!0,r):null,e.declarations.push(j(n,\"VariableDeclarator\")),!F(bt))break}return e}function K(e,r){var t=Q(r);if(!e&&wr===bt){var n=O(t);for(n.expressions=[t];F(bt);)n.expressions.push(Q(r));return j(n,\"SequenceExpression\")}return t}function Q(e){var r=Y(e);if(wr.isAssign){var t=O(r);return t.operator=Cr,t.left=r,U(),t.right=Q(e),N(r),j(t,\"AssignmentExpression\")}return r}function Y(e){var r=Z(e);if(F(kt)){var t=O(r);return t.test=r,t.consequent=K(!0),z(gt),t.alternate=K(!0,e),j(t,\"ConditionalExpression\")}return r}function Z(e){return er(rr(),-1,e)}function er(e,r,t){var n=wr.binop;if(null!=n&&(!t||wr!==ut)&&n>r){var a=O(e);a.left=e,a.operator=Cr,U(),a.right=er(rr(),n,t);var o=j(a,/&&|\\|\\|/.test(a.operator)?\"LogicalExpression\":\"BinaryExpression\");return er(o,r,t)}return e}function rr(){if(wr.prefix){var e=q(),r=wr.isUpdate;return e.operator=Cr,e.prefix=!0,Er=!0,U(),e.argument=rr(),r?N(e.argument):Tr&&\"delete\"===e.operator&&\"Identifier\"===e.argument.type&&t(e.start,\"Deleting local variable in strict mode\"),j(e,r?\"UpdateExpression\":\"UnaryExpression\")}for(var n=tr();wr.postfix&&!B();){var e=O(n);e.operator=Cr,e.prefix=!1,e.argument=n,N(n),U(),n=j(e,\"UpdateExpression\")}return n}function tr(){return nr(ar())}function nr(e,r){if(F(xt)){var t=O(e);return t.object=e,t.property=lr(!0),t.computed=!1,nr(j(t,\"MemberExpression\"),r)}if(F(ft)){var t=O(e);return t.object=e,t.property=K(),t.computed=!0,z(dt),nr(j(t,\"MemberExpression\"),r)}if(!r&&F(mt)){var t=O(e);return t.callee=e,t.arguments=ur(vt,!1),nr(j(t,\"CallExpression\"),r)}return e}function ar(){switch(wr){case ot:var e=q();return U(),j(e,\"ThisExpression\");case Fr:return lr();case Or:case Dr:case jr:var e=q();return e.value=Cr,e.raw=dr.slice(yr,gr),U(),j(e,\"Literal\");case it:case st:case ct:var e=q();return e.value=wr.atomValue,e.raw=wr.keyword,U(),j(e,\"Literal\");case mt:var r=xr,t=yr;U();var n=K();return n.start=t,n.end=gr,fr.locations&&(n.loc.start=r,n.loc.end=kr),fr.ranges&&(n.range=[t,gr]),z(vt),n;case ft:var e=q();return U(),e.elements=ur(dt,!0,!0),j(e,\"ArrayExpression\");case pt:return ir();case Gr:var e=q();return U(),cr(e,!1);case at:return or();default:X()}}function or(){var e=q();return U(),e.callee=nr(ar(),!0),e.arguments=F(mt)?ur(vt,!1):qr,j(e,\"NewExpression\")}function ir(){var e=q(),r=!0,n=!1;for(e.properties=[],U();!F(ht);){if(r)r=!1;else if(z(bt),fr.allowTrailingCommas&&F(ht))break;var a,o={key:sr()},i=!1;if(F(gt)?(o.value=K(!0),a=o.kind=\"init\"):fr.ecmaVersion>=5&&\"Identifier\"===o.key.type&&(\"get\"===o.key.name||\"set\"===o.key.name)?(i=n=!0,a=o.kind=o.key.name,o.key=sr(),wr!==mt&&X(),o.value=cr(q(),!1)):X(),\"Identifier\"===o.key.type&&(Tr||n))for(var s=0;s<e.properties.length;++s){var c=e.properties[s];if(c.key.name===o.key.name){var u=a==c.kind||i&&\"init\"===c.kind||\"init\"===a&&(\"get\"===c.kind||\"set\"===c.kind);u&&!Tr&&\"init\"===a&&\"init\"===c.kind&&(u=!1),u&&t(o.key.start,\"Redefinition of property\")}}e.properties.push(o)}return j(e,\"ObjectExpression\")}function sr(){return wr===Or||wr===Dr?ar():lr(!0)}function cr(e,r){wr===Fr?e.id=lr():r?X():e.id=null,e.params=[];var n=!0;for(z(mt);!F(vt);)n?n=!1:z(bt),e.params.push(lr());var a=Rr,o=Vr;if(Rr=!0,Vr=[],e.body=H(!0),Rr=a,Vr=o,Tr||e.body.body.length&&D(e.body.body[0]))for(var i=e.id?-1:0;i<e.params.length;++i){var s=0>i?e.id:e.params[i];if((Xt(s.name)||Nt(s.name))&&t(s.start,\"Defining '\"+s.name+\"' in strict mode\"),i>=0)for(var c=0;i>c;++c)s.name===e.params[c].name&&t(s.start,\"Argument name clash in strict mode\")}return j(e,r?\"FunctionDeclaration\":\"FunctionExpression\")}function ur(e,r,t){for(var n=[],a=!0;!F(e);){if(a)a=!1;else if(z(bt),r&&fr.allowTrailingCommas&&F(e))break;t&&wr===bt?n.push(null):n.push(K(!0))}return n}function lr(e){var r=q();return r.name=wr===Fr?Cr:e&&!fr.forbidReserved&&wr.keyword||X(),Er=!1,U(),j(r,\"Identifier\")}e.version=\"0.4.0\";var fr,dr,pr,hr;e.parse=function(e,t){return dr=String(e),pr=dr.length,r(t),o(),W(fr.program)};var mr=e.defaultOptions={ecmaVersion:5,strictSemicolons:!1,allowTrailingCommas:!0,forbidReserved:!1,locations:!1,onComment:null,ranges:!1,program:null,sourceFile:null},vr=e.getLineInfo=function(e,r){for(var t=1,n=0;;){Kt.lastIndex=n;var a=Kt.exec(e);if(!(a&&a.index<r))break;++t,n=a.index+a[0].length}return{line:t,column:r-n}};e.tokenize=function(e,t){function n(e){return g(e),a.start=yr,a.end=gr,a.startLoc=xr,a.endLoc=kr,a.type=wr,a.value=Cr,a}dr=String(e),pr=dr.length,r(t),o();var a={};return n.jumpTo=function(e,r){if(br=e,fr.locations){Ar=1,Sr=Kt.lastIndex=0;for(var t;(t=Kt.exec(dr))&&t.index<e;)++Ar,Sr=t.index+t[0].length}Er=r,u()},n};var br,yr,gr,xr,kr,wr,Cr,Er,Ar,Sr,Ir,Lr,Ur,Rr,Vr,Tr,qr=[],Or={type:\"num\"},jr={type:\"regexp\"},Dr={type:\"string\"},Fr={type:\"name\"},Br={type:\"eof\"},Mr={keyword:\"break\"},zr={keyword:\"case\",beforeExpr:!0},Xr={keyword:\"catch\"},Nr={keyword:\"continue\"},Wr={keyword:\"debugger\"},Jr={keyword:\"default\"},Pr={keyword:\"do\",isLoop:!0},Hr={keyword:\"else\",beforeExpr:!0},$r={keyword:\"finally\"},_r={keyword:\"for\",isLoop:!0},Gr={keyword:\"function\"},Kr={keyword:\"if\"},Qr={keyword:\"return\",beforeExpr:!0},Yr={keyword:\"switch\"},Zr={keyword:\"throw\",beforeExpr:!0},et={keyword:\"try\"},rt={keyword:\"var\"},tt={keyword:\"while\",isLoop:!0},nt={keyword:\"with\"},at={keyword:\"new\",beforeExpr:!0},ot={keyword:\"this\"},it={keyword:\"null\",atomValue:null},st={keyword:\"true\",atomValue:!0},ct={keyword:\"false\",atomValue:!1},ut={keyword:\"in\",binop:7,beforeExpr:!0},lt={\"break\":Mr,\"case\":zr,\"catch\":Xr,\"continue\":Nr,\"debugger\":Wr,\"default\":Jr,\"do\":Pr,\"else\":Hr,\"finally\":$r,\"for\":_r,\"function\":Gr,\"if\":Kr,\"return\":Qr,\"switch\":Yr,\"throw\":Zr,\"try\":et,\"var\":rt,\"while\":tt,\"with\":nt,\"null\":it,\"true\":st,\"false\":ct,\"new\":at,\"in\":ut,\"instanceof\":{keyword:\"instanceof\",binop:7,beforeExpr:!0},\"this\":ot,\"typeof\":{keyword:\"typeof\",prefix:!0,beforeExpr:!0},\"void\":{keyword:\"void\",prefix:!0,beforeExpr:!0},\"delete\":{keyword:\"delete\",prefix:!0,beforeExpr:!0}},ft={type:\"[\",beforeExpr:!0},dt={type:\"]\"},pt={type:\"{\",beforeExpr:!0},ht={type:\"}\"},mt={type:\"(\",beforeExpr:!0},vt={type:\")\"},bt={type:\",\",beforeExpr:!0},yt={type:\";\",beforeExpr:!0},gt={type:\":\",beforeExpr:!0},xt={type:\".\"},kt={type:\"?\",beforeExpr:!0},wt={binop:10,beforeExpr:!0},Ct={isAssign:!0,beforeExpr:!0},Et={isAssign:!0,beforeExpr:!0},At={binop:9,prefix:!0,beforeExpr:!0},St={postfix:!0,prefix:!0,isUpdate:!0},It={prefix:!0,beforeExpr:!0},Lt={binop:1,beforeExpr:!0},Ut={binop:2,beforeExpr:!0},Rt={binop:3,beforeExpr:!0},Vt={binop:4,beforeExpr:!0},Tt={binop:5,beforeExpr:!0},qt={binop:6,beforeExpr:!0},Ot={binop:7,beforeExpr:!0},jt={binop:8,beforeExpr:!0},Dt={binop:10,beforeExpr:!0};e.tokTypes={bracketL:ft,bracketR:dt,braceL:pt,braceR:ht,parenL:mt,parenR:vt,comma:bt,semi:yt,colon:gt,dot:xt,question:kt,slash:wt,eq:Ct,name:Fr,eof:Br,num:Or,regexp:jr,string:Dr};for(var Ft in lt)e.tokTypes[\"_\"+Ft]=lt[Ft];var Bt,Mt=n(\"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\"),zt=n(\"class enum extends super const export import\"),Xt=n(\"implements interface let package private protected public static yield\"),Nt=n(\"eval arguments\"),Wt=n(\"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\"),Jt=/[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/,Pt=\"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05d0-\\u05ea\\u05f0-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u08a0\\u08a2-\\u08ac\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097f\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c33\\u0c35-\\u0c39\\u0c3d\\u0c58\\u0c59\\u0c60\\u0c61\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d60\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f4\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f0\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1877\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191c\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19c1-\\u19c7\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u212f-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2e2f\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312d\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua697\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua78e\\ua790-\\ua793\\ua7a0-\\ua7aa\\ua7f8-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa80-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\",Ht=\"\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u0620-\\u0649\\u0672-\\u06d3\\u06e7-\\u06e8\\u06fb-\\u06fc\\u0730-\\u074a\\u0800-\\u0814\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0840-\\u0857\\u08e4-\\u08fe\\u0900-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962-\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09d7\\u09df-\\u09e0\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2-\\u0ae3\\u0ae6-\\u0aef\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b5f-\\u0b60\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c01-\\u0c03\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62-\\u0c63\\u0c66-\\u0c6f\\u0c82\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2-\\u0ce3\\u0ce6-\\u0cef\\u0d02\\u0d03\\u0d46-\\u0d48\\u0d57\\u0d62-\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0df2\\u0df3\\u0e34-\\u0e3a\\u0e40-\\u0e45\\u0e50-\\u0e59\\u0eb4-\\u0eb9\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f41-\\u0f47\\u0f71-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1029\\u1040-\\u1049\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u170e-\\u1710\\u1720-\\u1730\\u1740-\\u1750\\u1772\\u1773\\u1780-\\u17b2\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1920-\\u192b\\u1930-\\u193b\\u1951-\\u196d\\u19b0-\\u19c0\\u19c8-\\u19c9\\u19d0-\\u19d9\\u1a00-\\u1a15\\u1a20-\\u1a53\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1b46-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c00-\\u1c22\\u1c40-\\u1c49\\u1c5b-\\u1c7d\\u1cd0-\\u1cd2\\u1d00-\\u1dbe\\u1e01-\\u1f15\\u200c\\u200d\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2d81-\\u2d96\\u2de0-\\u2dff\\u3021-\\u3028\\u3099\\u309a\\ua640-\\ua66d\\ua674-\\ua67d\\ua69f\\ua6f0-\\ua6f1\\ua7f8-\\ua800\\ua806\\ua80b\\ua823-\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c4\\ua8d0-\\ua8d9\\ua8f3-\\ua8f7\\ua900-\\ua909\\ua926-\\ua92d\\ua930-\\ua945\\ua980-\\ua983\\ua9b3-\\ua9c0\\uaa00-\\uaa27\\uaa40-\\uaa41\\uaa4c-\\uaa4d\\uaa50-\\uaa59\\uaa7b\\uaae0-\\uaae9\\uaaf2-\\uaaf3\\uabc0-\\uabe1\\uabec\\uabed\\uabf0-\\uabf9\\ufb20-\\ufb28\\ufe00-\\ufe0f\\ufe20-\\ufe26\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\",$t=new RegExp(\"[\"+Pt+\"]\"),_t=new RegExp(\"[\"+Pt+Ht+\"]\"),Gt=/[\\n\\r\\u2028\\u2029]/,Kt=/\\r\\n|[\\n\\r\\u2028\\u2029]/g,Qt=e.isIdentifierStart=function(e){return 65>e?36===e:91>e?!0:97>e?95===e:123>e?!0:e>=170&&$t.test(String.fromCharCode(e))},Yt=e.isIdentifierChar=function(e){return 48>e?36===e:58>e?!0:65>e?!1:91>e?!0:97>e?95===e:123>e?!0:e>=170&&_t.test(String.fromCharCode(e))},Zt={kind:\"loop\"},en={kind:\"switch\"}});","","\tvar binaryOperators = {","\t\t'+': '__add',","\t\t'-': '__subtract',","\t\t'*': '__multiply',","\t\t'/': '__divide',","\t\t'%': '__modulo',","\t\t'==': 'equals',","\t\t'!=': 'equals'","\t};","","\tvar unaryOperators = {","\t\t'-': '__negate',","\t\t'+': null","\t};","","\tvar fields = Base.each(","\t\t['add', 'subtract', 'multiply', 'divide', 'modulo', 'negate'],","\t\tfunction(name) {","\t\t\tthis['__' + name] = '#' + name;","\t\t},","\t\t{}","\t);","\tPoint.inject(fields);","\tSize.inject(fields);","\tColor.inject(fields);","","\tfunction __$__(left, operator, right) {","\t\tvar handler = binaryOperators[operator];","\t\tif (left && left[handler]) {","\t\t\tvar res = left[handler](right);","\t\t\treturn operator === '!=' ? !res : res;","\t\t}","\t\tswitch (operator) {","\t\tcase '+': return left + right;","\t\tcase '-': return left - right;","\t\tcase '*': return left * right;","\t\tcase '/': return left / right;","\t\tcase '%': return left % right;","\t\tcase '==': return left == right;","\t\tcase '!=': return left != right;","\t\t}","\t}","","\tfunction $__(operator, value) {","\t\tvar handler = unaryOperators[operator];","\t\tif (handler && value && value[handler])","\t\t\treturn value[handler]();","\t\tswitch (operator) {","\t\tcase '+': return +value;","\t\tcase '-': return -value;","\t\t}","\t}","","\tfunction parse(code, options) {","\t\treturn scope.acorn.parse(code, options);","\t}","","\tfunction compile(code, url, options) {","\t\tif (!code)","\t\t\treturn '';","\t\toptions = options || {};","\t\turl = url || '';","","\t\tvar insertions = [];","","\t\tfunction getOffset(offset) {","\t\t\tfor (var i = 0, l = insertions.length; i < l; i++) {","\t\t\t\tvar insertion = insertions[i];","\t\t\t\tif (insertion[0] >= offset)","\t\t\t\t\tbreak;","\t\t\t\toffset += insertion[1];","\t\t\t}","\t\t\treturn offset;","\t\t}","","\t\tfunction getCode(node) {","\t\t\treturn code.substring(getOffset(node.range[0]),","\t\t\t\t\tgetOffset(node.range[1]));","\t\t}","","\t\tfunction getBetween(left, right) {","\t\t\treturn code.substring(getOffset(left.range[1]),","\t\t\t\t\tgetOffset(right.range[0]));","\t\t}","","\t\tfunction replaceCode(node, str) {","\t\t\tvar start = getOffset(node.range[0]),","\t\t\t\tend = getOffset(node.range[1]),","\t\t\t\tinsert = 0;","\t\t\tfor (var i = insertions.length - 1; i >= 0; i--) {","\t\t\t\tif (start > insertions[i][0]) {","\t\t\t\t\tinsert = i + 1;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\tinsertions.splice(insert, 0, [start, str.length - end + start]);","\t\t\tcode = code.substring(0, start) + str + code.substring(end);","\t\t}","","\t\tfunction walkAST(node, parent) {","\t\t\tif (!node)","\t\t\t\treturn;","\t\t\tfor (var key in node) {","\t\t\t\tif (key === 'range' || key === 'loc')","\t\t\t\t\tcontinue;","\t\t\t\tvar value = node[key];","\t\t\t\tif (Array.isArray(value)) {","\t\t\t\t\tfor (var i = 0, l = value.length; i < l; i++)","\t\t\t\t\t\twalkAST(value[i], node);","\t\t\t\t} else if (value && typeof value === 'object') {","\t\t\t\t\twalkAST(value, node);","\t\t\t\t}","\t\t\t}","\t\t\tswitch (node.type) {","\t\t\tcase 'UnaryExpression':","\t\t\t\tif (node.operator in unaryOperators","\t\t\t\t\t\t&& node.argument.type !== 'Literal') {","\t\t\t\t\tvar arg = getCode(node.argument);","\t\t\t\t\treplaceCode(node, '$__(\"' + node.operator + '\", '","\t\t\t\t\t\t\t+ arg + ')');","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'BinaryExpression':","\t\t\t\tif (node.operator in binaryOperators","\t\t\t\t\t\t&& node.left.type !== 'Literal') {","\t\t\t\t\tvar left = getCode(node.left),","\t\t\t\t\t\tright = getCode(node.right),","\t\t\t\t\t\tbetween = getBetween(node.left, node.right),","\t\t\t\t\t\toperator = node.operator;","\t\t\t\t\treplaceCode(node, '__$__(' + left + ','","\t\t\t\t\t\t\t+ between.replace(new RegExp('\\\\' + operator),","\t\t\t\t\t\t\t\t'\"' + operator + '\"')","\t\t\t\t\t\t\t+ ', ' + right + ')');","\t\t\t\t}","\t\t\t\tbreak;","\t\t\tcase 'UpdateExpression':","\t\t\tcase 'AssignmentExpression':","\t\t\t\tvar parentType = parent && parent.type;","\t\t\t\tif (!(","\t\t\t\t\t\tparentType === 'ForStatement'","\t\t\t\t\t\t|| parentType === 'BinaryExpression'","\t\t\t\t\t\t\t&& /^[=!<>]/.test(parent.operator)","\t\t\t\t\t\t|| parentType === 'MemberExpression' && parent.computed","\t\t\t\t)) {","\t\t\t\t\tif (node.type === 'UpdateExpression') {","\t\t\t\t\t\tvar arg = getCode(node.argument);","\t\t\t\t\t\tvar str = arg + ' = __$__(' + arg","\t\t\t\t\t\t\t\t+ ', \"' + node.operator[0] + '\", 1)';","\t\t\t\t\t\tif (!node.prefix","\t\t\t\t\t\t\t\t&& (parentType === 'AssignmentExpression'","\t\t\t\t\t\t\t\t\t|| parentType === 'VariableDeclarator'))","\t\t\t\t\t\t\tstr = arg + '; ' + str;","\t\t\t\t\t\treplaceCode(node, str);","\t\t\t\t\t} else {","\t\t\t\t\t\tif (/^.=$/.test(node.operator)","\t\t\t\t\t\t\t\t&& node.left.type !== 'Literal') {","\t\t\t\t\t\t\tvar left = getCode(node.left),","\t\t\t\t\t\t\t\tright = getCode(node.right);","\t\t\t\t\t\t\treplaceCode(node, left + ' = __$__(' + left + ', \"'","\t\t\t\t\t\t\t\t\t+ node.operator[0] + '\", ' + right + ')');","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tvar sourceMap = null,","\t\t\tbrowser = paper.browser,","\t\t\tversion = browser.versionNumber,","\t\t\tlineBreaks = /\\r\\n|\\n|\\r/mg;","\t\tif (browser.chrome && version >= 30","\t\t\t\t|| browser.webkit && version >= 537.76","\t\t\t\t|| browser.firefox && version >= 23) {","\t\t\tvar offset = 0;","\t\t\tif (window.location.href.indexOf(url) === 0) {","\t\t\t\tvar html = document.getElementsByTagName('html')[0].innerHTML;","\t\t\t\toffset = html.substr(0, html.indexOf(code) + 1).match(","\t\t\t\t\t\tlineBreaks).length + 1;","\t\t\t}","\t\t\tvar mappings = ['AAAA'];","\t\t\tmappings.length = (code.match(lineBreaks) || []).length + 1 + offset;","\t\t\tsourceMap = {","\t\t\t\tversion: 3,","\t\t\t\tfile: url,","\t\t\t\tnames:[],","\t\t\t\tmappings: mappings.join(';AACA'),","\t\t\t\tsourceRoot: '',","\t\t\t\tsources: [url]","\t\t\t};","\t\t\tvar source = options.source || !url && code;","\t\t\tif (source)","\t\t\t\tsourceMap.sourcesContent = [source];","\t\t}","\t\twalkAST(parse(code, { ranges: true }));","\t\tif (sourceMap) {","\t\t\tcode = new Array(offset + 1).join('\\n') + code","\t\t\t\t\t+ \"\\n//# sourceMappingURL=data:application/json;base64,\"","\t\t\t\t\t+ (btoa(unescape(encodeURIComponent(","\t\t\t\t\t\tJSON.stringify(sourceMap)))))","\t\t\t\t\t+ \"\\n//# sourceURL=\" + (url || 'paperscript');","\t\t}","\t\treturn code;","\t}","","\tfunction execute(code, scope, url, options) {","\t\tpaper = scope;","\t\tvar view = scope.getView(),","\t\t\ttool = /\\s+on(?:Key|Mouse)(?:Up|Down|Move|Drag)\\b/.test(code)","\t\t\t\t\t? new Tool()","\t\t\t\t\t: null,","\t\t\ttoolHandlers = tool ? tool._events : [],","\t\t\thandlers = ['onFrame', 'onResize'].concat(toolHandlers),","\t\t\tparams = [],","\t\t\targs = [],","\t\t\tfunc;","\t\tcode = compile(code, url, options);","\t\tfunction expose(scope, hidden) {","\t\t\tfor (var key in scope) {","\t\t\t\tif ((hidden || !/^_/.test(key)) && new RegExp('([\\\\b\\\\s\\\\W]|^)'","\t\t\t\t\t\t+ key.replace(/\\$/g, '\\\\$') + '\\\\b').test(code)) {","\t\t\t\t\tparams.push(key);","\t\t\t\t\targs.push(scope[key]);","\t\t\t\t}","\t\t\t}","\t\t}","\t\texpose({ __$__: __$__, $__: $__, paper: scope, view: view, tool: tool },","\t\t\t\ttrue);","\t\texpose(scope);","\t\thandlers = Base.each(handlers, function(key) {","\t\t\tif (new RegExp('\\\\s+' + key + '\\\\b').test(code)) {","\t\t\t\tparams.push(key);","\t\t\t\tthis.push(key + ': ' + key);","\t\t\t}","\t\t}, []).join(', ');","\t\tif (handlers)","\t\t\tcode += '\\nreturn { ' + handlers + ' };';","\t\tvar browser = paper.browser;","\t\tif (browser.chrome || browser.firefox) {","\t\t\tvar script = document.createElement('script'),","\t\t\t\thead = document.head || document.getElementsByTagName('head')[0];","\t\t\tif (browser.firefox)","\t\t\t\tcode = '\\n' + code;","\t\t\tscript.appendChild(document.createTextNode(","\t\t\t\t'paper._execute = function(' + params + ') {' + code + '\\n}'","\t\t\t));","\t\t\thead.appendChild(script);","\t\t\tfunc = paper._execute;","\t\t\tdelete paper._execute;","\t\t\thead.removeChild(script);","\t\t} else {","\t\t\tfunc = Function(params, code);","\t\t}","\t\tvar res = func.apply(scope, args) || {};","\t\tBase.each(toolHandlers, function(key) {","\t\t\tvar value = res[key];","\t\t\tif (value)","\t\t\t\ttool[key] = value;","\t\t});","\t\tif (view) {","\t\t\tif (res.onResize)","\t\t\t\tview.setOnResize(res.onResize);","\t\t\tview.emit('resize', {","\t\t\t\tsize: view.size,","\t\t\t\tdelta: new Point()","\t\t\t});","\t\t\tif (res.onFrame)","\t\t\t\tview.setOnFrame(res.onFrame);","\t\t\tview.update();","\t\t}","\t}","","\tfunction loadScript(script) {","\t\tif (/^text\\/(?:x-|)paperscript$/.test(script.type)","\t\t\t\t&& PaperScope.getAttribute(script, 'ignore') !== 'true') {","\t\t\tvar canvasId = PaperScope.getAttribute(script, 'canvas'),","\t\t\t\tcanvas = document.getElementById(canvasId),","\t\t\t\tsrc = script.src,","\t\t\t\tscopeAttribute = 'data-paper-scope';","\t\t\tif (!canvas)","\t\t\t\tthrow new Error('Unable to find canvas with id \"'","\t\t\t\t\t\t+ canvasId + '\"');","\t\t\tvar scope = PaperScope.get(canvas.getAttribute(scopeAttribute))","\t\t\t\t\t\t|| new PaperScope().setup(canvas);","\t\t\tcanvas.setAttribute(scopeAttribute, scope._id);","\t\t\tif (src) {","\t\t\t\tHttp.request('get', src, function(code) {","\t\t\t\t\texecute(code, scope, src);","\t\t\t\t});","\t\t\t} else {","\t\t\t\texecute(script.innerHTML, scope, script.baseURI);","\t\t\t}","\t\t\tscript.setAttribute('data-paper-ignore', 'true');","\t\t\treturn scope;","\t\t}","\t}","","\tfunction loadAll() {","\t\tBase.each(document.getElementsByTagName('script'), loadScript);","\t}","","\tfunction load(script) {","\t\treturn script ? loadScript(script) : loadAll();","\t}","","\tif (document.readyState === 'complete') {","\t\tsetTimeout(loadAll);","\t} else {","\t\tDomEvent.add(window, { load: loadAll });","\t}","","\treturn {","\t\tcompile: compile,","\t\texecute: execute,","\t\tload: load,","\t\tparse: parse","\t};","","}).call(this);","","paper = new (PaperScope.inject(Base.exports, {","\tenumerable: true,","\tBase: Base,","\tNumerical: Numerical,","\tKey: Key","}))();","","if (typeof define === 'function' && define.amd) {","\tdefine('paper', paper);","} else if (typeof module === 'object' && module) {","\tmodule.exports = paper;","}","","return paper;","};"]}]}]]},"ace":{"folds":[],"scrolltop":181611,"scrollleft":0,"selection":{"start":{"row":13017,"column":2},"end":{"row":13017,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":12971,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1425576238155,"hash":"3da1f62e584fd930d13bb68e7d369f6c7524ffc5"}